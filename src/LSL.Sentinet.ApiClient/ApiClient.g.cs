//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace LSL.Sentinet.ApiClient
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface ISentinetApiClient : LSL.NSwag.CommonTypes.Client.INSwagClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates, updates, or deletes the X.509 certificate records in the provided collection.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Certificate>> CreateOrUpdateOrDeleteCertificatesWithResultAsync(System.Collections.Generic.IEnumerable<Certificate> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates service level agreement and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceAgreementDefinition> CreateOrUpdateServiceAgreementWithResultAsync(ServiceAgreementDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new service agreement as a copy of existing one.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CopyServiceAgreementAsync(int serviceAgreementId, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new service agreement as a copy of existing one and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceAgreementDefinition> CopyServiceAgreementWithResultAsync(int serviceAgreementId, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes service agreement corresponding to provided database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteServiceAgreementAsync(int serviceAgreementId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns summary for the service agreements belonging to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceAgreementsSummary> GetServiceAgreementSummaryAsync(int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of service agreement violation counts aggregated into the requested time intervals for the specified metrics.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServiceAgreementViolationSummary>> GetServiceAgreementViolationsSummaryAsync(ServiceAgreementViolationSummaryRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of service agreement violations satisfying the provided search criteria.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServiceAgreementViolation>> GetServiceAgreementViolationsAsync(ServiceAgreementViolationsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of service agreement metric readings aggregated by the time intervals of the requested length.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MetricReadingSummary>> GetServiceAgreementReadingsSummaryAsync(System.Collections.Generic.IEnumerable<int> metricIds, System.DateTimeOffset startDateTime, TimeUnit timeUnit, int timeResolution, System.DateTimeOffset? endDateTime = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of service agreement metric readings done during the specified time interval.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MetricReading>> GetServiceAgreementReadingsAsync(System.Collections.Generic.IEnumerable<int> metricIds, System.DateTimeOffset startDateTime, SortField sortField, SortOrder sortOrder, System.DateTimeOffset? endDateTime = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of service agreements matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServiceAgreementSearchResult>> FindServiceAgreementsAsync(ServiceAgreementSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns service version configuration related to providing static responses without making outbound service calls.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StaticResponseConfiguration> GetStaticResponseConfigurationAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Configures or re-configures a service version with ability to provide static responses to operation requests without making outbound service calls.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreateOrUpdateStaticResponseConfigurationAsync(StaticResponseConfiguration body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Configures or re-configures a service version with ability to provide static responses to operation requests without making outbound service calls.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StaticResponseConfiguration> CreateOrUpdateStaticResponseConfigurationWithResultAsync(StaticResponseConfiguration body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Saves provided sample message content to a temporary storage for a limited amount of time and returns file identifier. If content is not referenced by a &lt;see cref="MessageSample"/&gt;, it will be deleted after expiration.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateMessageContentAsync(int messageId, MessageVersion messageVersion, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Generates a sample message content for requested service message.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<File> CreateMessageContentWithResultAsync(int messageId, MessageVersion2 messageVersion, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Generates a sample message content for requested service message.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MessageContent> GenerateMessageContentAsync(int messageId, MessageGenerationSettings body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Generates XSD schema for requested service message. This method can only be called for strongly-typed request or response messages (SOAP, no faults).
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MessageSchema> GenerateMessageSchemaAsync(int messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deserializes and returns the message processing pipeline from provided XML string.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MessagePipeline> DeserializeMessagePipelineAsync(object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Serializes provided message processing pipeline to XML string.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SerializeMessagePipelineAsync(MessagePipeline body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the cross-dependency map for the specified entities together with entities they depend on.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DependencyPackage> GetDependenciesAsync(bool includeDeclarative, int maxDownLevels, int maxUpLevels, System.Collections.Generic.IEnumerable<LocalIdentifier> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Exports specified entities into an XML file and returns it serialized to byte array.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> ExportEntitiesAsync(System.Collections.Generic.IEnumerable<LocalIdentifier> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Exports specified entities into an XML file and returns it serialized to a stream.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Stream> ExportEntitiesToStreamAsync(System.Collections.Generic.IEnumerable<LocalIdentifier> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Uploads provided repository package and stores it in the service session storage.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepositoryPackageInfo> ImportRepositoryPackageAsync(object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Uploads provided repository package and stores it in the service session storage.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RepositoryPackageInfo> ImportRepositoryPackageFromStreamAsync(Stream body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Imports specified entities from a repository import package stored in the service session storage into the local repository.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ImportEntitiesAsync(int fileId, bool verifyOnly, System.Collections.Generic.IEnumerable<LocalIdentifier> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Imports specified entities from a repository import package stored in the service session storage into the local repository.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ImportEntitiesFromPackageAsync(RepositoryPackageImportParameters body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the entity of the specified type and having the provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchResult> FindEntityAsync(int entityId, EntityType entityType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of entities corresponding to provided unique keys.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EntityInfo>> FindEntitiesAsync(object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns security-related information about currently logged user as well as current application configuration settings.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SystemInfo> GetSystemInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns basic information about provided X.509 certificate.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CertificateInfo> GetCertificateInfoAsync(string password, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns X.509 certificates belonging to Certificate Authorities that have to be trusted by service providers and consumers.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateInfo>> GetCertificateAuthoritiesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create new X.509 certificate issued by Repository Certificate Authority.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CertificateInfo> CreateCertificateAsync(string subjectName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create new X.509 certificate issued by Repository Certificate Authority.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CertificateInfo> CreatePfxCertificateAsync(string subjectName, int validDays, string password, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Signs provided X.509 certificate signing request (CSR) using Repository Certificate Authority certificate.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SignCertificateRequestAsync(object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of all time zones known by the server.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TimeZoneInfo>> GetSystemTimeZonesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns default web.config file for a node's application folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetDefaultNodeConfigurationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Randomly generates a secret of the specified length.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GenerateSecretAsync(Type type, int length, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Tests provided URI matching template with the specified relative URI. If match succeeds, the result can be optionally used to construct another URI with the specified URI binding template.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MatchRelativeUriResult> MatchRelativeUriAsync(string uri, string match, string bind, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Tests the provided Liquid template by rendering it with the specified content.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> RenderLiquidTemplateAsync(LiquidTemplateParameters body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Tests the provided C# code by compiling it into a message processing component.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CompileCodeAsync(CodeCompilationParameters body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Provides ability to authenticate user and issue authentication cookie to be used with ASP.NET Forms Authentication.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> LogOnAsync(LogOnCredentials body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Provides ability to authenticate the user and issue the authentication token to be used with ASP.NET Forms Authentication.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetLogOnTokenAsync(LogOnCredentials body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing product in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateProductAsync(bool changeAccessKeyRequirements, ProductDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing product in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProductDefinition> CreateOrUpdateProductWithResultAsync(bool changeAccessKeyRequirements, ProductDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the product corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProductDefinition> GetProductAsync(int productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes product corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteProductAsync(int productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns products matching the provided search criteria. Product description field is NOT populated.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Product>> FindProductsAsync(ProductSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing consumer in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateConsumerAsync(Consumer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing consumer in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Consumer> CreateOrUpdateConsumerWithResultAsync(Consumer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the consumer corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Consumer> GetConsumerAsync(int consumerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes consumer corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteConsumerAsync(int consumerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns consumers matching the provided search criteria. Consumer description field is NOT populated.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Consumer>> FindConsumersAsync(ConsumerSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing subscription in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateSubscriptionAsync(bool allowToGenerateUniqueName, SubscriptionDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing subscription in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubscriptionDefinition> CreateOrUpdateSubscriptionWithResultAsync(bool allowToGenerateUniqueName, SubscriptionDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the subscription corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubscriptionDefinition> GetSubscriptionAsync(int subscriptionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes subscription corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSubscriptionAsync(int subscriptionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of subscriptions matching the provided search criteria.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Subscription>> FindSubscriptionsAsync(SubscriptionSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the number of subscriptions with the requested &lt;see cref="SubscriptionStatus"/&gt;. This is a lightweight operation that can be used for polling.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetSubscriptionsCountAsync(Status? status = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns applications matching the provided search criteria.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Application>> FindApplicationsAsync(ApplicationSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns Developer Portal summary.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalSummary> GetPortalSummaryAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// When implemented by a class, deserializes policy description from the provided XML configuration.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PolicyDescription> DeserializePolicyAsync(object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Serializes the specified policy description as XML configuration string.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SerializePolicyAsync(PolicyDescription body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing security role in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateSecurityRoleAsync(SecurityRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing security role in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityRole> CreateOrUpdateSecurityRoleWithResultAsync(SecurityRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns security role corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityRole> GetSecurityRoleAsync(int securityRoleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of all security roles in the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SecurityRole>> GetSecurityRolesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of all security role names.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Subtree>> GetSecurityRoleNamesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes security role corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSecurityRoleAsync(int securityRoleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates, updates, or deletes the security roles in the provided collection. System security roles cannot be updated and shall not be submitted. The most current security roles are returned.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SecurityRole>> CreateOrUpdateOrDeleteSecurityRolesWithResultAsync(System.Collections.Generic.IEnumerable<SecurityRole> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates, updates, or deletes the security roles in the provided collection. System security roles cannot be updated and shall not be submitted.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreateOrUpdateOrDeleteSecurityRolesAsync(System.Collections.Generic.IEnumerable<SecurityRole> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns custom attribute types defined for the specified entity type.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomAttributeType>> GetCustomAttributeTypesAsync(EntityType2 entityType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates, updates, or deletes the custom attribute types for the specified entity type.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreateOrUpdateOrDeleteCustomAttributeTypesAsync(EntityType3 entityType, System.Collections.Generic.IEnumerable<CustomAttributeType> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates, updates, or deletes the custom attribute types for the specified entity type. The most current types are returned.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomAttributeType>> CreateOrUpdateOrDeleteCustomAttributeTypesWithResultAsync(EntityType4 entityType, System.Collections.Generic.IEnumerable<CustomAttributeType> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// When implemented by a class, gets the collection of configured virtualization profiles.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VirtualizationProfile>> GetVirtualizationProfilesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// When implemented by a class, gets the virtualization profile details.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VirtualizationProfile> GetVirtualizationProfileAsync(int profileId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// When implemented by a class, creates a new or updates an existing virtualization profile and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateVirtualizationProfileAsync(VirtualizationProfile body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// When implemented by a class, creates a new or updates an existing virtualization profile and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VirtualizationProfile> CreateOrUpdateVirtualizationProfileWithResultAsync(VirtualizationProfile body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// When implemented by a class, deletes the specified virtualization profile from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVirtualizationProfileAsync(int profileId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates an existing X.509 certificate record in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateCertificateAsync(Certificate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates an existing X.509 certificate record in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Certificate> CreateOrUpdateCertificateWithResultAsync(Certificate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns basic information about provided X.509 certificate.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Certificate> GetCertificateAsync(int certificateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes X.509 certificate record corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCertificateAsync(int certificateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of all X.509 certificate records in the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Certificate>> GetCertificatesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates, updates, or deletes the X.509 certificate records in the provided collection.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreateOrUpdateOrDeleteCertificatesAsync(System.Collections.Generic.IEnumerable<Certificate> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of public service and endpoint behaviors matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BehaviorSearchResult>> FindBehaviorsAsync(BehaviorSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates or update a node and all underlying entities from provided hierarchy of definition objects and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateNodeAsync(NodeDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates or update a node and all underlying entities from provided hierarchy of definition objects and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NodeDefinition> CreateOrUpdateNodeWithResultAsync(NodeDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the node corresponding to provided identifier with its underlying objects.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NodeDefinition> GetNodeAsync(int nodeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the node corresponding to provided key with its underlying objects.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NodeDefinition> GetNodeByKeyAsync(System.Guid nodeKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes node corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteNodeAsync(int nodeId, bool forceDelete, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns summary for the nodes belonging to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NodesSummary> GetNodesSummaryAsync(int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of nodes matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SearchResult>> FindNodesAsync(NodeSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing outbound message router type in the database and returns its unique identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateRouterTypeAsync(RouterType body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing outbound message router type in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RouterType> CreateOrUpdateRouterTypeWithResultAsync(RouterType body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns outbound message router type corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RouterType> GetRouterTypeAsync(int routerTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of all outbound message router types in the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RouterType>> GetRouterTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes outbound message router type corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteRouterTypeAsync(int routerTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing custom message evaluating expression type in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateExpressionTypeAsync(ExpressionType body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing custom message evaluating expression type in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExpressionType> CreateOrUpdateExpressionTypeWithResultAsync(ExpressionType body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns custom message evaluating expression type corresponding to the provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExpressionType> GetExpressionTypeAsync(int expressionTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of all custom message evaluating expression types in the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ExpressionType>> GetExpressionTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes custom message evaluating expression type corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteExpressionTypeAsync(int expressionTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing custom message processing component type in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateComponentTypeAsync(ComponentType body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing custom message processing component type in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComponentType> CreateOrUpdateComponentTypeWithResultAsync(ComponentType body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns custom message processing component type corresponding to the provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComponentType> GetComponentTypeAsync(int componentTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of all custom message processing component types in the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ComponentType>> GetComponentTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes custom message processing component type corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteComponentTypeAsync(int componentTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieves service metadata using HTTP GET method on provided metadata URL, persists downloaded service metadata in the session store, parses it, and returns details about the containing services, contracts, and endpoints.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MetadataInfo> ImportMetadataAsync(string address, string userName, string password, string domain, Serializer serializer, bool transformToDocumentStyle, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieves service metadata from provided Metadata Exchange endpoint, persists downloaded service metadata in the session store, parses it, and returns details about the containing services, contracts, and endpoints.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MetadataInfo> ImportMetadataFromMexEndpointAsync(Serializer2 serializer, bool transformToDocumentStyle, ClientEndpointConfiguration body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Reads service metadata from a string representing metadata set, persists it in the session store, parses it, and returns details about the containing services, contracts, and endpoints.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MetadataInfo> ImportMetadataFromStringAsync(Serializer3 serializer, bool transformToDocumentStyle, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates service metadata from provided collection of WSDL documents and XML schemas, persists metadata in the session store, parses it, and returns details about the containing services, contracts, and endpoints.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MetadataInfo> ImportMetadataFromFilesAsync(Serializer4 serializer, bool transformToDocumentStyle, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieves Swagger document from provided URL, persists it in the session store, parses it, and returns details about the containing operations and endpoints.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestMetadataInfo> ImportSwaggerAsync(string address, string userName, string password, string domain, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Persists provided Swagger document in the session store, parses it, and returns details about the containing operations and endpoints.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RestMetadataInfo> ImportSwaggerFromStringAsync(object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing authorization rule in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateAuthorizationRuleAsync(AuthorizationRuleDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing authorization rule in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthorizationRuleDefinition> CreateOrUpdateAuthorizationRuleWithResultAsync(AuthorizationRuleDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns authorization rule corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthorizationRuleDefinition> GetAuthorizationRuleAsync(int ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes authorization rule corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAuthorizationRuleAsync(int ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates, updates, or deletes authorization rule assignments for the specified service version.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreateOrUpdateAuthorizationRuleAssignmentsAsync(int serviceVersionId, System.Collections.Generic.IEnumerable<AuthorizationRuleAssignment> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates, updates, or deletes authorization rule assignments for the specified service version.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuthorizationRuleAssignment>> CreateOrUpdateAuthorizationRuleAssignmentsWithResultAsync(int serviceVersionId, System.Collections.Generic.IEnumerable<AuthorizationRuleAssignment> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of authorization rule assignments attached to the specified service version.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuthorizationRuleAssignment>> GetAuthorizationRuleAssignmentsAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the Microsoft Excel Open XML report file containing collection of access rules assigned to the specified service version.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DownloadAuthorizationRuleAssignmentsReportAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of well-known claim types sorted by claim type definition string.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuthorizationClaimType>> GetAuthorizationClaimTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns summary for the authorization rules belonging to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthorizationRulesSummary> GetAuthorizationRulesSummaryAsync(int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deserializes and returns an authorization expression tree from provided XML string.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthorizationExpressionBase> DeserializeAuthorizationExpressionAsync(object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Serializes provided authorization expression tree to XML string.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SerializeAuthorizationExpressionAsync(AuthorizationExpressionBase body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of authorization rules matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuthorizationRuleSearchResult>> FindAuthorizationRulesAsync(AuthorizationRuleSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing authorization group in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateAuthorizationGroupAsync(AuthorizationGroupDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing authorization group in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthorizationGroupDefinition> CreateOrUpdateAuthorizationGroupWithResultAsync(AuthorizationGroupDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns authorization group corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthorizationGroupDefinition> GetAuthorizationGroupAsync(int groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes authorization group corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAuthorizationGroupAsync(int groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns summary for the authorization groups belonging to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthorizationGroupsSummary> GetAuthorizationGroupsSummaryAsync(int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of authorization groups matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuthorizationGroupSearchResult>> FindAuthorizationGroupsAsync(AuthorizationGroupSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns custom entity corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomEntityDefinition> GetCustomEntityAsync(int entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing custom entity in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateCustomEntityAsync(CustomEntityDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing custom entity in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomEntityDefinition> CreateOrUpdateCustomEntityWithResultAsync(CustomEntityDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes custom entity corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCustomEntityAsync(int entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns summary for the custom entities belonging to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomEntitiesSummary> GetCustomEntitiesSummaryAsync(int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of custom entity descriptions matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SearchResult>> FindCustomEntitiesAsync(CustomEntitySearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all custom types that can be used in Sentinet extensibility points.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExtensibilityTypes> GetExtensibilityTypesAsync(bool includeSystemTypes, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates, updates, or deletes the Sentinet custom extensibility types according to the provided data. System types cannot be updated and shall not be submitted.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreateOrUpdateOrDeleteExtensibilityTypesAsync(ExtensibilityTypes body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates, updates, or deletes the Sentinet custom extensibility types according to the provided data. System types cannot be updated and shall not be submitted. The most current extensibility types are returned.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExtensibilityTypes> CreateOrUpdateOrDeleteExtensibilityTypesWithResultAsync(bool includeSystemTypes, ExtensibilityTypes body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns requested transaction statistics according to the specified time resolution.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MonitoringTransactionSummary>> GetTransactionSummaryAsync(TransactionSummaryRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of transactions recorded in the specified time interval with basic information about transaction.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MonitoringTransactionHeader>> GetTransactionHeadersAsync(TransactionHeadersRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of endpoint transactions (inbound and outbound) which have the same transaction Id as the transaction identified by provided database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MonitoringTransactionHeader>> GetTransactionHeadersByIdAsync(long transactionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns full information about endpoint transaction specified by provided database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MonitoringTransactionDetails> GetTransactionDetailsAsync(long transactionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of monitoring activities satisfying provided query parameters.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MonitoringActivity>> GetActivitiesAsync(MonitoringActivitiesRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns trace logs associated with the specified business transactions recorded inside the specified virtual service.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MonitoringTransactionTrace> GetTransactionTraceAsync(System.Guid transactionId, int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of services evaluated during the requested time period and ordered by specific performance metric.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceVersionUsageSummary> GetServiceVersionsUsageReportAsync(ServiceVersionUsageSummaryRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of service operations along with the basic usage information.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OperationUsageSummary> GetOperationsUsageReportAsync(OperationUsageSummaryRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of products evaluated during the requested time period and ordered by specific performance metric.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProductUsageSummary> GetProductsUsageReportAsync(UsageSummaryRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of consumers evaluated during the requested time period and ordered by specific performance metric.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConsumerUsageSummary> GetConsumersUsageReportAsync(UsageSummaryRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of consumers evaluated during the requested time period and ordered by specific performance metric.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubscriptionUsageSummary> GetSubscriptionsUsageReportAsync(UsageSummaryRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the Microsoft Excel Open XML report file containing collection of services evaluated during the requested time period and ordered by specific performance metric.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DownloadServiceVersionsUsageReportAsync(ServiceVersionUsageSummaryRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the Microsoft Excel Open XML report file containing collection of service operations along with the basic usage information.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DownloadOperationsUsageReportAsync(OperationUsageSummaryRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of change sets occurred between requested dates and initiated by the specified user.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ChangeSet>> GetChangeSetsAsync(System.DateTimeOffset startTime, System.DateTimeOffset? endTime = null, int? userId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of change records belonging to the specified change set.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ChangeSetDefinition> GetChangeSetAsync(int changeSetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of fields (properties) updated on the specified record (entity).
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ChangeRecordDefinition> GetChangeRecordAsync(int changeRecordId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of change records occurred in the specified folder and its sub-folders.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ChangeRecord>> GetChangeRecordsByFolderIdAsync(System.DateTimeOffset startTime, System.Collections.Generic.IEnumerable<Anonymous> entityTypes, ChangeTypes changeTypes, string searchTerm, System.DateTimeOffset? endTime = null, int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of change records belonging to the specified major entity.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ChangeRecord>> GetChangeRecordsByEntityIdAsync(int entityId, EntityType5 entityType, System.DateTimeOffset startTime, ChangeTypes2 changeTypes, string searchTerm, System.DateTimeOffset? endTime = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of user sessions satisfying provided search parameters.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserSession>> GetUserSessionsAsync(UserSessionsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new user in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateUserAsync(UserDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new user in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserDefinition> CreateOrUpdateUserWithResultAsync(UserDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns user corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserDefinition> GetUserAsync(int userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes user corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserAsync(int userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns summary for the users in security roles that belong to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SecurityRoleSummary>> GetUsersSummaryAsync(int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of Sentinet users matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserSearchResult>> FindUsersAsync(UserSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns Developer Portal users matching the provided search criteria.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> FindConsumerUsersAsync(ConsumerUserSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns service level agreement corresponding to the specified database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceAgreementDefinition> GetServiceAgreementAsync(int serviceAgreementId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates service level agreement and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateServiceAgreementAsync(ServiceAgreementDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of all alert sources registered in the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AlertSourceType>> GetAlertSourceTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of all alert handler types registered in the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AlertHandlerType>> GetAlertHandlerTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns alert handler type corresponding to the provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlertHandlerType> GetAlertHandlerTypeAsync(int alertHandlerTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing alert handler type in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateAlertHandlerTypeAsync(AlertHandlerType body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing alert handler type in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlertHandlerType> CreateOrUpdateAlertHandlerTypeWithResultAsync(AlertHandlerType body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes alert handler type corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAlertHandlerTypeAsync(int alertHandlerTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of all existing alert groups.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AlertGroup>> GetAlertGroupsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of alert types satisfying provided request.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AlertType>> GetAlertTypesAsync(AlertTypesRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing alert type with related entities and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateAlertTypeAsync(AlertTypeDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing alert type with related entities and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlertTypeDefinition> CreateOrUpdateAlertTypeWithResultAsync(AlertTypeDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns alert type and related entities corresponding to provided database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlertTypeDefinition> GetAlertTypeAsync(int alertTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns alert type and related entities corresponding to provided unique identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlertTypeDefinition> GetAlertTypeByKeyAsync(System.Guid alertTypeKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes alert type and related entities from the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAlertTypeAsync(int alertTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing alert type group with related entities and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateAlertGroupAsync(AlertGroupDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing alert type group with related entities and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlertGroupDefinition> CreateOrUpdateAlertGroupWithResultAsync(AlertGroupDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns alert type group and related entities corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AlertGroupDefinition> GetAlertGroupAsync(int alertGroupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes alert type group and related entities from the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAlertGroupAsync(int alertGroupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns alerts statistics according to the specified time resolution.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AlertSummary>> GetAlertSummaryAsync(AlertSummaryRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns alerts satisfying the provided search criteria.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Alert>> GetAlertsAsync(AlertRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns simplified Developer Portal notification configuration.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PortalNotificationConfiguration> GetPortalNotificationConfigurationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates the Developer Portal notification settings according to the provided simplified configuration.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdatePortalNotificationConfigurationAsync(PortalNotificationConfiguration body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns child entities (services, nodes, bindings, and sub-folders) located under specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FolderSubtree> GetFolderSubtreeAsync(bool expandSubfolders, Entities entities, int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns child entities (services, nodes, bindings, and sub-folders) located under specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Folder> GetFolderAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing folder in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateFolderAsync(Folder body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing folder in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Folder> CreateOrUpdateFolderWithResultAsync(Folder body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes folder corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteFolderAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns folder corresponding to provided identifier with summary objects describing its own entities and entities in all its sub-folders.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FolderSummary> GetFolderSummaryAsync(int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Moves a repository entity (service, binding, rule, user, etc) to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveFolderEntityAsync(int entityId, EntityType6 entityType, int? targetFolderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Moves all repository entities of the specified type(s) (services, bindings, rules, users, etc) from one folder to another.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveFolderEntitiesAsync(Entities2 entities, int? sourceFolderId = null, int? targetFolderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of folders matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SearchResult>> FindFoldersAsync(SearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing file in the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateFileAsync(File body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing file in the database and returns its fully populated metadata with no content.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<File> CreateOrUpdateFileWithResultAsync(File body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns file corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<File> GetFileAsync(int fileId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes file corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteFileAsync(int fileId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of services and their service versions virtualized by specified virtual service.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServiceSubtree>> GetDownstreamServiceSubtreesAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns child entities (service versions, contracts, endpoints, operations, etc) related to provided service.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceSubtree> GetServiceSubtreeAsync(int serviceId, bool expandServiceVersions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns physical or virtual service corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceDefinition> GetServiceAsync(int serviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing physical or virtual service in the database and returns its unique identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateServiceAsync(ServiceDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing physical or virtual service in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceDefinition> CreateOrUpdateServiceWithResultAsync(ServiceDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes physical or virtual service corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteServiceAsync(int serviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns summary for the services belonging to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServicesSummary> GetServicesSummaryAsync(int? folderId = null, bool? isVirtual = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of service descriptions matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServiceSearchResult>> FindServicesAsync(ServiceSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns child entities (contracts, endpoints, operations, etc) related to provided service version.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceVersionSubtree> GetServiceVersionSubtreeAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns hierarchy of objects composing the service version corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceVersionDefinition> GetServiceVersionAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates or updates a service version and all underlying entities from provided hierarchy of definition objects.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateServiceVersionAsync(bool replaceDuplicateActions, BaseAddressCollisionAction baseAddressCollisionAction, ServiceVersionDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates or updates a service version and all underlying entities from provided hierarchy of definition objects and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceVersionDefinition> CreateOrUpdateServiceVersionWithResultAsync(bool replaceDuplicateActions, BaseAddressCollisionAction2 baseAddressCollisionAction, ServiceVersionDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new service version and all underlying entities by importing service details from provided metadata.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateServiceVersionFromMetadataAsync(int fileId, ErrorTolerance errorTolerance, Serializer5 serializer, bool wrappedParameters, ServiceVersionImportDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new service version and all underlying entities by importing service details from provided metadata. Newly created service version is returned.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceVersionDefinition> CreateServiceVersionFromMetadataWithResultAsync(int fileId, ErrorTolerance2 errorTolerance, Serializer6 serializer, bool wrappedParameters, ServiceVersionImportDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates an existing physical SOAP service version and all underlying entities from provided metadata. Updated service version is returned.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceVersionDefinition> UpdateServiceVersionFromMetadataWithResultAsync(int fileId, ErrorTolerance3 errorTolerance, Serializer7 serializer, bool wrappedParameters, ServiceVersionUpdateDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new service version and all underlying entities by importing service details from the provided Swagger document.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateServiceVersionFromSwaggerAsync(int fileId, int serviceId, Status2 status, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new service version and all underlying entities by importing service details from the provided Swagger document. Newly created service version is returned.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceVersionDefinition> CreateServiceVersionFromSwaggerWithResultAsync(int fileId, int serviceId, Status3 status, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates an existing physical RESTful service version and all underlying entities from provided Swagger document. Updated service version is returned.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceVersionDefinition> UpdateServiceVersionFromSwaggerWithResultAsync(int fileId, int serviceVersionId, Options options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new service version as a copy of existing one under the same service.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CopyServiceVersionAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new service version as a copy of existing one under the same service and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceVersionDefinition> CopyServiceVersionWithResultAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes service version corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteServiceVersionAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of service version descriptions matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServiceVersionSearchResult>> FindServiceVersionsAsync(ServiceVersionSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deserializes and returns a collection of monitoring filters from provided XML string.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MonitoringFilterBase>> DeserializeMonitoringFiltersAsync(object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Serializes the provided collection of monitoring filters to XML string.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SerializeMonitoringFiltersAsync(System.Collections.Generic.IEnumerable<MonitoringFilterBase> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// When implemented by a class, virtualizes a service version using the specified &lt;paramref name="request"/&gt;
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServiceVersionDefinition> CreateServiceVersionFromProfileAsync(VirtualizationRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns XML schemas with XSD content related to the specified service version.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DataSchema>> GetDataSchemasAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of global XML elements defined in XML schemas attached to the specified service version.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<QualifiedName>> GetDataSchemaElementsAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new, updates existing, or deletes missing XML schemas assigned to a service version.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreateOrUpdateDataSchemasAsync(int serviceVersionId, System.Collections.Generic.IEnumerable<DataSchema> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new, updates existing, or deletes missing XML schemas assigned to a service version.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DataSchema>> CreateOrUpdateDataSchemasWithResultAsync(int serviceVersionId, System.Collections.Generic.IEnumerable<DataSchema> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns hierarchy of child objects corresponding to requested operation.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OperationDefinition> GetOperationAsync(int operationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the endpoint and hierarchy of all related object corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EndpointDefinition> GetEndpointAsync(int endpointId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the endpoint and hierarchy of all related object corresponding to provided unique identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EndpointDefinition> GetEndpointByKeyAsync(System.Guid endpointKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of endpoints hosted by the specified node.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EndpointSummary>> GetNodeEndpointsAsync(int nodeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of endpoint descriptions matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EndpointSearchResult>> FindEndpointsAsync(EndpointSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing endpoint binding in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateBindingAsync(Binding body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing endpoint binding in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Binding> CreateOrUpdateBindingWithResultAsync(Binding body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns endpoint binding corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Binding> GetBindingAsync(int bindingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes endpoint binding corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBindingAsync(int bindingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns summary for the public bindings belonging to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BindingsSummary> GetBindingsSummaryAsync(int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of public bindings matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BindingSearchResult>> FindBindingsAsync(BindingSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing public identity in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateIdentityAsync(IdentityDefinitionBase body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing public identity in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IdentityDefinitionBase> CreateOrUpdateIdentityWithResultAsync(IdentityDefinitionBase body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns public identity corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IdentityDefinitionBase> GetIdentityAsync(int identityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes public identity corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteIdentityAsync(int identityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns summary for the public identities belonging to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IdentitiesSummary> GetIdentitiesSummaryAsync(int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of public identities matching the provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentitySearchResult>> FindIdentitiesAsync(IdentitySearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing behavior in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CreateOrUpdateBehaviorAsync(Behavior body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing behavior in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Behavior> CreateOrUpdateBehaviorWithResultAsync(Behavior body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns endpoint or service behavior corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Behavior> GetBehaviorAsync(int behaviorId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes endpoint or service behavior corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBehaviorAsync(int behaviorId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns summary for the public behaviors belonging to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BehaviorsSummary> GetBehaviorsSummaryAsync(int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SentinetApiClient : ISentinetApiClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public SentinetApiClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates, updates, or deletes the X.509 certificate records in the provided collection.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Certificate>> CreateOrUpdateOrDeleteCertificatesWithResultAsync(System.Collections.Generic.IEnumerable<Certificate> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateOrDeleteCertificatesWithResult"
                    urlBuilder_.Append("CreateOrUpdateOrDeleteCertificatesWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Certificate>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates service level agreement and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServiceAgreementDefinition> CreateOrUpdateServiceAgreementWithResultAsync(ServiceAgreementDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateServiceAgreementWithResult"
                    urlBuilder_.Append("CreateOrUpdateServiceAgreementWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceAgreementDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new service agreement as a copy of existing one.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CopyServiceAgreementAsync(int serviceAgreementId, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceAgreementId == null)
                throw new System.ArgumentNullException("serviceAgreementId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CopyServiceAgreement"
                    urlBuilder_.Append("CopyServiceAgreement");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceAgreementId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceAgreementId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new service agreement as a copy of existing one and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServiceAgreementDefinition> CopyServiceAgreementWithResultAsync(int serviceAgreementId, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceAgreementId == null)
                throw new System.ArgumentNullException("serviceAgreementId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CopyServiceAgreementWithResult"
                    urlBuilder_.Append("CopyServiceAgreementWithResult");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceAgreementId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceAgreementId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceAgreementDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes service agreement corresponding to provided database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteServiceAgreementAsync(int serviceAgreementId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceAgreementId == null)
                throw new System.ArgumentNullException("serviceAgreementId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteServiceAgreement"
                    urlBuilder_.Append("DeleteServiceAgreement");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceAgreementId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceAgreementId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns summary for the service agreements belonging to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServiceAgreementsSummary> GetServiceAgreementSummaryAsync(int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetServiceAgreementSummary"
                    urlBuilder_.Append("GetServiceAgreementSummary");
                    urlBuilder_.Append('?');
                    if (folderId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("folderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(folderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceAgreementsSummary>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of service agreement violation counts aggregated into the requested time intervals for the specified metrics.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServiceAgreementViolationSummary>> GetServiceAgreementViolationsSummaryAsync(ServiceAgreementViolationSummaryRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetServiceAgreementViolationsSummary"
                    urlBuilder_.Append("GetServiceAgreementViolationsSummary");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ServiceAgreementViolationSummary>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of service agreement violations satisfying the provided search criteria.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServiceAgreementViolation>> GetServiceAgreementViolationsAsync(ServiceAgreementViolationsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetServiceAgreementViolations"
                    urlBuilder_.Append("GetServiceAgreementViolations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ServiceAgreementViolation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of service agreement metric readings aggregated by the time intervals of the requested length.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MetricReadingSummary>> GetServiceAgreementReadingsSummaryAsync(System.Collections.Generic.IEnumerable<int> metricIds, System.DateTimeOffset startDateTime, TimeUnit timeUnit, int timeResolution, System.DateTimeOffset? endDateTime = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (metricIds == null)
                throw new System.ArgumentNullException("metricIds");

            if (startDateTime == null)
                throw new System.ArgumentNullException("startDateTime");

            if (timeUnit == null)
                throw new System.ArgumentNullException("timeUnit");

            if (timeResolution == null)
                throw new System.ArgumentNullException("timeResolution");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetServiceAgreementReadingsSummary"
                    urlBuilder_.Append("GetServiceAgreementReadingsSummary");
                    urlBuilder_.Append('?');
                    foreach (var item_ in metricIds) { urlBuilder_.Append(System.Uri.EscapeDataString("metricIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    urlBuilder_.Append(System.Uri.EscapeDataString("startDateTime")).Append('=').Append(System.Uri.EscapeDataString(startDateTime.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("timeUnit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timeUnit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("timeResolution")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(timeResolution, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (endDateTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDateTime")).Append('=').Append(System.Uri.EscapeDataString(endDateTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MetricReadingSummary>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of service agreement metric readings done during the specified time interval.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MetricReading>> GetServiceAgreementReadingsAsync(System.Collections.Generic.IEnumerable<int> metricIds, System.DateTimeOffset startDateTime, SortField sortField, SortOrder sortOrder, System.DateTimeOffset? endDateTime = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (metricIds == null)
                throw new System.ArgumentNullException("metricIds");

            if (startDateTime == null)
                throw new System.ArgumentNullException("startDateTime");

            if (sortField == null)
                throw new System.ArgumentNullException("sortField");

            if (sortOrder == null)
                throw new System.ArgumentNullException("sortOrder");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetServiceAgreementReadings"
                    urlBuilder_.Append("GetServiceAgreementReadings");
                    urlBuilder_.Append('?');
                    foreach (var item_ in metricIds) { urlBuilder_.Append(System.Uri.EscapeDataString("metricIds")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    urlBuilder_.Append(System.Uri.EscapeDataString("startDateTime")).Append('=').Append(System.Uri.EscapeDataString(startDateTime.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("sortField")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortField, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("sortOrder")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortOrder, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (endDateTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endDateTime")).Append('=').Append(System.Uri.EscapeDataString(endDateTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MetricReading>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of service agreements matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServiceAgreementSearchResult>> FindServiceAgreementsAsync(ServiceAgreementSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "FindServiceAgreements"
                    urlBuilder_.Append("FindServiceAgreements");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ServiceAgreementSearchResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns service version configuration related to providing static responses without making outbound service calls.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StaticResponseConfiguration> GetStaticResponseConfigurationAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceVersionId == null)
                throw new System.ArgumentNullException("serviceVersionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetStaticResponseConfiguration"
                    urlBuilder_.Append("GetStaticResponseConfiguration");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceVersionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceVersionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StaticResponseConfiguration>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Configures or re-configures a service version with ability to provide static responses to operation requests without making outbound service calls.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateOrUpdateStaticResponseConfigurationAsync(StaticResponseConfiguration body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateStaticResponseConfiguration"
                    urlBuilder_.Append("CreateOrUpdateStaticResponseConfiguration");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Configures or re-configures a service version with ability to provide static responses to operation requests without making outbound service calls.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StaticResponseConfiguration> CreateOrUpdateStaticResponseConfigurationWithResultAsync(StaticResponseConfiguration body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateStaticResponseConfigurationWithResult"
                    urlBuilder_.Append("CreateOrUpdateStaticResponseConfigurationWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StaticResponseConfiguration>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Saves provided sample message content to a temporary storage for a limited amount of time and returns file identifier. If content is not referenced by a &lt;see cref="MessageSample"/&gt;, it will be deleted after expiration.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateMessageContentAsync(int messageId, MessageVersion messageVersion, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (messageId == null)
                throw new System.ArgumentNullException("messageId");

            if (messageVersion == null)
                throw new System.ArgumentNullException("messageVersion");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateMessageContent"
                    urlBuilder_.Append("CreateMessageContent");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("messageId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("messageVersion")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(messageVersion, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Generates a sample message content for requested service message.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<File> CreateMessageContentWithResultAsync(int messageId, MessageVersion2 messageVersion, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (messageId == null)
                throw new System.ArgumentNullException("messageId");

            if (messageVersion == null)
                throw new System.ArgumentNullException("messageVersion");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateMessageContentWithResult"
                    urlBuilder_.Append("CreateMessageContentWithResult");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("messageId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("messageVersion")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(messageVersion, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<File>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Generates a sample message content for requested service message.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MessageContent> GenerateMessageContentAsync(int messageId, MessageGenerationSettings body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (messageId == null)
                throw new System.ArgumentNullException("messageId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GenerateMessageContent"
                    urlBuilder_.Append("GenerateMessageContent");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("messageId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageContent>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Generates XSD schema for requested service message. This method can only be called for strongly-typed request or response messages (SOAP, no faults).
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MessageSchema> GenerateMessageSchemaAsync(int messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (messageId == null)
                throw new System.ArgumentNullException("messageId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GenerateMessageSchema"
                    urlBuilder_.Append("GenerateMessageSchema");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("messageId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(messageId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessageSchema>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deserializes and returns the message processing pipeline from provided XML string.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MessagePipeline> DeserializeMessagePipelineAsync(object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeserializeMessagePipeline"
                    urlBuilder_.Append("DeserializeMessagePipeline");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MessagePipeline>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Serializes provided message processing pipeline to XML string.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> SerializeMessagePipelineAsync(MessagePipeline body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "SerializeMessagePipeline"
                    urlBuilder_.Append("SerializeMessagePipeline");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the cross-dependency map for the specified entities together with entities they depend on.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DependencyPackage> GetDependenciesAsync(bool includeDeclarative, int maxDownLevels, int maxUpLevels, System.Collections.Generic.IEnumerable<LocalIdentifier> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (includeDeclarative == null)
                throw new System.ArgumentNullException("includeDeclarative");

            if (maxDownLevels == null)
                throw new System.ArgumentNullException("maxDownLevels");

            if (maxUpLevels == null)
                throw new System.ArgumentNullException("maxUpLevels");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetDependencies"
                    urlBuilder_.Append("GetDependencies");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("includeDeclarative")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeDeclarative, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("maxDownLevels")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxDownLevels, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("maxUpLevels")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxUpLevels, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DependencyPackage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Exports specified entities into an XML file and returns it serialized to byte array.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> ExportEntitiesAsync(System.Collections.Generic.IEnumerable<LocalIdentifier> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "ExportEntities"
                    urlBuilder_.Append("ExportEntities");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Exports specified entities into an XML file and returns it serialized to a stream.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Stream> ExportEntitiesToStreamAsync(System.Collections.Generic.IEnumerable<LocalIdentifier> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "ExportEntitiesToStream"
                    urlBuilder_.Append("ExportEntitiesToStream");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Stream>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Uploads provided repository package and stores it in the service session storage.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RepositoryPackageInfo> ImportRepositoryPackageAsync(object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "ImportRepositoryPackage"
                    urlBuilder_.Append("ImportRepositoryPackage");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RepositoryPackageInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Uploads provided repository package and stores it in the service session storage.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RepositoryPackageInfo> ImportRepositoryPackageFromStreamAsync(Stream body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "ImportRepositoryPackageFromStream"
                    urlBuilder_.Append("ImportRepositoryPackageFromStream");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RepositoryPackageInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Imports specified entities from a repository import package stored in the service session storage into the local repository.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ImportEntitiesAsync(int fileId, bool verifyOnly, System.Collections.Generic.IEnumerable<LocalIdentifier> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (fileId == null)
                throw new System.ArgumentNullException("fileId");

            if (verifyOnly == null)
                throw new System.ArgumentNullException("verifyOnly");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "ImportEntities"
                    urlBuilder_.Append("ImportEntities");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("fileId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fileId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("verifyOnly")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(verifyOnly, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Imports specified entities from a repository import package stored in the service session storage into the local repository.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ImportEntitiesFromPackageAsync(RepositoryPackageImportParameters body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "ImportEntitiesFromPackage"
                    urlBuilder_.Append("ImportEntitiesFromPackage");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the entity of the specified type and having the provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SearchResult> FindEntityAsync(int entityId, EntityType entityType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (entityId == null)
                throw new System.ArgumentNullException("entityId");

            if (entityType == null)
                throw new System.ArgumentNullException("entityType");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "FindEntity"
                    urlBuilder_.Append("FindEntity");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("entityId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(entityId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("entityType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(entityType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of entities corresponding to provided unique keys.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EntityInfo>> FindEntitiesAsync(object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "FindEntities"
                    urlBuilder_.Append("FindEntities");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EntityInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns security-related information about currently logged user as well as current application configuration settings.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SystemInfo> GetSystemInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetSystemInfo"
                    urlBuilder_.Append("GetSystemInfo");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SystemInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns basic information about provided X.509 certificate.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CertificateInfo> GetCertificateInfoAsync(string password, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (password == null)
                throw new System.ArgumentNullException("password");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetCertificateInfo"
                    urlBuilder_.Append("GetCertificateInfo");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns X.509 certificates belonging to Certificate Authorities that have to be trusted by service providers and consumers.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CertificateInfo>> GetCertificateAuthoritiesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetCertificateAuthorities"
                    urlBuilder_.Append("GetCertificateAuthorities");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CertificateInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create new X.509 certificate issued by Repository Certificate Authority.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CertificateInfo> CreateCertificateAsync(string subjectName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (subjectName == null)
                throw new System.ArgumentNullException("subjectName");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateCertificate"
                    urlBuilder_.Append("CreateCertificate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("subjectName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(subjectName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Create new X.509 certificate issued by Repository Certificate Authority.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CertificateInfo> CreatePfxCertificateAsync(string subjectName, int validDays, string password, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (subjectName == null)
                throw new System.ArgumentNullException("subjectName");

            if (validDays == null)
                throw new System.ArgumentNullException("validDays");

            if (password == null)
                throw new System.ArgumentNullException("password");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreatePfxCertificate"
                    urlBuilder_.Append("CreatePfxCertificate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("subjectName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(subjectName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("validDays")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(validDays, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CertificateInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Signs provided X.509 certificate signing request (CSR) using Repository Certificate Authority certificate.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> SignCertificateRequestAsync(object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "SignCertificateRequest"
                    urlBuilder_.Append("SignCertificateRequest");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of all time zones known by the server.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TimeZoneInfo>> GetSystemTimeZonesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetSystemTimeZones"
                    urlBuilder_.Append("GetSystemTimeZones");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TimeZoneInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns default web.config file for a node's application folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> GetDefaultNodeConfigurationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetDefaultNodeConfiguration"
                    urlBuilder_.Append("GetDefaultNodeConfiguration");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Randomly generates a secret of the specified length.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> GenerateSecretAsync(Type type, int length, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (type == null)
                throw new System.ArgumentNullException("type");

            if (length == null)
                throw new System.ArgumentNullException("length");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GenerateSecret"
                    urlBuilder_.Append("GenerateSecret");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("length")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(length, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Tests provided URI matching template with the specified relative URI. If match succeeds, the result can be optionally used to construct another URI with the specified URI binding template.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MatchRelativeUriResult> MatchRelativeUriAsync(string uri, string match, string bind, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (uri == null)
                throw new System.ArgumentNullException("uri");

            if (match == null)
                throw new System.ArgumentNullException("match");

            if (bind == null)
                throw new System.ArgumentNullException("bind");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "MatchRelativeUri"
                    urlBuilder_.Append("MatchRelativeUri");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("uri")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(uri, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("match")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(match, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("bind")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bind, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MatchRelativeUriResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Tests the provided Liquid template by rendering it with the specified content.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> RenderLiquidTemplateAsync(LiquidTemplateParameters body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "RenderLiquidTemplate"
                    urlBuilder_.Append("RenderLiquidTemplate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Tests the provided C# code by compiling it into a message processing component.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CompileCodeAsync(CodeCompilationParameters body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CompileCode"
                    urlBuilder_.Append("CompileCode");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Provides ability to authenticate user and issue authentication cookie to be used with ASP.NET Forms Authentication.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> LogOnAsync(LogOnCredentials body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "LogOn"
                    urlBuilder_.Append("LogOn");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Provides ability to authenticate the user and issue the authentication token to be used with ASP.NET Forms Authentication.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> GetLogOnTokenAsync(LogOnCredentials body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetLogOnToken"
                    urlBuilder_.Append("GetLogOnToken");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing product in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateProductAsync(bool changeAccessKeyRequirements, ProductDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (changeAccessKeyRequirements == null)
                throw new System.ArgumentNullException("changeAccessKeyRequirements");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateProduct"
                    urlBuilder_.Append("CreateOrUpdateProduct");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("changeAccessKeyRequirements")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(changeAccessKeyRequirements, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing product in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductDefinition> CreateOrUpdateProductWithResultAsync(bool changeAccessKeyRequirements, ProductDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (changeAccessKeyRequirements == null)
                throw new System.ArgumentNullException("changeAccessKeyRequirements");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateProductWithResult"
                    urlBuilder_.Append("CreateOrUpdateProductWithResult");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("changeAccessKeyRequirements")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(changeAccessKeyRequirements, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the product corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductDefinition> GetProductAsync(int productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (productId == null)
                throw new System.ArgumentNullException("productId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetProduct"
                    urlBuilder_.Append("GetProduct");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("productId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes product corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteProductAsync(int productId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (productId == null)
                throw new System.ArgumentNullException("productId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteProduct"
                    urlBuilder_.Append("DeleteProduct");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("productId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns products matching the provided search criteria. Product description field is NOT populated.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Product>> FindProductsAsync(ProductSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "FindProducts"
                    urlBuilder_.Append("FindProducts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Product>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing consumer in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateConsumerAsync(Consumer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateConsumer"
                    urlBuilder_.Append("CreateOrUpdateConsumer");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing consumer in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Consumer> CreateOrUpdateConsumerWithResultAsync(Consumer body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateConsumerWithResult"
                    urlBuilder_.Append("CreateOrUpdateConsumerWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Consumer>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the consumer corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Consumer> GetConsumerAsync(int consumerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (consumerId == null)
                throw new System.ArgumentNullException("consumerId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetConsumer"
                    urlBuilder_.Append("GetConsumer");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("consumerId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(consumerId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Consumer>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes consumer corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteConsumerAsync(int consumerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (consumerId == null)
                throw new System.ArgumentNullException("consumerId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteConsumer"
                    urlBuilder_.Append("DeleteConsumer");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("consumerId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(consumerId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns consumers matching the provided search criteria. Consumer description field is NOT populated.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Consumer>> FindConsumersAsync(ConsumerSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "FindConsumers"
                    urlBuilder_.Append("FindConsumers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Consumer>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing subscription in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateSubscriptionAsync(bool allowToGenerateUniqueName, SubscriptionDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (allowToGenerateUniqueName == null)
                throw new System.ArgumentNullException("allowToGenerateUniqueName");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateSubscription"
                    urlBuilder_.Append("CreateOrUpdateSubscription");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("allowToGenerateUniqueName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(allowToGenerateUniqueName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing subscription in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubscriptionDefinition> CreateOrUpdateSubscriptionWithResultAsync(bool allowToGenerateUniqueName, SubscriptionDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (allowToGenerateUniqueName == null)
                throw new System.ArgumentNullException("allowToGenerateUniqueName");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateSubscriptionWithResult"
                    urlBuilder_.Append("CreateOrUpdateSubscriptionWithResult");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("allowToGenerateUniqueName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(allowToGenerateUniqueName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubscriptionDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the subscription corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubscriptionDefinition> GetSubscriptionAsync(int subscriptionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (subscriptionId == null)
                throw new System.ArgumentNullException("subscriptionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetSubscription"
                    urlBuilder_.Append("GetSubscription");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("subscriptionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(subscriptionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubscriptionDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes subscription corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteSubscriptionAsync(int subscriptionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (subscriptionId == null)
                throw new System.ArgumentNullException("subscriptionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteSubscription"
                    urlBuilder_.Append("DeleteSubscription");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("subscriptionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(subscriptionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of subscriptions matching the provided search criteria.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Subscription>> FindSubscriptionsAsync(SubscriptionSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "FindSubscriptions"
                    urlBuilder_.Append("FindSubscriptions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Subscription>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the number of subscriptions with the requested &lt;see cref="SubscriptionStatus"/&gt;. This is a lightweight operation that can be used for polling.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> GetSubscriptionsCountAsync(Status? status = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetSubscriptionsCount"
                    urlBuilder_.Append("GetSubscriptionsCount");
                    urlBuilder_.Append('?');
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns applications matching the provided search criteria.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Application>> FindApplicationsAsync(ApplicationSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "FindApplications"
                    urlBuilder_.Append("FindApplications");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Application>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns Developer Portal summary.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PortalSummary> GetPortalSummaryAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetPortalSummary"
                    urlBuilder_.Append("GetPortalSummary");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PortalSummary>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// When implemented by a class, deserializes policy description from the provided XML configuration.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PolicyDescription> DeserializePolicyAsync(object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeserializePolicy"
                    urlBuilder_.Append("DeserializePolicy");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PolicyDescription>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Serializes the specified policy description as XML configuration string.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> SerializePolicyAsync(PolicyDescription body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "SerializePolicy"
                    urlBuilder_.Append("SerializePolicy");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing security role in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateSecurityRoleAsync(SecurityRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateSecurityRole"
                    urlBuilder_.Append("CreateOrUpdateSecurityRole");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing security role in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SecurityRole> CreateOrUpdateSecurityRoleWithResultAsync(SecurityRole body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateSecurityRoleWithResult"
                    urlBuilder_.Append("CreateOrUpdateSecurityRoleWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SecurityRole>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns security role corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SecurityRole> GetSecurityRoleAsync(int securityRoleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (securityRoleId == null)
                throw new System.ArgumentNullException("securityRoleId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetSecurityRole"
                    urlBuilder_.Append("GetSecurityRole");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("securityRoleId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(securityRoleId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SecurityRole>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of all security roles in the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SecurityRole>> GetSecurityRolesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetSecurityRoles"
                    urlBuilder_.Append("GetSecurityRoles");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SecurityRole>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of all security role names.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Subtree>> GetSecurityRoleNamesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetSecurityRoleNames"
                    urlBuilder_.Append("GetSecurityRoleNames");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Subtree>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes security role corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteSecurityRoleAsync(int securityRoleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (securityRoleId == null)
                throw new System.ArgumentNullException("securityRoleId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteSecurityRole"
                    urlBuilder_.Append("DeleteSecurityRole");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("securityRoleId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(securityRoleId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates, updates, or deletes the security roles in the provided collection. System security roles cannot be updated and shall not be submitted. The most current security roles are returned.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SecurityRole>> CreateOrUpdateOrDeleteSecurityRolesWithResultAsync(System.Collections.Generic.IEnumerable<SecurityRole> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateOrDeleteSecurityRolesWithResult"
                    urlBuilder_.Append("CreateOrUpdateOrDeleteSecurityRolesWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SecurityRole>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates, updates, or deletes the security roles in the provided collection. System security roles cannot be updated and shall not be submitted.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateOrUpdateOrDeleteSecurityRolesAsync(System.Collections.Generic.IEnumerable<SecurityRole> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateOrDeleteSecurityRoles"
                    urlBuilder_.Append("CreateOrUpdateOrDeleteSecurityRoles");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns custom attribute types defined for the specified entity type.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomAttributeType>> GetCustomAttributeTypesAsync(EntityType2 entityType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (entityType == null)
                throw new System.ArgumentNullException("entityType");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetCustomAttributeTypes"
                    urlBuilder_.Append("GetCustomAttributeTypes");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("entityType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(entityType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CustomAttributeType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates, updates, or deletes the custom attribute types for the specified entity type.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateOrUpdateOrDeleteCustomAttributeTypesAsync(EntityType3 entityType, System.Collections.Generic.IEnumerable<CustomAttributeType> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (entityType == null)
                throw new System.ArgumentNullException("entityType");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateOrDeleteCustomAttributeTypes"
                    urlBuilder_.Append("CreateOrUpdateOrDeleteCustomAttributeTypes");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("entityType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(entityType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates, updates, or deletes the custom attribute types for the specified entity type. The most current types are returned.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomAttributeType>> CreateOrUpdateOrDeleteCustomAttributeTypesWithResultAsync(EntityType4 entityType, System.Collections.Generic.IEnumerable<CustomAttributeType> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (entityType == null)
                throw new System.ArgumentNullException("entityType");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateOrDeleteCustomAttributeTypesWithResult"
                    urlBuilder_.Append("CreateOrUpdateOrDeleteCustomAttributeTypesWithResult");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("entityType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(entityType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CustomAttributeType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// When implemented by a class, gets the collection of configured virtualization profiles.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VirtualizationProfile>> GetVirtualizationProfilesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetVirtualizationProfiles"
                    urlBuilder_.Append("GetVirtualizationProfiles");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<VirtualizationProfile>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// When implemented by a class, gets the virtualization profile details.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VirtualizationProfile> GetVirtualizationProfileAsync(int profileId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (profileId == null)
                throw new System.ArgumentNullException("profileId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetVirtualizationProfile"
                    urlBuilder_.Append("GetVirtualizationProfile");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("profileId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(profileId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VirtualizationProfile>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// When implemented by a class, creates a new or updates an existing virtualization profile and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateVirtualizationProfileAsync(VirtualizationProfile body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateVirtualizationProfile"
                    urlBuilder_.Append("CreateOrUpdateVirtualizationProfile");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// When implemented by a class, creates a new or updates an existing virtualization profile and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VirtualizationProfile> CreateOrUpdateVirtualizationProfileWithResultAsync(VirtualizationProfile body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateVirtualizationProfileWithResult"
                    urlBuilder_.Append("CreateOrUpdateVirtualizationProfileWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VirtualizationProfile>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// When implemented by a class, deletes the specified virtualization profile from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteVirtualizationProfileAsync(int profileId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (profileId == null)
                throw new System.ArgumentNullException("profileId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteVirtualizationProfile"
                    urlBuilder_.Append("DeleteVirtualizationProfile");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("profileId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(profileId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates an existing X.509 certificate record in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateCertificateAsync(Certificate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateCertificate"
                    urlBuilder_.Append("CreateOrUpdateCertificate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates an existing X.509 certificate record in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Certificate> CreateOrUpdateCertificateWithResultAsync(Certificate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateCertificateWithResult"
                    urlBuilder_.Append("CreateOrUpdateCertificateWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Certificate>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns basic information about provided X.509 certificate.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Certificate> GetCertificateAsync(int certificateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (certificateId == null)
                throw new System.ArgumentNullException("certificateId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetCertificate"
                    urlBuilder_.Append("GetCertificate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("certificateId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(certificateId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Certificate>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes X.509 certificate record corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteCertificateAsync(int certificateId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (certificateId == null)
                throw new System.ArgumentNullException("certificateId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteCertificate"
                    urlBuilder_.Append("DeleteCertificate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("certificateId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(certificateId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of all X.509 certificate records in the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Certificate>> GetCertificatesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetCertificates"
                    urlBuilder_.Append("GetCertificates");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Certificate>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates, updates, or deletes the X.509 certificate records in the provided collection.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateOrUpdateOrDeleteCertificatesAsync(System.Collections.Generic.IEnumerable<Certificate> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateOrDeleteCertificates"
                    urlBuilder_.Append("CreateOrUpdateOrDeleteCertificates");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of public service and endpoint behaviors matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BehaviorSearchResult>> FindBehaviorsAsync(BehaviorSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "FindBehaviors"
                    urlBuilder_.Append("FindBehaviors");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<BehaviorSearchResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates or update a node and all underlying entities from provided hierarchy of definition objects and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateNodeAsync(NodeDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateNode"
                    urlBuilder_.Append("CreateOrUpdateNode");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates or update a node and all underlying entities from provided hierarchy of definition objects and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NodeDefinition> CreateOrUpdateNodeWithResultAsync(NodeDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateNodeWithResult"
                    urlBuilder_.Append("CreateOrUpdateNodeWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NodeDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the node corresponding to provided identifier with its underlying objects.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NodeDefinition> GetNodeAsync(int nodeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (nodeId == null)
                throw new System.ArgumentNullException("nodeId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetNode"
                    urlBuilder_.Append("GetNode");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("nodeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(nodeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NodeDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the node corresponding to provided key with its underlying objects.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NodeDefinition> GetNodeByKeyAsync(System.Guid nodeKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (nodeKey == null)
                throw new System.ArgumentNullException("nodeKey");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetNodeByKey"
                    urlBuilder_.Append("GetNodeByKey");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("nodeKey")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(nodeKey, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NodeDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes node corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteNodeAsync(int nodeId, bool forceDelete, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (nodeId == null)
                throw new System.ArgumentNullException("nodeId");

            if (forceDelete == null)
                throw new System.ArgumentNullException("forceDelete");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteNode"
                    urlBuilder_.Append("DeleteNode");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("nodeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(nodeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("forceDelete")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(forceDelete, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns summary for the nodes belonging to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NodesSummary> GetNodesSummaryAsync(int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetNodesSummary"
                    urlBuilder_.Append("GetNodesSummary");
                    urlBuilder_.Append('?');
                    if (folderId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("folderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(folderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NodesSummary>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of nodes matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SearchResult>> FindNodesAsync(NodeSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "FindNodes"
                    urlBuilder_.Append("FindNodes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SearchResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing outbound message router type in the database and returns its unique identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateRouterTypeAsync(RouterType body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateRouterType"
                    urlBuilder_.Append("CreateOrUpdateRouterType");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing outbound message router type in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RouterType> CreateOrUpdateRouterTypeWithResultAsync(RouterType body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateRouterTypeWithResult"
                    urlBuilder_.Append("CreateOrUpdateRouterTypeWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RouterType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns outbound message router type corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RouterType> GetRouterTypeAsync(int routerTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (routerTypeId == null)
                throw new System.ArgumentNullException("routerTypeId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetRouterType"
                    urlBuilder_.Append("GetRouterType");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("routerTypeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(routerTypeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RouterType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of all outbound message router types in the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RouterType>> GetRouterTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetRouterTypes"
                    urlBuilder_.Append("GetRouterTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RouterType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes outbound message router type corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteRouterTypeAsync(int routerTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (routerTypeId == null)
                throw new System.ArgumentNullException("routerTypeId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteRouterType"
                    urlBuilder_.Append("DeleteRouterType");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("routerTypeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(routerTypeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing custom message evaluating expression type in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateExpressionTypeAsync(ExpressionType body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateExpressionType"
                    urlBuilder_.Append("CreateOrUpdateExpressionType");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing custom message evaluating expression type in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ExpressionType> CreateOrUpdateExpressionTypeWithResultAsync(ExpressionType body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateExpressionTypeWithResult"
                    urlBuilder_.Append("CreateOrUpdateExpressionTypeWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExpressionType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns custom message evaluating expression type corresponding to the provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ExpressionType> GetExpressionTypeAsync(int expressionTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (expressionTypeId == null)
                throw new System.ArgumentNullException("expressionTypeId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetExpressionType"
                    urlBuilder_.Append("GetExpressionType");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("expressionTypeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(expressionTypeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExpressionType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of all custom message evaluating expression types in the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ExpressionType>> GetExpressionTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetExpressionTypes"
                    urlBuilder_.Append("GetExpressionTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ExpressionType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes custom message evaluating expression type corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteExpressionTypeAsync(int expressionTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (expressionTypeId == null)
                throw new System.ArgumentNullException("expressionTypeId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteExpressionType"
                    urlBuilder_.Append("DeleteExpressionType");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("expressionTypeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(expressionTypeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing custom message processing component type in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateComponentTypeAsync(ComponentType body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateComponentType"
                    urlBuilder_.Append("CreateOrUpdateComponentType");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing custom message processing component type in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ComponentType> CreateOrUpdateComponentTypeWithResultAsync(ComponentType body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateComponentTypeWithResult"
                    urlBuilder_.Append("CreateOrUpdateComponentTypeWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ComponentType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns custom message processing component type corresponding to the provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ComponentType> GetComponentTypeAsync(int componentTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (componentTypeId == null)
                throw new System.ArgumentNullException("componentTypeId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetComponentType"
                    urlBuilder_.Append("GetComponentType");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("componentTypeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(componentTypeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ComponentType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of all custom message processing component types in the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ComponentType>> GetComponentTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetComponentTypes"
                    urlBuilder_.Append("GetComponentTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ComponentType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes custom message processing component type corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteComponentTypeAsync(int componentTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (componentTypeId == null)
                throw new System.ArgumentNullException("componentTypeId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteComponentType"
                    urlBuilder_.Append("DeleteComponentType");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("componentTypeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(componentTypeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieves service metadata using HTTP GET method on provided metadata URL, persists downloaded service metadata in the session store, parses it, and returns details about the containing services, contracts, and endpoints.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MetadataInfo> ImportMetadataAsync(string address, string userName, string password, string domain, Serializer serializer, bool transformToDocumentStyle, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            if (domain == null)
                throw new System.ArgumentNullException("domain");

            if (serializer == null)
                throw new System.ArgumentNullException("serializer");

            if (transformToDocumentStyle == null)
                throw new System.ArgumentNullException("transformToDocumentStyle");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "ImportMetadata"
                    urlBuilder_.Append("ImportMetadata");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("address")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("domain")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(domain, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serializer")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serializer, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("transformToDocumentStyle")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(transformToDocumentStyle, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MetadataInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieves service metadata from provided Metadata Exchange endpoint, persists downloaded service metadata in the session store, parses it, and returns details about the containing services, contracts, and endpoints.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MetadataInfo> ImportMetadataFromMexEndpointAsync(Serializer2 serializer, bool transformToDocumentStyle, ClientEndpointConfiguration body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serializer == null)
                throw new System.ArgumentNullException("serializer");

            if (transformToDocumentStyle == null)
                throw new System.ArgumentNullException("transformToDocumentStyle");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "ImportMetadataFromMexEndpoint"
                    urlBuilder_.Append("ImportMetadataFromMexEndpoint");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serializer")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serializer, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("transformToDocumentStyle")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(transformToDocumentStyle, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MetadataInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Reads service metadata from a string representing metadata set, persists it in the session store, parses it, and returns details about the containing services, contracts, and endpoints.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MetadataInfo> ImportMetadataFromStringAsync(Serializer3 serializer, bool transformToDocumentStyle, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serializer == null)
                throw new System.ArgumentNullException("serializer");

            if (transformToDocumentStyle == null)
                throw new System.ArgumentNullException("transformToDocumentStyle");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "ImportMetadataFromString"
                    urlBuilder_.Append("ImportMetadataFromString");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serializer")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serializer, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("transformToDocumentStyle")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(transformToDocumentStyle, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MetadataInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates service metadata from provided collection of WSDL documents and XML schemas, persists metadata in the session store, parses it, and returns details about the containing services, contracts, and endpoints.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MetadataInfo> ImportMetadataFromFilesAsync(Serializer4 serializer, bool transformToDocumentStyle, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serializer == null)
                throw new System.ArgumentNullException("serializer");

            if (transformToDocumentStyle == null)
                throw new System.ArgumentNullException("transformToDocumentStyle");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "ImportMetadataFromFiles"
                    urlBuilder_.Append("ImportMetadataFromFiles");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serializer")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serializer, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("transformToDocumentStyle")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(transformToDocumentStyle, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MetadataInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieves Swagger document from provided URL, persists it in the session store, parses it, and returns details about the containing operations and endpoints.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RestMetadataInfo> ImportSwaggerAsync(string address, string userName, string password, string domain, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (address == null)
                throw new System.ArgumentNullException("address");

            if (userName == null)
                throw new System.ArgumentNullException("userName");

            if (password == null)
                throw new System.ArgumentNullException("password");

            if (domain == null)
                throw new System.ArgumentNullException("domain");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "ImportSwagger"
                    urlBuilder_.Append("ImportSwagger");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("address")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(address, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userName")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userName, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("password")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("domain")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(domain, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RestMetadataInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Persists provided Swagger document in the session store, parses it, and returns details about the containing operations and endpoints.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RestMetadataInfo> ImportSwaggerFromStringAsync(object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "ImportSwaggerFromString"
                    urlBuilder_.Append("ImportSwaggerFromString");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RestMetadataInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing authorization rule in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateAuthorizationRuleAsync(AuthorizationRuleDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateAuthorizationRule"
                    urlBuilder_.Append("CreateOrUpdateAuthorizationRule");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing authorization rule in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AuthorizationRuleDefinition> CreateOrUpdateAuthorizationRuleWithResultAsync(AuthorizationRuleDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateAuthorizationRuleWithResult"
                    urlBuilder_.Append("CreateOrUpdateAuthorizationRuleWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthorizationRuleDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns authorization rule corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AuthorizationRuleDefinition> GetAuthorizationRuleAsync(int ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ruleId == null)
                throw new System.ArgumentNullException("ruleId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetAuthorizationRule"
                    urlBuilder_.Append("GetAuthorizationRule");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("ruleId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ruleId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthorizationRuleDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes authorization rule corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteAuthorizationRuleAsync(int ruleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (ruleId == null)
                throw new System.ArgumentNullException("ruleId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteAuthorizationRule"
                    urlBuilder_.Append("DeleteAuthorizationRule");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("ruleId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ruleId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates, updates, or deletes authorization rule assignments for the specified service version.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateOrUpdateAuthorizationRuleAssignmentsAsync(int serviceVersionId, System.Collections.Generic.IEnumerable<AuthorizationRuleAssignment> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceVersionId == null)
                throw new System.ArgumentNullException("serviceVersionId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateAuthorizationRuleAssignments"
                    urlBuilder_.Append("CreateOrUpdateAuthorizationRuleAssignments");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceVersionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceVersionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates, updates, or deletes authorization rule assignments for the specified service version.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuthorizationRuleAssignment>> CreateOrUpdateAuthorizationRuleAssignmentsWithResultAsync(int serviceVersionId, System.Collections.Generic.IEnumerable<AuthorizationRuleAssignment> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceVersionId == null)
                throw new System.ArgumentNullException("serviceVersionId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateAuthorizationRuleAssignmentsWithResult"
                    urlBuilder_.Append("CreateOrUpdateAuthorizationRuleAssignmentsWithResult");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceVersionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceVersionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AuthorizationRuleAssignment>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of authorization rule assignments attached to the specified service version.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuthorizationRuleAssignment>> GetAuthorizationRuleAssignmentsAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceVersionId == null)
                throw new System.ArgumentNullException("serviceVersionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetAuthorizationRuleAssignments"
                    urlBuilder_.Append("GetAuthorizationRuleAssignments");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceVersionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceVersionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AuthorizationRuleAssignment>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the Microsoft Excel Open XML report file containing collection of access rules assigned to the specified service version.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> DownloadAuthorizationRuleAssignmentsReportAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceVersionId == null)
                throw new System.ArgumentNullException("serviceVersionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DownloadAuthorizationRuleAssignmentsReport"
                    urlBuilder_.Append("DownloadAuthorizationRuleAssignmentsReport");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceVersionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceVersionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of well-known claim types sorted by claim type definition string.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuthorizationClaimType>> GetAuthorizationClaimTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetAuthorizationClaimTypes"
                    urlBuilder_.Append("GetAuthorizationClaimTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AuthorizationClaimType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns summary for the authorization rules belonging to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AuthorizationRulesSummary> GetAuthorizationRulesSummaryAsync(int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetAuthorizationRulesSummary"
                    urlBuilder_.Append("GetAuthorizationRulesSummary");
                    urlBuilder_.Append('?');
                    if (folderId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("folderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(folderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthorizationRulesSummary>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deserializes and returns an authorization expression tree from provided XML string.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AuthorizationExpressionBase> DeserializeAuthorizationExpressionAsync(object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeserializeAuthorizationExpression"
                    urlBuilder_.Append("DeserializeAuthorizationExpression");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthorizationExpressionBase>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Serializes provided authorization expression tree to XML string.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> SerializeAuthorizationExpressionAsync(AuthorizationExpressionBase body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "SerializeAuthorizationExpression"
                    urlBuilder_.Append("SerializeAuthorizationExpression");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of authorization rules matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuthorizationRuleSearchResult>> FindAuthorizationRulesAsync(AuthorizationRuleSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "FindAuthorizationRules"
                    urlBuilder_.Append("FindAuthorizationRules");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AuthorizationRuleSearchResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing authorization group in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateAuthorizationGroupAsync(AuthorizationGroupDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateAuthorizationGroup"
                    urlBuilder_.Append("CreateOrUpdateAuthorizationGroup");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing authorization group in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AuthorizationGroupDefinition> CreateOrUpdateAuthorizationGroupWithResultAsync(AuthorizationGroupDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateAuthorizationGroupWithResult"
                    urlBuilder_.Append("CreateOrUpdateAuthorizationGroupWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthorizationGroupDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns authorization group corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AuthorizationGroupDefinition> GetAuthorizationGroupAsync(int groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetAuthorizationGroup"
                    urlBuilder_.Append("GetAuthorizationGroup");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("groupId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthorizationGroupDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes authorization group corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteAuthorizationGroupAsync(int groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (groupId == null)
                throw new System.ArgumentNullException("groupId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteAuthorizationGroup"
                    urlBuilder_.Append("DeleteAuthorizationGroup");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("groupId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(groupId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns summary for the authorization groups belonging to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AuthorizationGroupsSummary> GetAuthorizationGroupsSummaryAsync(int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetAuthorizationGroupsSummary"
                    urlBuilder_.Append("GetAuthorizationGroupsSummary");
                    urlBuilder_.Append('?');
                    if (folderId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("folderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(folderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AuthorizationGroupsSummary>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of authorization groups matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuthorizationGroupSearchResult>> FindAuthorizationGroupsAsync(AuthorizationGroupSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "FindAuthorizationGroups"
                    urlBuilder_.Append("FindAuthorizationGroups");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AuthorizationGroupSearchResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns custom entity corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomEntityDefinition> GetCustomEntityAsync(int entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (entityId == null)
                throw new System.ArgumentNullException("entityId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetCustomEntity"
                    urlBuilder_.Append("GetCustomEntity");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("entityId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(entityId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomEntityDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing custom entity in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateCustomEntityAsync(CustomEntityDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateCustomEntity"
                    urlBuilder_.Append("CreateOrUpdateCustomEntity");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing custom entity in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomEntityDefinition> CreateOrUpdateCustomEntityWithResultAsync(CustomEntityDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateCustomEntityWithResult"
                    urlBuilder_.Append("CreateOrUpdateCustomEntityWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomEntityDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes custom entity corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteCustomEntityAsync(int entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (entityId == null)
                throw new System.ArgumentNullException("entityId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteCustomEntity"
                    urlBuilder_.Append("DeleteCustomEntity");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("entityId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(entityId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns summary for the custom entities belonging to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomEntitiesSummary> GetCustomEntitiesSummaryAsync(int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetCustomEntitiesSummary"
                    urlBuilder_.Append("GetCustomEntitiesSummary");
                    urlBuilder_.Append('?');
                    if (folderId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("folderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(folderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomEntitiesSummary>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of custom entity descriptions matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SearchResult>> FindCustomEntitiesAsync(CustomEntitySearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "FindCustomEntities"
                    urlBuilder_.Append("FindCustomEntities");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SearchResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all custom types that can be used in Sentinet extensibility points.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ExtensibilityTypes> GetExtensibilityTypesAsync(bool includeSystemTypes, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (includeSystemTypes == null)
                throw new System.ArgumentNullException("includeSystemTypes");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetExtensibilityTypes"
                    urlBuilder_.Append("GetExtensibilityTypes");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("includeSystemTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeSystemTypes, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExtensibilityTypes>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates, updates, or deletes the Sentinet custom extensibility types according to the provided data. System types cannot be updated and shall not be submitted.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateOrUpdateOrDeleteExtensibilityTypesAsync(ExtensibilityTypes body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateOrDeleteExtensibilityTypes"
                    urlBuilder_.Append("CreateOrUpdateOrDeleteExtensibilityTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates, updates, or deletes the Sentinet custom extensibility types according to the provided data. System types cannot be updated and shall not be submitted. The most current extensibility types are returned.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ExtensibilityTypes> CreateOrUpdateOrDeleteExtensibilityTypesWithResultAsync(bool includeSystemTypes, ExtensibilityTypes body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (includeSystemTypes == null)
                throw new System.ArgumentNullException("includeSystemTypes");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateOrDeleteExtensibilityTypesWithResult"
                    urlBuilder_.Append("CreateOrUpdateOrDeleteExtensibilityTypesWithResult");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("includeSystemTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(includeSystemTypes, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExtensibilityTypes>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns requested transaction statistics according to the specified time resolution.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MonitoringTransactionSummary>> GetTransactionSummaryAsync(TransactionSummaryRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetTransactionSummary"
                    urlBuilder_.Append("GetTransactionSummary");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MonitoringTransactionSummary>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of transactions recorded in the specified time interval with basic information about transaction.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MonitoringTransactionHeader>> GetTransactionHeadersAsync(TransactionHeadersRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetTransactionHeaders"
                    urlBuilder_.Append("GetTransactionHeaders");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MonitoringTransactionHeader>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of endpoint transactions (inbound and outbound) which have the same transaction Id as the transaction identified by provided database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MonitoringTransactionHeader>> GetTransactionHeadersByIdAsync(long transactionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (transactionId == null)
                throw new System.ArgumentNullException("transactionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetTransactionHeadersById"
                    urlBuilder_.Append("GetTransactionHeadersById");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("transactionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(transactionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MonitoringTransactionHeader>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns full information about endpoint transaction specified by provided database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MonitoringTransactionDetails> GetTransactionDetailsAsync(long transactionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (transactionId == null)
                throw new System.ArgumentNullException("transactionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetTransactionDetails"
                    urlBuilder_.Append("GetTransactionDetails");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("transactionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(transactionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MonitoringTransactionDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of monitoring activities satisfying provided query parameters.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MonitoringActivity>> GetActivitiesAsync(MonitoringActivitiesRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetActivities"
                    urlBuilder_.Append("GetActivities");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MonitoringActivity>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns trace logs associated with the specified business transactions recorded inside the specified virtual service.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MonitoringTransactionTrace> GetTransactionTraceAsync(System.Guid transactionId, int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (transactionId == null)
                throw new System.ArgumentNullException("transactionId");

            if (serviceVersionId == null)
                throw new System.ArgumentNullException("serviceVersionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetTransactionTrace"
                    urlBuilder_.Append("GetTransactionTrace");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("transactionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(transactionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceVersionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceVersionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MonitoringTransactionTrace>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of services evaluated during the requested time period and ordered by specific performance metric.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServiceVersionUsageSummary> GetServiceVersionsUsageReportAsync(ServiceVersionUsageSummaryRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetServiceVersionsUsageReport"
                    urlBuilder_.Append("GetServiceVersionsUsageReport");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceVersionUsageSummary>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of service operations along with the basic usage information.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OperationUsageSummary> GetOperationsUsageReportAsync(OperationUsageSummaryRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetOperationsUsageReport"
                    urlBuilder_.Append("GetOperationsUsageReport");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OperationUsageSummary>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of products evaluated during the requested time period and ordered by specific performance metric.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductUsageSummary> GetProductsUsageReportAsync(UsageSummaryRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetProductsUsageReport"
                    urlBuilder_.Append("GetProductsUsageReport");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductUsageSummary>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of consumers evaluated during the requested time period and ordered by specific performance metric.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ConsumerUsageSummary> GetConsumersUsageReportAsync(UsageSummaryRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetConsumersUsageReport"
                    urlBuilder_.Append("GetConsumersUsageReport");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConsumerUsageSummary>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of consumers evaluated during the requested time period and ordered by specific performance metric.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubscriptionUsageSummary> GetSubscriptionsUsageReportAsync(UsageSummaryRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetSubscriptionsUsageReport"
                    urlBuilder_.Append("GetSubscriptionsUsageReport");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubscriptionUsageSummary>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the Microsoft Excel Open XML report file containing collection of services evaluated during the requested time period and ordered by specific performance metric.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> DownloadServiceVersionsUsageReportAsync(ServiceVersionUsageSummaryRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DownloadServiceVersionsUsageReport"
                    urlBuilder_.Append("DownloadServiceVersionsUsageReport");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the Microsoft Excel Open XML report file containing collection of service operations along with the basic usage information.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> DownloadOperationsUsageReportAsync(OperationUsageSummaryRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DownloadOperationsUsageReport"
                    urlBuilder_.Append("DownloadOperationsUsageReport");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of change sets occurred between requested dates and initiated by the specified user.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ChangeSet>> GetChangeSetsAsync(System.DateTimeOffset startTime, System.DateTimeOffset? endTime = null, int? userId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (startTime == null)
                throw new System.ArgumentNullException("startTime");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetChangeSets"
                    urlBuilder_.Append("GetChangeSets");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("startTime")).Append('=').Append(System.Uri.EscapeDataString(startTime.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (endTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endTime")).Append('=').Append(System.Uri.EscapeDataString(endTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (userId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("userId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ChangeSet>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of change records belonging to the specified change set.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ChangeSetDefinition> GetChangeSetAsync(int changeSetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (changeSetId == null)
                throw new System.ArgumentNullException("changeSetId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetChangeSet"
                    urlBuilder_.Append("GetChangeSet");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("changeSetId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(changeSetId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ChangeSetDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of fields (properties) updated on the specified record (entity).
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ChangeRecordDefinition> GetChangeRecordAsync(int changeRecordId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (changeRecordId == null)
                throw new System.ArgumentNullException("changeRecordId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetChangeRecord"
                    urlBuilder_.Append("GetChangeRecord");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("changeRecordId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(changeRecordId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ChangeRecordDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of change records occurred in the specified folder and its sub-folders.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ChangeRecord>> GetChangeRecordsByFolderIdAsync(System.DateTimeOffset startTime, System.Collections.Generic.IEnumerable<Anonymous> entityTypes, ChangeTypes changeTypes, string searchTerm, System.DateTimeOffset? endTime = null, int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (startTime == null)
                throw new System.ArgumentNullException("startTime");

            if (entityTypes == null)
                throw new System.ArgumentNullException("entityTypes");

            if (changeTypes == null)
                throw new System.ArgumentNullException("changeTypes");

            if (searchTerm == null)
                throw new System.ArgumentNullException("searchTerm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetChangeRecordsByFolderId"
                    urlBuilder_.Append("GetChangeRecordsByFolderId");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("startTime")).Append('=').Append(System.Uri.EscapeDataString(startTime.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    foreach (var item_ in entityTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("entityTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    urlBuilder_.Append(System.Uri.EscapeDataString("changeTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(changeTypes, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("searchTerm")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchTerm, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (endTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endTime")).Append('=').Append(System.Uri.EscapeDataString(endTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (folderId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("folderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(folderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ChangeRecord>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of change records belonging to the specified major entity.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ChangeRecord>> GetChangeRecordsByEntityIdAsync(int entityId, EntityType5 entityType, System.DateTimeOffset startTime, ChangeTypes2 changeTypes, string searchTerm, System.DateTimeOffset? endTime = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (entityId == null)
                throw new System.ArgumentNullException("entityId");

            if (entityType == null)
                throw new System.ArgumentNullException("entityType");

            if (startTime == null)
                throw new System.ArgumentNullException("startTime");

            if (changeTypes == null)
                throw new System.ArgumentNullException("changeTypes");

            if (searchTerm == null)
                throw new System.ArgumentNullException("searchTerm");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetChangeRecordsByEntityId"
                    urlBuilder_.Append("GetChangeRecordsByEntityId");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("entityId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(entityId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("entityType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(entityType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("startTime")).Append('=').Append(System.Uri.EscapeDataString(startTime.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("changeTypes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(changeTypes, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("searchTerm")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(searchTerm, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (endTime != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("endTime")).Append('=').Append(System.Uri.EscapeDataString(endTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ChangeRecord>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of user sessions satisfying provided search parameters.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserSession>> GetUserSessionsAsync(UserSessionsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetUserSessions"
                    urlBuilder_.Append("GetUserSessions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserSession>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new user in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateUserAsync(UserDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateUser"
                    urlBuilder_.Append("CreateOrUpdateUser");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new user in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserDefinition> CreateOrUpdateUserWithResultAsync(UserDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateUserWithResult"
                    urlBuilder_.Append("CreateOrUpdateUserWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns user corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserDefinition> GetUserAsync(int userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetUser"
                    urlBuilder_.Append("GetUser");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes user corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteUserAsync(int userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteUser"
                    urlBuilder_.Append("DeleteUser");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns summary for the users in security roles that belong to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SecurityRoleSummary>> GetUsersSummaryAsync(int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetUsersSummary"
                    urlBuilder_.Append("GetUsersSummary");
                    urlBuilder_.Append('?');
                    if (folderId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("folderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(folderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SecurityRoleSummary>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of Sentinet users matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserSearchResult>> FindUsersAsync(UserSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "FindUsers"
                    urlBuilder_.Append("FindUsers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserSearchResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns Developer Portal users matching the provided search criteria.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> FindConsumerUsersAsync(ConsumerUserSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "FindConsumerUsers"
                    urlBuilder_.Append("FindConsumerUsers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<User>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns service level agreement corresponding to the specified database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServiceAgreementDefinition> GetServiceAgreementAsync(int serviceAgreementId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceAgreementId == null)
                throw new System.ArgumentNullException("serviceAgreementId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetServiceAgreement"
                    urlBuilder_.Append("GetServiceAgreement");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceAgreementId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceAgreementId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceAgreementDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates service level agreement and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateServiceAgreementAsync(ServiceAgreementDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateServiceAgreement"
                    urlBuilder_.Append("CreateOrUpdateServiceAgreement");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of all alert sources registered in the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AlertSourceType>> GetAlertSourceTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetAlertSourceTypes"
                    urlBuilder_.Append("GetAlertSourceTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AlertSourceType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of all alert handler types registered in the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AlertHandlerType>> GetAlertHandlerTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetAlertHandlerTypes"
                    urlBuilder_.Append("GetAlertHandlerTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AlertHandlerType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns alert handler type corresponding to the provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AlertHandlerType> GetAlertHandlerTypeAsync(int alertHandlerTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (alertHandlerTypeId == null)
                throw new System.ArgumentNullException("alertHandlerTypeId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetAlertHandlerType"
                    urlBuilder_.Append("GetAlertHandlerType");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("alertHandlerTypeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(alertHandlerTypeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlertHandlerType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing alert handler type in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateAlertHandlerTypeAsync(AlertHandlerType body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateAlertHandlerType"
                    urlBuilder_.Append("CreateOrUpdateAlertHandlerType");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing alert handler type in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AlertHandlerType> CreateOrUpdateAlertHandlerTypeWithResultAsync(AlertHandlerType body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateAlertHandlerTypeWithResult"
                    urlBuilder_.Append("CreateOrUpdateAlertHandlerTypeWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlertHandlerType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes alert handler type corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteAlertHandlerTypeAsync(int alertHandlerTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (alertHandlerTypeId == null)
                throw new System.ArgumentNullException("alertHandlerTypeId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteAlertHandlerType"
                    urlBuilder_.Append("DeleteAlertHandlerType");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("alertHandlerTypeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(alertHandlerTypeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of all existing alert groups.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AlertGroup>> GetAlertGroupsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetAlertGroups"
                    urlBuilder_.Append("GetAlertGroups");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AlertGroup>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of alert types satisfying provided request.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AlertType>> GetAlertTypesAsync(AlertTypesRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetAlertTypes"
                    urlBuilder_.Append("GetAlertTypes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AlertType>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing alert type with related entities and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateAlertTypeAsync(AlertTypeDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateAlertType"
                    urlBuilder_.Append("CreateOrUpdateAlertType");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing alert type with related entities and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AlertTypeDefinition> CreateOrUpdateAlertTypeWithResultAsync(AlertTypeDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateAlertTypeWithResult"
                    urlBuilder_.Append("CreateOrUpdateAlertTypeWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlertTypeDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns alert type and related entities corresponding to provided database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AlertTypeDefinition> GetAlertTypeAsync(int alertTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (alertTypeId == null)
                throw new System.ArgumentNullException("alertTypeId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetAlertType"
                    urlBuilder_.Append("GetAlertType");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("alertTypeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(alertTypeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlertTypeDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns alert type and related entities corresponding to provided unique identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AlertTypeDefinition> GetAlertTypeByKeyAsync(System.Guid alertTypeKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (alertTypeKey == null)
                throw new System.ArgumentNullException("alertTypeKey");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetAlertTypeByKey"
                    urlBuilder_.Append("GetAlertTypeByKey");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("alertTypeKey")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(alertTypeKey, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlertTypeDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes alert type and related entities from the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteAlertTypeAsync(int alertTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (alertTypeId == null)
                throw new System.ArgumentNullException("alertTypeId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteAlertType"
                    urlBuilder_.Append("DeleteAlertType");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("alertTypeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(alertTypeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing alert type group with related entities and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateAlertGroupAsync(AlertGroupDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateAlertGroup"
                    urlBuilder_.Append("CreateOrUpdateAlertGroup");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing alert type group with related entities and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AlertGroupDefinition> CreateOrUpdateAlertGroupWithResultAsync(AlertGroupDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateAlertGroupWithResult"
                    urlBuilder_.Append("CreateOrUpdateAlertGroupWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlertGroupDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns alert type group and related entities corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AlertGroupDefinition> GetAlertGroupAsync(int alertGroupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (alertGroupId == null)
                throw new System.ArgumentNullException("alertGroupId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetAlertGroup"
                    urlBuilder_.Append("GetAlertGroup");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("alertGroupId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(alertGroupId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlertGroupDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes alert type group and related entities from the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteAlertGroupAsync(int alertGroupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (alertGroupId == null)
                throw new System.ArgumentNullException("alertGroupId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteAlertGroup"
                    urlBuilder_.Append("DeleteAlertGroup");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("alertGroupId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(alertGroupId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns alerts statistics according to the specified time resolution.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AlertSummary>> GetAlertSummaryAsync(AlertSummaryRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetAlertSummary"
                    urlBuilder_.Append("GetAlertSummary");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AlertSummary>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns alerts satisfying the provided search criteria.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Alert>> GetAlertsAsync(AlertRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetAlerts"
                    urlBuilder_.Append("GetAlerts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Alert>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns simplified Developer Portal notification configuration.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PortalNotificationConfiguration> GetPortalNotificationConfigurationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetPortalNotificationConfiguration"
                    urlBuilder_.Append("GetPortalNotificationConfiguration");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PortalNotificationConfiguration>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates the Developer Portal notification settings according to the provided simplified configuration.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdatePortalNotificationConfigurationAsync(PortalNotificationConfiguration body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "UpdatePortalNotificationConfiguration"
                    urlBuilder_.Append("UpdatePortalNotificationConfiguration");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns child entities (services, nodes, bindings, and sub-folders) located under specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FolderSubtree> GetFolderSubtreeAsync(bool expandSubfolders, Entities entities, int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (expandSubfolders == null)
                throw new System.ArgumentNullException("expandSubfolders");

            if (entities == null)
                throw new System.ArgumentNullException("entities");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetFolderSubtree"
                    urlBuilder_.Append("GetFolderSubtree");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("expandSubfolders")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(expandSubfolders, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("entities")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(entities, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (folderId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("folderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(folderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FolderSubtree>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns child entities (services, nodes, bindings, and sub-folders) located under specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Folder> GetFolderAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (folderId == null)
                throw new System.ArgumentNullException("folderId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetFolder"
                    urlBuilder_.Append("GetFolder");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("folderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(folderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Folder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing folder in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateFolderAsync(Folder body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateFolder"
                    urlBuilder_.Append("CreateOrUpdateFolder");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing folder in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Folder> CreateOrUpdateFolderWithResultAsync(Folder body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateFolderWithResult"
                    urlBuilder_.Append("CreateOrUpdateFolderWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Folder>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes folder corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteFolderAsync(int folderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (folderId == null)
                throw new System.ArgumentNullException("folderId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteFolder"
                    urlBuilder_.Append("DeleteFolder");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("folderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(folderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns folder corresponding to provided identifier with summary objects describing its own entities and entities in all its sub-folders.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FolderSummary> GetFolderSummaryAsync(int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetFolderSummary"
                    urlBuilder_.Append("GetFolderSummary");
                    urlBuilder_.Append('?');
                    if (folderId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("folderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(folderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FolderSummary>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Moves a repository entity (service, binding, rule, user, etc) to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task MoveFolderEntityAsync(int entityId, EntityType6 entityType, int? targetFolderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (entityId == null)
                throw new System.ArgumentNullException("entityId");

            if (entityType == null)
                throw new System.ArgumentNullException("entityType");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "MoveFolderEntity"
                    urlBuilder_.Append("MoveFolderEntity");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("entityId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(entityId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("entityType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(entityType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (targetFolderId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("targetFolderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(targetFolderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Moves all repository entities of the specified type(s) (services, bindings, rules, users, etc) from one folder to another.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task MoveFolderEntitiesAsync(Entities2 entities, int? sourceFolderId = null, int? targetFolderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (entities == null)
                throw new System.ArgumentNullException("entities");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "MoveFolderEntities"
                    urlBuilder_.Append("MoveFolderEntities");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("entities")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(entities, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (sourceFolderId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sourceFolderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sourceFolderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (targetFolderId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("targetFolderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(targetFolderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of folders matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SearchResult>> FindFoldersAsync(SearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "FindFolders"
                    urlBuilder_.Append("FindFolders");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SearchResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing file in the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateFileAsync(File body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateFile"
                    urlBuilder_.Append("CreateOrUpdateFile");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing file in the database and returns its fully populated metadata with no content.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<File> CreateOrUpdateFileWithResultAsync(File body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateFileWithResult"
                    urlBuilder_.Append("CreateOrUpdateFileWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<File>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns file corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<File> GetFileAsync(int fileId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (fileId == null)
                throw new System.ArgumentNullException("fileId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetFile"
                    urlBuilder_.Append("GetFile");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("fileId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fileId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<File>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes file corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteFileAsync(int fileId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (fileId == null)
                throw new System.ArgumentNullException("fileId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteFile"
                    urlBuilder_.Append("DeleteFile");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("fileId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fileId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of services and their service versions virtualized by specified virtual service.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServiceSubtree>> GetDownstreamServiceSubtreesAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceVersionId == null)
                throw new System.ArgumentNullException("serviceVersionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetDownstreamServiceSubtrees"
                    urlBuilder_.Append("GetDownstreamServiceSubtrees");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceVersionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceVersionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ServiceSubtree>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns child entities (service versions, contracts, endpoints, operations, etc) related to provided service.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServiceSubtree> GetServiceSubtreeAsync(int serviceId, bool expandServiceVersions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            if (expandServiceVersions == null)
                throw new System.ArgumentNullException("expandServiceVersions");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetServiceSubtree"
                    urlBuilder_.Append("GetServiceSubtree");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("expandServiceVersions")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(expandServiceVersions, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceSubtree>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns physical or virtual service corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServiceDefinition> GetServiceAsync(int serviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetService"
                    urlBuilder_.Append("GetService");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing physical or virtual service in the database and returns its unique identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateServiceAsync(ServiceDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateService"
                    urlBuilder_.Append("CreateOrUpdateService");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing physical or virtual service in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServiceDefinition> CreateOrUpdateServiceWithResultAsync(ServiceDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateServiceWithResult"
                    urlBuilder_.Append("CreateOrUpdateServiceWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes physical or virtual service corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteServiceAsync(int serviceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteService"
                    urlBuilder_.Append("DeleteService");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns summary for the services belonging to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServicesSummary> GetServicesSummaryAsync(int? folderId = null, bool? isVirtual = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetServicesSummary"
                    urlBuilder_.Append("GetServicesSummary");
                    urlBuilder_.Append('?');
                    if (folderId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("folderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(folderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (isVirtual != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("isVirtual")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(isVirtual, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServicesSummary>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of service descriptions matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServiceSearchResult>> FindServicesAsync(ServiceSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "FindServices"
                    urlBuilder_.Append("FindServices");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ServiceSearchResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns child entities (contracts, endpoints, operations, etc) related to provided service version.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServiceVersionSubtree> GetServiceVersionSubtreeAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceVersionId == null)
                throw new System.ArgumentNullException("serviceVersionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetServiceVersionSubtree"
                    urlBuilder_.Append("GetServiceVersionSubtree");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceVersionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceVersionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceVersionSubtree>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns hierarchy of objects composing the service version corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServiceVersionDefinition> GetServiceVersionAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceVersionId == null)
                throw new System.ArgumentNullException("serviceVersionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetServiceVersion"
                    urlBuilder_.Append("GetServiceVersion");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceVersionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceVersionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceVersionDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates or updates a service version and all underlying entities from provided hierarchy of definition objects.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateServiceVersionAsync(bool replaceDuplicateActions, BaseAddressCollisionAction baseAddressCollisionAction, ServiceVersionDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (replaceDuplicateActions == null)
                throw new System.ArgumentNullException("replaceDuplicateActions");

            if (baseAddressCollisionAction == null)
                throw new System.ArgumentNullException("baseAddressCollisionAction");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateServiceVersion"
                    urlBuilder_.Append("CreateOrUpdateServiceVersion");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("replaceDuplicateActions")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(replaceDuplicateActions, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("baseAddressCollisionAction")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(baseAddressCollisionAction, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates or updates a service version and all underlying entities from provided hierarchy of definition objects and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServiceVersionDefinition> CreateOrUpdateServiceVersionWithResultAsync(bool replaceDuplicateActions, BaseAddressCollisionAction2 baseAddressCollisionAction, ServiceVersionDefinition body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (replaceDuplicateActions == null)
                throw new System.ArgumentNullException("replaceDuplicateActions");

            if (baseAddressCollisionAction == null)
                throw new System.ArgumentNullException("baseAddressCollisionAction");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateServiceVersionWithResult"
                    urlBuilder_.Append("CreateOrUpdateServiceVersionWithResult");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("replaceDuplicateActions")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(replaceDuplicateActions, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("baseAddressCollisionAction")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(baseAddressCollisionAction, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceVersionDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new service version and all underlying entities by importing service details from provided metadata.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateServiceVersionFromMetadataAsync(int fileId, ErrorTolerance errorTolerance, Serializer5 serializer, bool wrappedParameters, ServiceVersionImportDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (fileId == null)
                throw new System.ArgumentNullException("fileId");

            if (errorTolerance == null)
                throw new System.ArgumentNullException("errorTolerance");

            if (serializer == null)
                throw new System.ArgumentNullException("serializer");

            if (wrappedParameters == null)
                throw new System.ArgumentNullException("wrappedParameters");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateServiceVersionFromMetadata"
                    urlBuilder_.Append("CreateServiceVersionFromMetadata");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("fileId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fileId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("errorTolerance")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(errorTolerance, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serializer")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serializer, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("wrappedParameters")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(wrappedParameters, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new service version and all underlying entities by importing service details from provided metadata. Newly created service version is returned.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServiceVersionDefinition> CreateServiceVersionFromMetadataWithResultAsync(int fileId, ErrorTolerance2 errorTolerance, Serializer6 serializer, bool wrappedParameters, ServiceVersionImportDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (fileId == null)
                throw new System.ArgumentNullException("fileId");

            if (errorTolerance == null)
                throw new System.ArgumentNullException("errorTolerance");

            if (serializer == null)
                throw new System.ArgumentNullException("serializer");

            if (wrappedParameters == null)
                throw new System.ArgumentNullException("wrappedParameters");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateServiceVersionFromMetadataWithResult"
                    urlBuilder_.Append("CreateServiceVersionFromMetadataWithResult");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("fileId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fileId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("errorTolerance")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(errorTolerance, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serializer")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serializer, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("wrappedParameters")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(wrappedParameters, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceVersionDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates an existing physical SOAP service version and all underlying entities from provided metadata. Updated service version is returned.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServiceVersionDefinition> UpdateServiceVersionFromMetadataWithResultAsync(int fileId, ErrorTolerance3 errorTolerance, Serializer7 serializer, bool wrappedParameters, ServiceVersionUpdateDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (fileId == null)
                throw new System.ArgumentNullException("fileId");

            if (errorTolerance == null)
                throw new System.ArgumentNullException("errorTolerance");

            if (serializer == null)
                throw new System.ArgumentNullException("serializer");

            if (wrappedParameters == null)
                throw new System.ArgumentNullException("wrappedParameters");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "UpdateServiceVersionFromMetadataWithResult"
                    urlBuilder_.Append("UpdateServiceVersionFromMetadataWithResult");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("fileId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fileId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("errorTolerance")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(errorTolerance, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serializer")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serializer, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("wrappedParameters")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(wrappedParameters, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceVersionDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new service version and all underlying entities by importing service details from the provided Swagger document.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateServiceVersionFromSwaggerAsync(int fileId, int serviceId, Status2 status, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (fileId == null)
                throw new System.ArgumentNullException("fileId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            if (status == null)
                throw new System.ArgumentNullException("status");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateServiceVersionFromSwagger"
                    urlBuilder_.Append("CreateServiceVersionFromSwagger");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("fileId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fileId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new service version and all underlying entities by importing service details from the provided Swagger document. Newly created service version is returned.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServiceVersionDefinition> CreateServiceVersionFromSwaggerWithResultAsync(int fileId, int serviceId, Status3 status, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (fileId == null)
                throw new System.ArgumentNullException("fileId");

            if (serviceId == null)
                throw new System.ArgumentNullException("serviceId");

            if (status == null)
                throw new System.ArgumentNullException("status");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateServiceVersionFromSwaggerWithResult"
                    urlBuilder_.Append("CreateServiceVersionFromSwaggerWithResult");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("fileId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fileId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceVersionDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates an existing physical RESTful service version and all underlying entities from provided Swagger document. Updated service version is returned.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServiceVersionDefinition> UpdateServiceVersionFromSwaggerWithResultAsync(int fileId, int serviceVersionId, Options options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (fileId == null)
                throw new System.ArgumentNullException("fileId");

            if (serviceVersionId == null)
                throw new System.ArgumentNullException("serviceVersionId");

            if (options == null)
                throw new System.ArgumentNullException("options");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "UpdateServiceVersionFromSwaggerWithResult"
                    urlBuilder_.Append("UpdateServiceVersionFromSwaggerWithResult");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("fileId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fileId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceVersionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceVersionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("options")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(options, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceVersionDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new service version as a copy of existing one under the same service.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CopyServiceVersionAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceVersionId == null)
                throw new System.ArgumentNullException("serviceVersionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CopyServiceVersion"
                    urlBuilder_.Append("CopyServiceVersion");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceVersionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceVersionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new service version as a copy of existing one under the same service and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServiceVersionDefinition> CopyServiceVersionWithResultAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceVersionId == null)
                throw new System.ArgumentNullException("serviceVersionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CopyServiceVersionWithResult"
                    urlBuilder_.Append("CopyServiceVersionWithResult");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceVersionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceVersionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceVersionDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes service version corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteServiceVersionAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceVersionId == null)
                throw new System.ArgumentNullException("serviceVersionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteServiceVersion"
                    urlBuilder_.Append("DeleteServiceVersion");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceVersionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceVersionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of service version descriptions matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServiceVersionSearchResult>> FindServiceVersionsAsync(ServiceVersionSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "FindServiceVersions"
                    urlBuilder_.Append("FindServiceVersions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ServiceVersionSearchResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deserializes and returns a collection of monitoring filters from provided XML string.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MonitoringFilterBase>> DeserializeMonitoringFiltersAsync(object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeserializeMonitoringFilters"
                    urlBuilder_.Append("DeserializeMonitoringFilters");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<MonitoringFilterBase>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Serializes the provided collection of monitoring filters to XML string.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> SerializeMonitoringFiltersAsync(System.Collections.Generic.IEnumerable<MonitoringFilterBase> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "SerializeMonitoringFilters"
                    urlBuilder_.Append("SerializeMonitoringFilters");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// When implemented by a class, virtualizes a service version using the specified &lt;paramref name="request"/&gt;
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ServiceVersionDefinition> CreateServiceVersionFromProfileAsync(VirtualizationRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateServiceVersionFromProfile"
                    urlBuilder_.Append("CreateServiceVersionFromProfile");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ServiceVersionDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns XML schemas with XSD content related to the specified service version.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DataSchema>> GetDataSchemasAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceVersionId == null)
                throw new System.ArgumentNullException("serviceVersionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetDataSchemas"
                    urlBuilder_.Append("GetDataSchemas");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceVersionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceVersionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<DataSchema>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of global XML elements defined in XML schemas attached to the specified service version.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<QualifiedName>> GetDataSchemaElementsAsync(int serviceVersionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceVersionId == null)
                throw new System.ArgumentNullException("serviceVersionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetDataSchemaElements"
                    urlBuilder_.Append("GetDataSchemaElements");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceVersionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceVersionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<QualifiedName>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new, updates existing, or deletes missing XML schemas assigned to a service version.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateOrUpdateDataSchemasAsync(int serviceVersionId, System.Collections.Generic.IEnumerable<DataSchema> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceVersionId == null)
                throw new System.ArgumentNullException("serviceVersionId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateDataSchemas"
                    urlBuilder_.Append("CreateOrUpdateDataSchemas");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceVersionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceVersionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new, updates existing, or deletes missing XML schemas assigned to a service version.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DataSchema>> CreateOrUpdateDataSchemasWithResultAsync(int serviceVersionId, System.Collections.Generic.IEnumerable<DataSchema> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (serviceVersionId == null)
                throw new System.ArgumentNullException("serviceVersionId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateDataSchemasWithResult"
                    urlBuilder_.Append("CreateOrUpdateDataSchemasWithResult");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("serviceVersionId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(serviceVersionId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<DataSchema>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns hierarchy of child objects corresponding to requested operation.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OperationDefinition> GetOperationAsync(int operationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (operationId == null)
                throw new System.ArgumentNullException("operationId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetOperation"
                    urlBuilder_.Append("GetOperation");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("operationId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(operationId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OperationDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the endpoint and hierarchy of all related object corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EndpointDefinition> GetEndpointAsync(int endpointId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (endpointId == null)
                throw new System.ArgumentNullException("endpointId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetEndpoint"
                    urlBuilder_.Append("GetEndpoint");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("endpointId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(endpointId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EndpointDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the endpoint and hierarchy of all related object corresponding to provided unique identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EndpointDefinition> GetEndpointByKeyAsync(System.Guid endpointKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (endpointKey == null)
                throw new System.ArgumentNullException("endpointKey");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetEndpointByKey"
                    urlBuilder_.Append("GetEndpointByKey");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("endpointKey")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(endpointKey, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EndpointDefinition>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of endpoints hosted by the specified node.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EndpointSummary>> GetNodeEndpointsAsync(int nodeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (nodeId == null)
                throw new System.ArgumentNullException("nodeId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetNodeEndpoints"
                    urlBuilder_.Append("GetNodeEndpoints");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("nodeId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(nodeId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EndpointSummary>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of endpoint descriptions matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EndpointSearchResult>> FindEndpointsAsync(EndpointSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "FindEndpoints"
                    urlBuilder_.Append("FindEndpoints");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<EndpointSearchResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing endpoint binding in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateBindingAsync(Binding body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateBinding"
                    urlBuilder_.Append("CreateOrUpdateBinding");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing endpoint binding in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Binding> CreateOrUpdateBindingWithResultAsync(Binding body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateBindingWithResult"
                    urlBuilder_.Append("CreateOrUpdateBindingWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Binding>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns endpoint binding corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Binding> GetBindingAsync(int bindingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (bindingId == null)
                throw new System.ArgumentNullException("bindingId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetBinding"
                    urlBuilder_.Append("GetBinding");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("bindingId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bindingId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Binding>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes endpoint binding corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteBindingAsync(int bindingId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (bindingId == null)
                throw new System.ArgumentNullException("bindingId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteBinding"
                    urlBuilder_.Append("DeleteBinding");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("bindingId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(bindingId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns summary for the public bindings belonging to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BindingsSummary> GetBindingsSummaryAsync(int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetBindingsSummary"
                    urlBuilder_.Append("GetBindingsSummary");
                    urlBuilder_.Append('?');
                    if (folderId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("folderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(folderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BindingsSummary>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of public bindings matching provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BindingSearchResult>> FindBindingsAsync(BindingSearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "FindBindings"
                    urlBuilder_.Append("FindBindings");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<BindingSearchResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing public identity in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateIdentityAsync(IdentityDefinitionBase body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateIdentity"
                    urlBuilder_.Append("CreateOrUpdateIdentity");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing public identity in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IdentityDefinitionBase> CreateOrUpdateIdentityWithResultAsync(IdentityDefinitionBase body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateIdentityWithResult"
                    urlBuilder_.Append("CreateOrUpdateIdentityWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IdentityDefinitionBase>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns public identity corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IdentityDefinitionBase> GetIdentityAsync(int identityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (identityId == null)
                throw new System.ArgumentNullException("identityId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetIdentity"
                    urlBuilder_.Append("GetIdentity");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("identityId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(identityId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IdentityDefinitionBase>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes public identity corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteIdentityAsync(int identityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (identityId == null)
                throw new System.ArgumentNullException("identityId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteIdentity"
                    urlBuilder_.Append("DeleteIdentity");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("identityId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(identityId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns summary for the public identities belonging to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IdentitiesSummary> GetIdentitiesSummaryAsync(int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetIdentitiesSummary"
                    urlBuilder_.Append("GetIdentitiesSummary");
                    urlBuilder_.Append('?');
                    if (folderId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("folderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(folderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IdentitiesSummary>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns collection of public identities matching the provided search query.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentitySearchResult>> FindIdentitiesAsync(IdentitySearchQuery body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "FindIdentities"
                    urlBuilder_.Append("FindIdentities");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<IdentitySearchResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing behavior in the database and returns its database identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> CreateOrUpdateBehaviorAsync(Behavior body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateBehavior"
                    urlBuilder_.Append("CreateOrUpdateBehavior");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates new or updates existing behavior in the database and returns its fully populated instance.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Behavior> CreateOrUpdateBehaviorWithResultAsync(Behavior body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "CreateOrUpdateBehaviorWithResult"
                    urlBuilder_.Append("CreateOrUpdateBehaviorWithResult");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Behavior>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns endpoint or service behavior corresponding to provided identifier.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Behavior> GetBehaviorAsync(int behaviorId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (behaviorId == null)
                throw new System.ArgumentNullException("behaviorId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetBehavior"
                    urlBuilder_.Append("GetBehavior");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("behaviorId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(behaviorId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Behavior>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes endpoint or service behavior corresponding to provided identifier from the database.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteBehaviorAsync(int behaviorId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (behaviorId == null)
                throw new System.ArgumentNullException("behaviorId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "DeleteBehavior"
                    urlBuilder_.Append("DeleteBehavior");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("behaviorId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(behaviorId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns summary for the public behaviors belonging to the specified folder.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="LSL.NSwag.CommonTypes.Client.SwaggerException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BehaviorsSummary> GetBehaviorsSummaryAsync(int? folderId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "GetBehaviorsSummary"
                    urlBuilder_.Append("GetBehaviorsSummary");
                    urlBuilder_.Append('?');
                    if (folderId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("folderId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(folderId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BehaviorsSummary>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new LSL.NSwag.CommonTypes.Client.SwaggerException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new LSL.NSwag.CommonTypes.Client.SwaggerException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new LSL.NSwag.CommonTypes.Client.SwaggerException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new LSL.NSwag.CommonTypes.Client.SwaggerException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Certificate : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("FriendlyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FriendlyName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Expiration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Expiration { get; set; }

        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Data { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceAgreementDefinition : ServiceAgreement
    {
        [Newtonsoft.Json.JsonProperty("TimeZoneOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeZoneOffset { get; set; }

        [Newtonsoft.Json.JsonProperty("Metrics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ServiceAgreementMetric> Metrics { get; set; }

        [Newtonsoft.Json.JsonProperty("Rules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AuthorizationRuleAssignment> Rules { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Property> Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceAgreementMetric
    {
        [Newtonsoft.Json.JsonProperty("ServiceAgreementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceAgreementId { get; set; }

        [Newtonsoft.Json.JsonProperty("Metric", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceAgreementMetricMetric? Metric { get; set; }

        [Newtonsoft.Json.JsonProperty("Min", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Min { get; set; }

        [Newtonsoft.Json.JsonProperty("Max", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Max { get; set; }

        [Newtonsoft.Json.JsonProperty("TimeUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceAgreementMetricTimeUnit? TimeUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("TimeValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TimeValue { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthorizationRuleAssignment : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("RuleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RuleId { get; set; }

        [Newtonsoft.Json.JsonProperty("RuleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuleName { get; set; }

        [Newtonsoft.Json.JsonProperty("GroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("GroupName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupName { get; set; }

        [Newtonsoft.Json.JsonProperty("RuleExpression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AuthorizationExpressionBase RuleExpression { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceId { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceName { get; set; }

        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AuthorizationRuleAssignmentKind? Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceVersionId { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceVersionName { get; set; }

        [Newtonsoft.Json.JsonProperty("VersionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("EndpointId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EndpointId { get; set; }

        [Newtonsoft.Json.JsonProperty("EndpointName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndpointName { get; set; }

        [Newtonsoft.Json.JsonProperty("ContractId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContractId { get; set; }

        [Newtonsoft.Json.JsonProperty("ContractName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractName { get; set; }

        [Newtonsoft.Json.JsonProperty("OperationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OperationId { get; set; }

        [Newtonsoft.Json.JsonProperty("OperationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OperationName { get; set; }

        [Newtonsoft.Json.JsonProperty("Priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }

        [Newtonsoft.Json.JsonProperty("Action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AuthorizationRuleAssignmentAction? Action { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceAgreementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceAgreementId { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceAgreementName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceAgreementName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Property
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("PropertyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertyType? PropertyType { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("FileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FileId { get; set; }

        [Newtonsoft.Json.JsonProperty("FileKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid FileKey { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthorizationExpressionBase
    {
        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceAgreement : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceAgreementStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("StartDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset StartDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EndDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("TimeZoneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeZoneId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceAgreementsSummary
    {
        [Newtonsoft.Json.JsonProperty("DraftServiceAgreements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DraftServiceAgreements { get; set; }

        [Newtonsoft.Json.JsonProperty("ActiveServiceAgreements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActiveServiceAgreements { get; set; }

        [Newtonsoft.Json.JsonProperty("RetiredServiceAgreements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RetiredServiceAgreements { get; set; }

        [Newtonsoft.Json.JsonProperty("EffectiveServiceAgreements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EffectiveServiceAgreements { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("EffectiveServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EffectiveServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("TimeZones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TimeZoneInfo> TimeZones { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimeZoneInfo
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("UtcOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UtcOffset { get; set; }

        [Newtonsoft.Json.JsonProperty("References", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? References { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceAgreementViolationSummary
    {
        [Newtonsoft.Json.JsonProperty("T", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset T { get; set; }

        [Newtonsoft.Json.JsonProperty("C", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? C { get; set; }

        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceAgreementViolationSummaryUnit? Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("Time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Time { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceAgreementViolationSummaryRequest
    {
        [Newtonsoft.Json.JsonProperty("StartDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset StartDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EndDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("Metrics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Metrics { get; set; }

        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

        [Newtonsoft.Json.JsonProperty("TimeZoneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeZoneId { get; set; }

        [Newtonsoft.Json.JsonProperty("TimeUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceAgreementViolationSummaryRequestTimeUnit? TimeUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("TimeResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TimeResolution { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceAgreementViolation
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("MetricId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MetricId { get; set; }

        [Newtonsoft.Json.JsonProperty("MetricType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceAgreementViolationMetricType? MetricType { get; set; }

        [Newtonsoft.Json.JsonProperty("SlaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SlaId { get; set; }

        [Newtonsoft.Json.JsonProperty("SlaName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SlaName { get; set; }

        [Newtonsoft.Json.JsonProperty("Time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Time { get; set; }

        [Newtonsoft.Json.JsonProperty("InitVal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InitVal { get; set; }

        [Newtonsoft.Json.JsonProperty("CurVal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CurVal { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceAgreementViolationsRequest
    {
        [Newtonsoft.Json.JsonProperty("StartDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset StartDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EndDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("Metrics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Metrics { get; set; }

        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

        [Newtonsoft.Json.JsonProperty("TimeZoneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeZoneId { get; set; }

        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceAgreementViolationsRequestSortField? SortField { get; set; }

        [Newtonsoft.Json.JsonProperty("SortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceAgreementViolationsRequestSortOrder? SortOrder { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetricReadingSummary
    {
        [Newtonsoft.Json.JsonProperty("MetricId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MetricId { get; set; }

        [Newtonsoft.Json.JsonProperty("T", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset T { get; set; }

        [Newtonsoft.Json.JsonProperty("Min", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Min { get; set; }

        [Newtonsoft.Json.JsonProperty("Max", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Max { get; set; }

        [Newtonsoft.Json.JsonProperty("Avg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Avg { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetricReading
    {
        [Newtonsoft.Json.JsonProperty("MetricId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MetricId { get; set; }

        [Newtonsoft.Json.JsonProperty("T", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset T { get; set; }

        [Newtonsoft.Json.JsonProperty("V", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? V { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceAgreementSearchResult : SearchResult
    {
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceAgreementSearchResultStatus? Status { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchResult
    {
        [Newtonsoft.Json.JsonProperty("FolderName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FolderName { get; set; }

        [Newtonsoft.Json.JsonProperty("FolderRoute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FolderRoute { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceAgreementSearchQuery : SearchQuery
    {
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceAgreementSearchQueryStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceVersionName { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceVersionId { get; set; }

        [Newtonsoft.Json.JsonProperty("Keywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Keywords { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchQuery
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StaticResponseConfiguration
    {
        [Newtonsoft.Json.JsonProperty("ServiceVersionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceVersionId { get; set; }

        [Newtonsoft.Json.JsonProperty("Operations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> Operations { get; set; }

        [Newtonsoft.Json.JsonProperty("Responses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MessageSample> Responses { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageSample
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("OperationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OperationId { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MessageId { get; set; }

        [Newtonsoft.Json.JsonProperty("RepeatCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RepeatCount { get; set; }

        [Newtonsoft.Json.JsonProperty("Delay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Delay { get; set; }

        [Newtonsoft.Json.JsonProperty("Priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }

        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MessageSampleVersion? Version { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentType { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? StatusCode { get; set; }

        [Newtonsoft.Json.JsonProperty("HttpHeaders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransportHeader> HttpHeaders { get; set; }

        [Newtonsoft.Json.JsonProperty("FileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FileId { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransportHeader
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("VariableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VariableName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class File : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Content { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FileContentType? ContentType { get; set; }

        [Newtonsoft.Json.JsonProperty("FileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        [Newtonsoft.Json.JsonProperty("Expired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Expired { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageContent
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        [Newtonsoft.Json.JsonProperty("FileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FileId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageGenerationSettings
    {
        [Newtonsoft.Json.JsonProperty("EnvelopeVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MessageGenerationSettingsEnvelopeVersion? EnvelopeVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("ArraySize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ArraySize { get; set; }

        [Newtonsoft.Json.JsonProperty("MaximumLevels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumLevels { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageSchema
    {
        [Newtonsoft.Json.JsonProperty("RootElement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmlQualifiedName RootElement { get; set; }

        [Newtonsoft.Json.JsonProperty("Schemas", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<object>> Schemas { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class XmlQualifiedName
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("ns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ns { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessagePipeline
    {
        [Newtonsoft.Json.JsonProperty("InboundRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessagePipelineComponentBase InboundRequest { get; set; }

        [Newtonsoft.Json.JsonProperty("InboundResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessagePipelineComponentBase InboundResponse { get; set; }

        [Newtonsoft.Json.JsonProperty("OutboundRequest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessagePipelineComponentBase OutboundRequest { get; set; }

        [Newtonsoft.Json.JsonProperty("OutboundResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessagePipelineComponentBase OutboundResponse { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessagePipelineComponentBase
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DependencyPackage
    {
        [Newtonsoft.Json.JsonProperty("Dependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Dependency> Dependencies { get; set; }

        [Newtonsoft.Json.JsonProperty("Repository", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FolderSubtree Repository { get; set; }

        [Newtonsoft.Json.JsonProperty("RouterTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Subtree> RouterTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("Products", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Subtree> Products { get; set; }

        [Newtonsoft.Json.JsonProperty("CustomAttributeTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Subtree> CustomAttributeTypes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Dependency
    {
        [Newtonsoft.Json.JsonProperty("PrimaryEntity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocalIdentifier PrimaryEntity { get; set; }

        [Newtonsoft.Json.JsonProperty("ForeignEntity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LocalIdentifier ForeignEntity { get; set; }

        [Newtonsoft.Json.JsonProperty("DependencyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DependencyType? DependencyType { get; set; }

        [Newtonsoft.Json.JsonProperty("ReferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DependencyReferenceType? ReferenceType { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FolderSubtree : Subtree
    {
        [Newtonsoft.Json.JsonProperty("Folders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FolderSubtree> Folders { get; set; }

        [Newtonsoft.Json.JsonProperty("Services", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ServiceSubtree> Services { get; set; }

        [Newtonsoft.Json.JsonProperty("Nodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NodeSubtree> Nodes { get; set; }

        [Newtonsoft.Json.JsonProperty("Bindings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BindingSubtree> Bindings { get; set; }

        [Newtonsoft.Json.JsonProperty("Rules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Subtree> Rules { get; set; }

        [Newtonsoft.Json.JsonProperty("AuthorizationGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Subtree> AuthorizationGroups { get; set; }

        [Newtonsoft.Json.JsonProperty("Users", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Subtree> Users { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceAgreements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Subtree> ServiceAgreements { get; set; }

        [Newtonsoft.Json.JsonProperty("Behaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BehaviorSubtree> Behaviors { get; set; }

        [Newtonsoft.Json.JsonProperty("CustomEntities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Subtree> CustomEntities { get; set; }

        [Newtonsoft.Json.JsonProperty("Identities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdentitySubtree> Identities { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Subtree
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocalIdentifier
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LocalIdentifierEntityType? EntityType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceSubtree : Subtree
    {
        [Newtonsoft.Json.JsonProperty("IsVirtual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVirtual { get; set; }

        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceSubtreeKind? Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ServiceVersionSubtree> ServiceVersions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NodeSubtree
    {
        [Newtonsoft.Json.JsonProperty("NodeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NodeSubtreeNodeType? NodeType { get; set; }

        [Newtonsoft.Json.JsonProperty("BaseAddresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Subtree> BaseAddresses { get; set; }

        [Newtonsoft.Json.JsonProperty("Identities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdentitySubtree> Identities { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BindingSubtree
    {
        [Newtonsoft.Json.JsonProperty("Capabilities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Capabilities { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BehaviorSubtree
    {
        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BehaviorSubtreeKind? Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentitySubtree
    {
        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IdentitySubtreeKind? Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceVersionSubtree : Subtree
    {
        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("VersionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceVersionSubtreeStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceVersionSubtreeKind? Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("Contracts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContractSubtree> Contracts { get; set; }

        [Newtonsoft.Json.JsonProperty("EndpointGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EndpointGroupSubtree> EndpointGroups { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractSubtree
    {
        [Newtonsoft.Json.JsonProperty("Operations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OperationSubtree> Operations { get; set; }

        [Newtonsoft.Json.JsonProperty("Endpoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EndpointSubtree> Endpoints { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EndpointGroupSubtree
    {
        [Newtonsoft.Json.JsonProperty("Endpoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EndpointSubtree> Endpoints { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationSubtree
    {
        [Newtonsoft.Json.JsonProperty("Messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MessageSubtree> Messages { get; set; }

        [Newtonsoft.Json.JsonProperty("ExchangePattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OperationSubtreeExchangePattern? ExchangePattern { get; set; }

        [Newtonsoft.Json.JsonProperty("IsDeprecated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDeprecated { get; set; }

        [Newtonsoft.Json.JsonProperty("IsPublished", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPublished { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EndpointSubtree
    {
        [Newtonsoft.Json.JsonProperty("Identities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdentitySubtree> Identities { get; set; }

        [Newtonsoft.Json.JsonProperty("PhysicalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhysicalAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageSubtree
    {
        [Newtonsoft.Json.JsonProperty("Headers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Subtree> Headers { get; set; }

        [Newtonsoft.Json.JsonProperty("Direction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MessageSubtreeDirection? Direction { get; set; }

        [Newtonsoft.Json.JsonProperty("HttpMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HttpMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Stream : MarshalByRefObject
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarshalByRefObject
    {
        [Newtonsoft.Json.JsonProperty("__identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object __identity { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RepositoryPackageInfo
    {
        [Newtonsoft.Json.JsonProperty("FileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FileId { get; set; }

        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Entities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EntityInfo> Entities { get; set; }

        [Newtonsoft.Json.JsonProperty("UnresolvedKeys", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GlobalIdentifier> UnresolvedKeys { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntityInfo
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityInfoEntityType? EntityType { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GlobalIdentifier
    {
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Requirements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Requirements { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GlobalIdentifierEntityType? EntityType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RepositoryPackageImportParameters
    {
        [Newtonsoft.Json.JsonProperty("FileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FileId { get; set; }

        [Newtonsoft.Json.JsonProperty("ImportedEntities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LocalIdentifier> ImportedEntities { get; set; }

        [Newtonsoft.Json.JsonProperty("Mappings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<KeyMapping> Mappings { get; set; }

        [Newtonsoft.Json.JsonProperty("VerifyOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VerifyOnly { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyMapping
    {
        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public KeyMappingEntityType? EntityType { get; set; }

        [Newtonsoft.Json.JsonProperty("FromKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid FromKey { get; set; }

        [Newtonsoft.Json.JsonProperty("ToKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ToKey { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SystemInfo
    {
        [Newtonsoft.Json.JsonProperty("UserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAuthorizationInfo UserInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("Settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConfigurationSettings Settings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserAuthorizationInfo
    {
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UserId { get; set; }

        [Newtonsoft.Json.JsonProperty("FullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }

        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

        [Newtonsoft.Json.JsonProperty("Permission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserAuthorizationInfoPermission? Permission { get; set; }

        [Newtonsoft.Json.JsonProperty("RepositoryPermissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryPermissions { get; set; }

        [Newtonsoft.Json.JsonProperty("IdentityKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserAuthorizationInfoIdentityKind? IdentityKind { get; set; }

        [Newtonsoft.Json.JsonProperty("ConsumerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ConsumerId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfigurationSettings
    {
        [Newtonsoft.Json.JsonProperty("ReportingTimeZoneId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReportingTimeZoneId { get; set; }

        [Newtonsoft.Json.JsonProperty("ReportingTimeZoneName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReportingTimeZoneName { get; set; }

        [Newtonsoft.Json.JsonProperty("ReportingTimeZoneOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReportingTimeZoneOffset { get; set; }

        [Newtonsoft.Json.JsonProperty("DatabaseVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DatabaseVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("RepositoryVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RepositoryVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("UserClaimType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserClaimType { get; set; }

        [Newtonsoft.Json.JsonProperty("UserClaimIssuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserClaimIssuer { get; set; }

        [Newtonsoft.Json.JsonProperty("IsFullTextEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsFullTextEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("License", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LicenseInfo License { get; set; }

        [Newtonsoft.Json.JsonProperty("SwaggerViewerUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SwaggerViewerUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("DocumentationUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentationUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("DeveloperPortal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PortalSettings DeveloperPortal { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LicenseInfo
    {
        [Newtonsoft.Json.JsonProperty("Expiration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Expiration { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LicenseInfoType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Features", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LicenseInfoFeatures? Features { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalSettings
    {
        [Newtonsoft.Json.JsonProperty("AccessKeyLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AccessKeyLength { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessKeyLifetime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AccessKeyLifetime { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateInfo
    {
        [Newtonsoft.Json.JsonProperty("RawData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] RawData { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("Issuer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Issuer { get; set; }

        [Newtonsoft.Json.JsonProperty("Thumbprint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thumbprint { get; set; }

        [Newtonsoft.Json.JsonProperty("SerialNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SerialNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("PublicData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublicData { get; set; }

        [Newtonsoft.Json.JsonProperty("HasPrivateKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasPrivateKey { get; set; }

        [Newtonsoft.Json.JsonProperty("ValidFrom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ValidFrom { get; set; }

        [Newtonsoft.Json.JsonProperty("ValidTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ValidTo { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CertificateInfoContentType? ContentType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MatchRelativeUriResult
    {
        [Newtonsoft.Json.JsonProperty("IsMatched", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsMatched { get; set; }

        [Newtonsoft.Json.JsonProperty("BoundVariables", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object BoundVariables { get; set; }

        [Newtonsoft.Json.JsonProperty("BoundUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BoundUri { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LiquidTemplateParameters
    {
        [Newtonsoft.Json.JsonProperty("Template", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Template { get; set; }

        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiquidTemplateParametersContentType? ContentType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CodeCompilationParameters
    {
        [Newtonsoft.Json.JsonProperty("References", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string References { get; set; }

        [Newtonsoft.Json.JsonProperty("Imports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Imports { get; set; }

        [Newtonsoft.Json.JsonProperty("Function", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Function { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogOnCredentials
    {
        [Newtonsoft.Json.JsonProperty("UserName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserName { get; set; }

        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductDefinition : Product
    {
        [Newtonsoft.Json.JsonProperty("ServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductServiceVersion> ServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Property> Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("References", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EntityReference> References { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductServiceVersion
    {
        [Newtonsoft.Json.JsonProperty("ServiceVersionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceVersionId { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProductId { get; set; }

        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("VersionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("FriendlyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FriendlyName { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductServiceVersionStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceId { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceName { get; set; }

        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductServiceVersionKind? Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntityReference
    {
        [Newtonsoft.Json.JsonProperty("PrimaryEntityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PrimaryEntityId { get; set; }

        [Newtonsoft.Json.JsonProperty("PrimaryEntityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityReferencePrimaryEntityType? PrimaryEntityType { get; set; }

        [Newtonsoft.Json.JsonProperty("PrimaryEntityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrimaryEntityName { get; set; }

        [Newtonsoft.Json.JsonProperty("ForeignEntityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ForeignEntityId { get; set; }

        [Newtonsoft.Json.JsonProperty("ForeignEntityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityReferenceForeignEntityType? ForeignEntityType { get; set; }

        [Newtonsoft.Json.JsonProperty("ForeignEntityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ForeignEntityName { get; set; }

        [Newtonsoft.Json.JsonProperty("ReferenceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EntityReferenceReferenceType? ReferenceType { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Product : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("IsPrivate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPrivate { get; set; }

        [Newtonsoft.Json.JsonProperty("IsApprovalRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsApprovalRequired { get; set; }

        [Newtonsoft.Json.JsonProperty("IsSubscriptionRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSubscriptionRequired { get; set; }

        [Newtonsoft.Json.JsonProperty("SubscriptionLifetime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubscriptionLifetime { get; set; }

        [Newtonsoft.Json.JsonProperty("LastUpdate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LastUpdate { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersionCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceVersionCount { get; set; }

        [Newtonsoft.Json.JsonProperty("CustomAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object CustomAttributes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductSearchQuery
    {
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductSearchQueryStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("IsPrivate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPrivate { get; set; }

        [Newtonsoft.Json.JsonProperty("IsApprovalRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsApprovalRequired { get; set; }

        [Newtonsoft.Json.JsonProperty("IsSubscriptionRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSubscriptionRequired { get; set; }

        [Newtonsoft.Json.JsonProperty("Keywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Keywords { get; set; }

        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductSearchQuerySortField? SortField { get; set; }

        [Newtonsoft.Json.JsonProperty("SortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProductSearchQuerySortOrder? SortOrder { get; set; }

        [Newtonsoft.Json.JsonProperty("IncludeDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeDescription { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Consumer : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("CustomAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object CustomAttributes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConsumerSearchQuery
    {
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConsumerSearchQuerySortField? SortField { get; set; }

        [Newtonsoft.Json.JsonProperty("SortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConsumerSearchQuerySortOrder? SortOrder { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubscriptionDefinition : Subscription
    {
        [Newtonsoft.Json.JsonProperty("Applications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Application> Applications { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Application : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SubscriptionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubscriptionId { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessKey1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessKey1 { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessKey1Expiration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset AccessKey1Expiration { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessKey2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessKey2 { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessKey2Expiration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset AccessKey2Expiration { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Subscription : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProductId { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("ConsumerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ConsumerId { get; set; }

        [Newtonsoft.Json.JsonProperty("ConsumerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConsumerName { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SubscriptionStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("Expiration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Expiration { get; set; }

        [Newtonsoft.Json.JsonProperty("ApplicationCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ApplicationCount { get; set; }

        [Newtonsoft.Json.JsonProperty("CustomAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object CustomAttributes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubscriptionSearchQuery
    {
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProductId { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("ConsumerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ConsumerId { get; set; }

        [Newtonsoft.Json.JsonProperty("ConsumerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConsumerName { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SubscriptionSearchQueryStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("ExpirationFrom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ExpirationFrom { get; set; }

        [Newtonsoft.Json.JsonProperty("ExpirationTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ExpirationTo { get; set; }

        [Newtonsoft.Json.JsonProperty("CreatedFrom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedFrom { get; set; }

        [Newtonsoft.Json.JsonProperty("CreatedTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedTo { get; set; }

        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SubscriptionSearchQuerySortField? SortField { get; set; }

        [Newtonsoft.Json.JsonProperty("SortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SubscriptionSearchQuerySortOrder? SortOrder { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationSearchQuery
    {
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessKey { get; set; }

        [Newtonsoft.Json.JsonProperty("SubscriptionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubscriptionId { get; set; }

        [Newtonsoft.Json.JsonProperty("SubscriptionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubscriptionName { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProductId { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("ConsumerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ConsumerId { get; set; }

        [Newtonsoft.Json.JsonProperty("ConsumerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConsumerName { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessKeyExpirationFrom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset AccessKeyExpirationFrom { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessKeyExpirationTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset AccessKeyExpirationTo { get; set; }

        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationSearchQuerySortField? SortField { get; set; }

        [Newtonsoft.Json.JsonProperty("SortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationSearchQuerySortOrder? SortOrder { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalSummary
    {
        [Newtonsoft.Json.JsonProperty("Products", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductsSummary Products { get; set; }

        [Newtonsoft.Json.JsonProperty("Consumers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConsumersSummary Consumers { get; set; }

        [Newtonsoft.Json.JsonProperty("Users", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PortalUsersSummary Users { get; set; }

        [Newtonsoft.Json.JsonProperty("Subscriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubscriptionsSummary Subscriptions { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceVersionsSummary ServiceVersions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductsSummary
    {
        [Newtonsoft.Json.JsonProperty("DraftProducts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DraftProducts { get; set; }

        [Newtonsoft.Json.JsonProperty("ActiveProducts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActiveProducts { get; set; }

        [Newtonsoft.Json.JsonProperty("ObsoleteProducts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ObsoleteProducts { get; set; }

        [Newtonsoft.Json.JsonProperty("RetiredProducts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RetiredProducts { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalProducts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalProducts { get; set; }

        [Newtonsoft.Json.JsonProperty("PrivateProducts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PrivateProducts { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductsThatRequireSubscription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProductsThatRequireSubscription { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductsThatRequireApproval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProductsThatRequireApproval { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConsumersSummary
    {
        [Newtonsoft.Json.JsonProperty("TotalConsumers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalConsumers { get; set; }

        [Newtonsoft.Json.JsonProperty("EnabledConsumers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EnabledConsumers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalUsersSummary
    {
        [Newtonsoft.Json.JsonProperty("TotalUsers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalUsers { get; set; }

        [Newtonsoft.Json.JsonProperty("EnabledUsers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EnabledUsers { get; set; }

        [Newtonsoft.Json.JsonProperty("AdministratorUsers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AdministratorUsers { get; set; }

        [Newtonsoft.Json.JsonProperty("ReadWriteUsers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReadWriteUsers { get; set; }

        [Newtonsoft.Json.JsonProperty("ReadOnlyUsers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReadOnlyUsers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubscriptionsSummary
    {
        [Newtonsoft.Json.JsonProperty("RequestedSubscriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RequestedSubscriptions { get; set; }

        [Newtonsoft.Json.JsonProperty("ActivatedSubscriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActivatedSubscriptions { get; set; }

        [Newtonsoft.Json.JsonProperty("DeactivatedSubscriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DeactivatedSubscriptions { get; set; }

        [Newtonsoft.Json.JsonProperty("ExpiredSubscriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExpiredSubscriptions { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalSubscriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalSubscriptions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceVersionsSummary
    {
        [Newtonsoft.Json.JsonProperty("SoapServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SoapServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("HostedServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HostedServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("DraftServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DraftServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("ActiveServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActiveServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("ObsoleteServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ObsoleteServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("RetiredServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RetiredServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalServiceVersions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PolicyDescription
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Namespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Namespace { get; set; }

        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PolicyDescriptionKind? Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("Transport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransportDescriptionBase Transport { get; set; }

        [Newtonsoft.Json.JsonProperty("Soap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SoapDescription Soap { get; set; }

        [Newtonsoft.Json.JsonProperty("PreviousConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousConfiguration { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransportDescriptionBase
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SoapDescription
    {
        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SoapDescriptionVersion? Version { get; set; }

        [Newtonsoft.Json.JsonProperty("SecurityMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SoapDescriptionSecurityMode? SecurityMode { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageSecurity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SoapDescriptionMessageSecurity? MessageSecurity { get; set; }

        [Newtonsoft.Json.JsonProperty("UseContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseContext { get; set; }

        [Newtonsoft.Json.JsonProperty("EstablishSecurityContext", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EstablishSecurityContext { get; set; }

        [Newtonsoft.Json.JsonProperty("ReliableSession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SoapDescriptionReliableSession? ReliableSession { get; set; }

        [Newtonsoft.Json.JsonProperty("UseTransactions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseTransactions { get; set; }

        [Newtonsoft.Json.JsonProperty("UseOasisProtocols", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseOasisProtocols { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SecurityRole : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Permissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Permissions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomAttributeType : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("DisplayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomAttributeTypeEntityType? EntityType { get; set; }

        [Newtonsoft.Json.JsonProperty("DataType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomAttributeTypeDataType? DataType { get; set; }

        [Newtonsoft.Json.JsonProperty("MaxLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxLength { get; set; }

        [Newtonsoft.Json.JsonProperty("IsRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRequired { get; set; }

        [Newtonsoft.Json.JsonProperty("PortalVisibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomAttributeTypePortalVisibility? PortalVisibility { get; set; }

        [Newtonsoft.Json.JsonProperty("Position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Position { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VirtualizationProfile : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VirtualizationProfileServiceKind? ServiceKind { get; set; }

        [Newtonsoft.Json.JsonProperty("IsDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefault { get; set; }

        [Newtonsoft.Json.JsonProperty("Settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VirtualizationSettings Settings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VirtualizationSettings
    {
        [Newtonsoft.Json.JsonProperty("Activate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Activate { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceNamePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceNamePrefix { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceNameSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceNameSuffix { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitoringProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VirtualizationSettingsMonitoringProfile? MonitoringProfile { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageProcessing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessagePipeline MessageProcessing { get; set; }

        [Newtonsoft.Json.JsonProperty("Addresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DefaultNodeAddress> Addresses { get; set; }

        [Newtonsoft.Json.JsonProperty("Rules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DefaultAuthorizationRule> Rules { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersionSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceVersionSettings ServiceVersionSettings { get; set; }

        [Newtonsoft.Json.JsonProperty("BehaviorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BehaviorId { get; set; }

        [Newtonsoft.Json.JsonProperty("BehaviorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BehaviorName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DefaultNodeAddress
    {
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid NodeKey { get; set; }

        [Newtonsoft.Json.JsonProperty("PolicyKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid PolicyKey { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeId { get; set; }

        [Newtonsoft.Json.JsonProperty("PolicyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PolicyId { get; set; }

        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NodeName { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeFolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeFolderId { get; set; }

        [Newtonsoft.Json.JsonProperty("PolicyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyName { get; set; }

        [Newtonsoft.Json.JsonProperty("PolicyFolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PolicyFolderId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DefaultAuthorizationRule
    {
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }

        [Newtonsoft.Json.JsonProperty("Action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DefaultAuthorizationRuleAction? Action { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

        [Newtonsoft.Json.JsonProperty("IsGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsGroup { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceVersionSettings
    {
        [Newtonsoft.Json.JsonProperty("TransitWindows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TransitWindows { get; set; }

        [Newtonsoft.Json.JsonProperty("TransitUserName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TransitUserName { get; set; }

        [Newtonsoft.Json.JsonProperty("UserNameAuth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceVersionSettingsUserNameAuth? UserNameAuth { get; set; }

        [Newtonsoft.Json.JsonProperty("MapX509", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MapX509 { get; set; }

        [Newtonsoft.Json.JsonProperty("MapSaml", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MapSaml { get; set; }

        [Newtonsoft.Json.JsonProperty("AzureDiscovery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AzureDiscovery { get; set; }

        [Newtonsoft.Json.JsonProperty("SyncProcessing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SyncProcessing { get; set; }

        [Newtonsoft.Json.JsonProperty("UseInternalSTS", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseInternalSTS { get; set; }

        [Newtonsoft.Json.JsonProperty("InternalStsSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SecurityTokenServiceSettings InternalStsSettings { get; set; }

        [Newtonsoft.Json.JsonProperty("TransitRequestHeaders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransitRequestHeaders { get; set; }

        [Newtonsoft.Json.JsonProperty("TransitResponseHeaders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransitResponseHeaders { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorsHandling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WebErrorsHandling ErrorsHandling { get; set; }

        [Newtonsoft.Json.JsonProperty("Cors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CorsSettings Cors { get; set; }

        [Newtonsoft.Json.JsonProperty("Diagnostics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DiagnosticSettings Diagnostics { get; set; }

        [Newtonsoft.Json.JsonProperty("RequestMimeTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RequestMimeTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("ResponseMimeTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ResponseMimeTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitoringFilters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MonitoringFilterBase> MonitoringFilters { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SecurityTokenServiceSettings
    {
        [Newtonsoft.Json.JsonProperty("JwtSigningAlgorithm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SecurityTokenServiceSettingsJwtSigningAlgorithm? JwtSigningAlgorithm { get; set; }

        [Newtonsoft.Json.JsonProperty("TokenLifetime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TokenLifetime { get; set; }

        [Newtonsoft.Json.JsonProperty("SigningSecret", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SigningSecret { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WebErrorsHandling
    {
        [Newtonsoft.Json.JsonProperty("AccessDeniedStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AccessDeniedStatusCode { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessDeniedMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessDeniedMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("InvalidRequestStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InvalidRequestStatusCode { get; set; }

        [Newtonsoft.Json.JsonProperty("InvalidRequestMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvalidRequestMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("InternalErrorStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InternalErrorStatusCode { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageContentFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WebErrorsHandlingMessageContentFormat? MessageContentFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("FaultStatusCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FaultStatusCodes { get; set; }

        [Newtonsoft.Json.JsonProperty("FaultExpression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AuthorizationExpressionBase FaultExpression { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorHandlerFullyQualifiedTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorHandlerFullyQualifiedTypeName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CorsSettings
    {
        [Newtonsoft.Json.JsonProperty("AllowedOrigins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AllowedOrigins { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowedMethods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AllowedMethods { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowedHeaders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AllowedHeaders { get; set; }

        [Newtonsoft.Json.JsonProperty("ExposedHeaders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExposedHeaders { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowCredentials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowCredentials { get; set; }

        [Newtonsoft.Json.JsonProperty("PreflightMaxAge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PreflightMaxAge { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DiagnosticSettings
    {
        [Newtonsoft.Json.JsonProperty("AuthorizationTraceEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AuthorizationTraceEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("MessagePipelineTraceEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MessagePipelineTraceEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("OAuthTraceEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OAuthTraceEnabled { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MonitoringFilterBase
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BehaviorSearchResult : SearchResult
    {
        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BehaviorSearchResultKind? Kind { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BehaviorSearchQuery : SearchQuery
    {
        [Newtonsoft.Json.JsonProperty("Configuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Configuration { get; set; }

        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BehaviorSearchQueryKind? Kind { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NodeDefinition : Node
    {
        [Newtonsoft.Json.JsonProperty("IsPopulated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPopulated { get; set; }

        [Newtonsoft.Json.JsonProperty("BaseAddresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NodeAddress> BaseAddresses { get; set; }

        [Newtonsoft.Json.JsonProperty("Identities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdentityDefinitionBase> Identities { get; set; }

        [Newtonsoft.Json.JsonProperty("TrustedIssuers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Issuer> TrustedIssuers { get; set; }

        [Newtonsoft.Json.JsonProperty("Instances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NodeInstance> Instances { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NodeAddress
    {
        [Newtonsoft.Json.JsonProperty("NodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeId { get; set; }

        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NodeAddressKind? Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("Configuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AzureSecurityConfiguration Configuration { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentityDefinitionBase
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IdentityDefinitionBaseKind? Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("FriendlyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FriendlyName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("IsPublic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPublic { get; set; }

        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

        [Newtonsoft.Json.JsonProperty("Expired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Expired { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Issuer
    {
        [Newtonsoft.Json.JsonProperty("FriendlyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FriendlyName { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssuerName { get; set; }

        [Newtonsoft.Json.JsonProperty("Thumbprint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thumbprint { get; set; }

        [Newtonsoft.Json.JsonProperty("Certificate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Certificate { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeId { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NodeInstance
    {
        [Newtonsoft.Json.JsonProperty("NodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeId { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("LastHeartbeat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LastHeartbeat { get; set; }

        [Newtonsoft.Json.JsonProperty("LastReportedStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NodeInstanceLastReportedStatus? LastReportedStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NodeInstanceStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("MachineName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MachineName { get; set; }

        [Newtonsoft.Json.JsonProperty("ClientAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("RuntimeVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuntimeVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("Information", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Information { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NodeSettings
    {
        [Newtonsoft.Json.JsonProperty("ClientAddressHeaderName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientAddressHeaderName { get; set; }

        [Newtonsoft.Json.JsonProperty("ClientAddressOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NodeSettingsClientAddressOptions? ClientAddressOptions { get; set; }

        [Newtonsoft.Json.JsonProperty("ChangeMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NodeSettingsChangeMode? ChangeMode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AzureSecurityConfiguration
    {
        [Newtonsoft.Json.JsonProperty("CredentialType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AzureSecurityConfigurationCredentialType? CredentialType { get; set; }

        [Newtonsoft.Json.JsonProperty("SharedSecret", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AzureSharedSecret SharedSecret { get; set; }

        [Newtonsoft.Json.JsonProperty("SharedAccessSignature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AzureSharedAccessSignature SharedAccessSignature { get; set; }

        [Newtonsoft.Json.JsonProperty("Credential", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AzureNetworkCredential Credential { get; set; }

        [Newtonsoft.Json.JsonProperty("StsUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StsUri { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AzureSharedSecret
    {
        [Newtonsoft.Json.JsonProperty("IssuerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssuerName { get; set; }

        [Newtonsoft.Json.JsonProperty("IssuerSecret", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssuerSecret { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AzureSharedAccessSignature
    {
        [Newtonsoft.Json.JsonProperty("KeyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KeyName { get; set; }

        [Newtonsoft.Json.JsonProperty("SharedAccessKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SharedAccessKey { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AzureNetworkCredential
    {
        [Newtonsoft.Json.JsonProperty("UserName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserName { get; set; }

        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("Domain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Domain { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Node : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NodeType? NodeType { get; set; }

        [Newtonsoft.Json.JsonProperty("HeartbeatInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HeartbeatInterval { get; set; }

        [Newtonsoft.Json.JsonProperty("LastUpdate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LastUpdate { get; set; }

        [Newtonsoft.Json.JsonProperty("Settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NodeSettings Settings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NodesSummary
    {
        [Newtonsoft.Json.JsonProperty("IdleInstances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdleInstances { get; set; }

        [Newtonsoft.Json.JsonProperty("NormalInstances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NormalInstances { get; set; }

        [Newtonsoft.Json.JsonProperty("WarningInstances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WarningInstances { get; set; }

        [Newtonsoft.Json.JsonProperty("ErrorInstances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ErrorInstances { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalNodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalNodes { get; set; }

        [Newtonsoft.Json.JsonProperty("EnabledNodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EnabledNodes { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("HostedServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HostedServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("Schemes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SchemeSummary> Schemes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemeSummary
    {
        [Newtonsoft.Json.JsonProperty("Scheme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scheme { get; set; }

        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SchemeSummaryKind? Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalEndpoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalEndpoints { get; set; }

        [Newtonsoft.Json.JsonProperty("HostedEndpoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HostedEndpoints { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NodeSearchQuery : SearchQuery
    {
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NodeSearchQueryStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("BaseAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseAddress { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RouterType : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("FullyQualifiedTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullyQualifiedTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Configuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Configuration { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExpressionType : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("FullyQualifiedTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullyQualifiedTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("IsSingleCall", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSingleCall { get; set; }

        [Newtonsoft.Json.JsonProperty("Configuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Configuration { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ComponentType : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("FullyQualifiedTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullyQualifiedTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("IsSingleCall", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSingleCall { get; set; }

        [Newtonsoft.Json.JsonProperty("Configuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Configuration { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowedPositions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ComponentTypeAllowedPositions? AllowedPositions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetadataInfo
    {
        [Newtonsoft.Json.JsonProperty("FileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FileId { get; set; }

        [Newtonsoft.Json.JsonProperty("Contracts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContractInfo> Contracts { get; set; }

        [Newtonsoft.Json.JsonProperty("Services", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ServiceInfo> Services { get; set; }

        [Newtonsoft.Json.JsonProperty("Errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorInfo> Errors { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractInfo
    {
        [Newtonsoft.Json.JsonProperty("QName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmlQualifiedName QName { get; set; }

        [Newtonsoft.Json.JsonProperty("Operations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OperationInfo> Operations { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceInfo
    {
        [Newtonsoft.Json.JsonProperty("QName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmlQualifiedName QName { get; set; }

        [Newtonsoft.Json.JsonProperty("Endpoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EndpointInfo> Endpoints { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorInfo
    {
        [Newtonsoft.Json.JsonProperty("IsWarning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsWarning { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationInfo
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("ExchangePattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OperationInfoExchangePattern? ExchangePattern { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EndpointInfo
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        [Newtonsoft.Json.JsonProperty("ContractQName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmlQualifiedName ContractQName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientEndpointConfiguration
    {
        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        [Newtonsoft.Json.JsonProperty("BindingConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BindingConfiguration { get; set; }

        [Newtonsoft.Json.JsonProperty("ClientIdentities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdentityDefinitionBase> ClientIdentities { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RestMetadataInfo
    {
        [Newtonsoft.Json.JsonProperty("FileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FileId { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceName { get; set; }

        [Newtonsoft.Json.JsonProperty("Operations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RestOperationInfo> Operations { get; set; }

        [Newtonsoft.Json.JsonProperty("Endpoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RestEndpointInfo> Endpoints { get; set; }

        [Newtonsoft.Json.JsonProperty("Errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorInfo> Errors { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RestOperationInfo
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("HttpMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HttpMethod { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RestEndpointInfo
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthorizationRuleDefinition : AuthorizationRule
    {
        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Property> Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthorizationRule : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AuthorizationExpressionBase Expression { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthorizationClaimType : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("ClaimType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaimType { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthorizationRulesSummary
    {
        [Newtonsoft.Json.JsonProperty("TotalRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalRules { get; set; }

        [Newtonsoft.Json.JsonProperty("ReferencedRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReferencedRules { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalReferences { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("HostedServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HostedServiceVersions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthorizationRuleSearchResult : SearchResult
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthorizationRuleSearchQuery : SearchQuery
    {
        [Newtonsoft.Json.JsonProperty("Expression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expression { get; set; }

        [Newtonsoft.Json.JsonProperty("Keywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Keywords { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthorizationGroupDefinition : AuthorizationGroup
    {
        [Newtonsoft.Json.JsonProperty("Members", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AuthorizationGroupMember> Members { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Property> Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthorizationGroupMember
    {
        [Newtonsoft.Json.JsonProperty("GroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("MemberRuleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MemberRuleId { get; set; }

        [Newtonsoft.Json.JsonProperty("MemberRuleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MemberRuleName { get; set; }

        [Newtonsoft.Json.JsonProperty("MemberRuleExpression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AuthorizationExpressionBase MemberRuleExpression { get; set; }

        [Newtonsoft.Json.JsonProperty("MemberGroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MemberGroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("MemberGroupName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MemberGroupName { get; set; }

        [Newtonsoft.Json.JsonProperty("Priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthorizationGroup : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthorizationGroupsSummary
    {
        [Newtonsoft.Json.JsonProperty("TotalGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalGroups { get; set; }

        [Newtonsoft.Json.JsonProperty("ReferencedGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReferencedGroups { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalReferences { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("HostedServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HostedServiceVersions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthorizationGroupSearchResult : SearchResult
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthorizationGroupSearchQuery : SearchQuery
    {
        [Newtonsoft.Json.JsonProperty("Keywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Keywords { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomEntityDefinition : CustomEntity
    {
        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Property> Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("References", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EntityReference> References { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomEntity : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

        [Newtonsoft.Json.JsonProperty("FriendlyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FriendlyName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomEntitiesSummary
    {
        [Newtonsoft.Json.JsonProperty("TotalEntities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalEntities { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomEntitySearchQuery : SearchQuery
    {
        [Newtonsoft.Json.JsonProperty("Keywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Keywords { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExtensibilityTypes
    {
        [Newtonsoft.Json.JsonProperty("ExpressionTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExpressionType> ExpressionTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("RouterTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RouterType> RouterTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("ComponentTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ComponentType> ComponentTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertHandlerTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AlertHandlerType> AlertHandlerTypes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlertHandlerType : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("FullyQualifiedTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullyQualifiedTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Configuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Configuration { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MonitoringTransactionSummary
    {
        [Newtonsoft.Json.JsonProperty("Time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Time { get; set; }

        [Newtonsoft.Json.JsonProperty("CntS", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CntS { get; set; }

        [Newtonsoft.Json.JsonProperty("CntF", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CntF { get; set; }

        [Newtonsoft.Json.JsonProperty("CntE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CntE { get; set; }

        [Newtonsoft.Json.JsonProperty("MaxD", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxD { get; set; }

        [Newtonsoft.Json.JsonProperty("MinD", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinD { get; set; }

        [Newtonsoft.Json.JsonProperty("SumD", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? SumD { get; set; }

        [Newtonsoft.Json.JsonProperty("MaxS", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MaxS { get; set; }

        [Newtonsoft.Json.JsonProperty("ReqB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ReqB { get; set; }

        [Newtonsoft.Json.JsonProperty("ResB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ResB { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionSummaryRequest
    {
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransactionSummaryRequestType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Start", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Start { get; set; }

        [Newtonsoft.Json.JsonProperty("End", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset End { get; set; }

        [Newtonsoft.Json.JsonProperty("Res", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Res { get; set; }

        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransactionSummaryRequestUnit? Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeId { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("SvcId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SvcId { get; set; }

        [Newtonsoft.Json.JsonProperty("OpId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OpId { get; set; }

        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

        [Newtonsoft.Json.JsonProperty("IsVirtual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVirtual { get; set; }

        [Newtonsoft.Json.JsonProperty("AppId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AppId { get; set; }

        [Newtonsoft.Json.JsonProperty("SubId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubId { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProductId { get; set; }

        [Newtonsoft.Json.JsonProperty("ConsumerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ConsumerId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MonitoringTransactionHeader
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MonitoringTransactionHeaderType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Time { get; set; }

        [Newtonsoft.Json.JsonProperty("OpName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OpName { get; set; }

        [Newtonsoft.Json.JsonProperty("InEpId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InEpId { get; set; }

        [Newtonsoft.Json.JsonProperty("InEpName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InEpName { get; set; }

        [Newtonsoft.Json.JsonProperty("InEpAdd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InEpAdd { get; set; }

        [Newtonsoft.Json.JsonProperty("InSvcId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InSvcId { get; set; }

        [Newtonsoft.Json.JsonProperty("InSvcNum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InSvcNum { get; set; }

        [Newtonsoft.Json.JsonProperty("InSvcVerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InSvcVerName { get; set; }

        [Newtonsoft.Json.JsonProperty("InSvcName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InSvcName { get; set; }

        [Newtonsoft.Json.JsonProperty("InIp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InIp { get; set; }

        [Newtonsoft.Json.JsonProperty("OutEpId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OutEpId { get; set; }

        [Newtonsoft.Json.JsonProperty("OutEpName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutEpName { get; set; }

        [Newtonsoft.Json.JsonProperty("OutEpAdd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutEpAdd { get; set; }

        [Newtonsoft.Json.JsonProperty("OutSvcId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OutSvcId { get; set; }

        [Newtonsoft.Json.JsonProperty("OutSvcNum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OutSvcNum { get; set; }

        [Newtonsoft.Json.JsonProperty("OutSvcVerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutSvcVerName { get; set; }

        [Newtonsoft.Json.JsonProperty("OutSvcName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutSvcName { get; set; }

        [Newtonsoft.Json.JsonProperty("Duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Duration { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MonitoringTransactionHeaderStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }

        [Newtonsoft.Json.JsonProperty("HttpStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HttpStatusCode { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionHeadersRequest
    {
        [Newtonsoft.Json.JsonProperty("TransactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransactionHeadersRequestTransactionType? TransactionType { get; set; }

        [Newtonsoft.Json.JsonProperty("TransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid TransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EndTime { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeId { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("InboundServiceVersionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InboundServiceVersionId { get; set; }

        [Newtonsoft.Json.JsonProperty("InboundEndpointId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InboundEndpointId { get; set; }

        [Newtonsoft.Json.JsonProperty("OperationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OperationId { get; set; }

        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

        [Newtonsoft.Json.JsonProperty("IsVirtual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVirtual { get; set; }

        [Newtonsoft.Json.JsonProperty("AuthId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AuthId { get; set; }

        [Newtonsoft.Json.JsonProperty("AuthorizationGroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AuthorizationGroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("Action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Action { get; set; }

        [Newtonsoft.Json.JsonProperty("ClientAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("RequestContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestContent { get; set; }

        [Newtonsoft.Json.JsonProperty("ResponseContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponseContent { get; set; }

        [Newtonsoft.Json.JsonProperty("PropertyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertyName { get; set; }

        [Newtonsoft.Json.JsonProperty("PropertyValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertyValue { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransactionHeadersRequestStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("AppId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AppId { get; set; }

        [Newtonsoft.Json.JsonProperty("SubId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubId { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProductId { get; set; }

        [Newtonsoft.Json.JsonProperty("ConsumerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ConsumerId { get; set; }

        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransactionHeadersRequestSortField? SortField { get; set; }

        [Newtonsoft.Json.JsonProperty("SortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransactionHeadersRequestSortOrder? SortOrder { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MonitoringTransactionDetails
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("TransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid TransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("ExchangeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExchangeId { get; set; }

        [Newtonsoft.Json.JsonProperty("TransactionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MonitoringTransactionDetailsTransactionType? TransactionType { get; set; }

        [Newtonsoft.Json.JsonProperty("StartDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset StartDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeId { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NodeName { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeInstanceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NodeInstanceName { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeInstanceMachineName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NodeInstanceMachineName { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeInstanceClientAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NodeInstanceClientAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("RequestAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestAction { get; set; }

        [Newtonsoft.Json.JsonProperty("OperationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OperationId { get; set; }

        [Newtonsoft.Json.JsonProperty("OperationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OperationName { get; set; }

        [Newtonsoft.Json.JsonProperty("ContractId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContractId { get; set; }

        [Newtonsoft.Json.JsonProperty("ContractQName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmlQualifiedName ContractQName { get; set; }

        [Newtonsoft.Json.JsonProperty("InboundEndpointId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InboundEndpointId { get; set; }

        [Newtonsoft.Json.JsonProperty("InboundEndpointName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InboundEndpointName { get; set; }

        [Newtonsoft.Json.JsonProperty("InboundPhysicalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InboundPhysicalAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("InboundLogicalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InboundLogicalAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("InboundServiceVersionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InboundServiceVersionId { get; set; }

        [Newtonsoft.Json.JsonProperty("InboundServiceVersionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InboundServiceVersionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("InboundServiceVersionVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InboundServiceVersionVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("InboundServiceVersionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InboundServiceVersionName { get; set; }

        [Newtonsoft.Json.JsonProperty("InboundServiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InboundServiceId { get; set; }

        [Newtonsoft.Json.JsonProperty("InboundServiceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InboundServiceName { get; set; }

        [Newtonsoft.Json.JsonProperty("OutboundEndpointId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OutboundEndpointId { get; set; }

        [Newtonsoft.Json.JsonProperty("OutboundEndpointName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutboundEndpointName { get; set; }

        [Newtonsoft.Json.JsonProperty("OutboundPhysicalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutboundPhysicalAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("OutboundServiceVersionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OutboundServiceVersionId { get; set; }

        [Newtonsoft.Json.JsonProperty("OutboundServiceVersionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OutboundServiceVersionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("OutboundServiceVersionVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutboundServiceVersionVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("OutboundServiceVersionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutboundServiceVersionName { get; set; }

        [Newtonsoft.Json.JsonProperty("OutboundServiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OutboundServiceId { get; set; }

        [Newtonsoft.Json.JsonProperty("OutboundServiceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutboundServiceName { get; set; }

        [Newtonsoft.Json.JsonProperty("Duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Duration { get; set; }

        [Newtonsoft.Json.JsonProperty("RequestSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? RequestSize { get; set; }

        [Newtonsoft.Json.JsonProperty("ResponseSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ResponseSize { get; set; }

        [Newtonsoft.Json.JsonProperty("IdentityClaims", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityClaims { get; set; }

        [Newtonsoft.Json.JsonProperty("ClientAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("HttpStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HttpStatusCode { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MonitoringTransactionDetailsStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("FaultReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FaultReason { get; set; }

        [Newtonsoft.Json.JsonProperty("FaultDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FaultDetail { get; set; }

        [Newtonsoft.Json.JsonProperty("AuthId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AuthId { get; set; }

        [Newtonsoft.Json.JsonProperty("AuthName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthName { get; set; }

        [Newtonsoft.Json.JsonProperty("IsDenied", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDenied { get; set; }

        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MonitoringTransactionDetailsKind? Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("ApplicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ApplicationId { get; set; }

        [Newtonsoft.Json.JsonProperty("ApplicationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApplicationName { get; set; }

        [Newtonsoft.Json.JsonProperty("SubscriptionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubscriptionId { get; set; }

        [Newtonsoft.Json.JsonProperty("SubscriptionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubscriptionName { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProductId { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("ConsumerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ConsumerId { get; set; }

        [Newtonsoft.Json.JsonProperty("ConsumerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConsumerName { get; set; }

        [Newtonsoft.Json.JsonProperty("Records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MonitoringRecord> Records { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MonitoringTransactionProperty> Properties { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MonitoringRecord
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

        [Newtonsoft.Json.JsonProperty("ExchId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExchId { get; set; }

        [Newtonsoft.Json.JsonProperty("Time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Time { get; set; }

        [Newtonsoft.Json.JsonProperty("Point", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MonitoringRecordPoint? Point { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeId { get; set; }

        [Newtonsoft.Json.JsonProperty("EpId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EpId { get; set; }

        [Newtonsoft.Json.JsonProperty("Fault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fault { get; set; }

        [Newtonsoft.Json.JsonProperty("Size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Size { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("TransportData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransportData { get; set; }

        [Newtonsoft.Json.JsonProperty("IsOutbound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOutbound { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MonitoringTransactionProperty
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("TranId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid TranId { get; set; }

        [Newtonsoft.Json.JsonProperty("ExchId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExchId { get; set; }

        [Newtonsoft.Json.JsonProperty("EpId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EpId { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Time { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MonitoringActivity
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeId { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NodeName { get; set; }

        [Newtonsoft.Json.JsonProperty("InId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? InId { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeInstanceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NodeInstanceName { get; set; }

        [Newtonsoft.Json.JsonProperty("TranId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid TranId { get; set; }

        [Newtonsoft.Json.JsonProperty("ExchId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExchId { get; set; }

        [Newtonsoft.Json.JsonProperty("SvcId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SvcId { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceVersionName { get; set; }

        [Newtonsoft.Json.JsonProperty("EpId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EpId { get; set; }

        [Newtonsoft.Json.JsonProperty("EndpointName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndpointName { get; set; }

        [Newtonsoft.Json.JsonProperty("Time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Time { get; set; }

        [Newtonsoft.Json.JsonProperty("Severity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MonitoringActivitySeverity? Severity { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("Details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MonitoringActivitiesRequest
    {
        [Newtonsoft.Json.JsonProperty("StartDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset StartDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EndDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("TransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid TransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("MinimumSeverity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MonitoringActivitiesRequestMinimumSeverity? MinimumSeverity { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeId { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceVersionId { get; set; }

        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MonitoringActivitiesRequestSortField? SortField { get; set; }

        [Newtonsoft.Json.JsonProperty("SortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MonitoringActivitiesRequestSortOrder? SortOrder { get; set; }

        [Newtonsoft.Json.JsonProperty("ActivityMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActivityMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("IgnoreTransactionActivities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IgnoreTransactionActivities { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MonitoringTransactionTrace
    {
        [Newtonsoft.Json.JsonProperty("AuthorizationTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthorizationTrace { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageProcessingTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageProcessingTrace { get; set; }

        [Newtonsoft.Json.JsonProperty("OAuthTrace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OAuthTrace { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceVersionUsageSummary
    {
        [Newtonsoft.Json.JsonProperty("ServiceVersionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceVersionId { get; set; }

        [Newtonsoft.Json.JsonProperty("FriendlyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FriendlyName { get; set; }

        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("VersionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceName { get; set; }

        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceVersionUsageSummaryKind? Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("IsDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDeleted { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TotalCount { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FailureCount { get; set; }

        [Newtonsoft.Json.JsonProperty("ExceptionCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ExceptionCount { get; set; }

        [Newtonsoft.Json.JsonProperty("AverageDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AverageDuration { get; set; }

        [Newtonsoft.Json.JsonProperty("AverageBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AverageBytes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceVersionUsageSummaryRequest : UsageSummaryRequest
    {
        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsageSummaryRequest
    {
        [Newtonsoft.Json.JsonProperty("ReportType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UsageSummaryRequestReportType? ReportType { get; set; }

        [Newtonsoft.Json.JsonProperty("StartDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset StartDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EndDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceVersionId { get; set; }

        [Newtonsoft.Json.JsonProperty("AuthorizationRuleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AuthorizationRuleId { get; set; }

        [Newtonsoft.Json.JsonProperty("ApplicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ApplicationId { get; set; }

        [Newtonsoft.Json.JsonProperty("SubscriptionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubscriptionId { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProductId { get; set; }

        [Newtonsoft.Json.JsonProperty("ConsumerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ConsumerId { get; set; }

        [Newtonsoft.Json.JsonProperty("TopCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TopCount { get; set; }

        [Newtonsoft.Json.JsonProperty("Options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UsageSummaryRequestOptions? Options { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationUsageSummary
    {
        [Newtonsoft.Json.JsonProperty("OperationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OperationId { get; set; }

        [Newtonsoft.Json.JsonProperty("OperationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OperationName { get; set; }

        [Newtonsoft.Json.JsonProperty("ContractName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractName { get; set; }

        [Newtonsoft.Json.JsonProperty("IsDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDeleted { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TotalCount { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FailureCount { get; set; }

        [Newtonsoft.Json.JsonProperty("ExceptionCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ExceptionCount { get; set; }

        [Newtonsoft.Json.JsonProperty("AverageDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AverageDuration { get; set; }

        [Newtonsoft.Json.JsonProperty("AverageBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AverageBytes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationUsageSummaryRequest : UsageSummaryRequest
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductUsageSummary
    {
        [Newtonsoft.Json.JsonProperty("ProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProductId { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("IsDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDeleted { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TotalCount { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FailureCount { get; set; }

        [Newtonsoft.Json.JsonProperty("ExceptionCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ExceptionCount { get; set; }

        [Newtonsoft.Json.JsonProperty("AverageDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AverageDuration { get; set; }

        [Newtonsoft.Json.JsonProperty("AverageBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AverageBytes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConsumerUsageSummary
    {
        [Newtonsoft.Json.JsonProperty("ConsumerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ConsumerId { get; set; }

        [Newtonsoft.Json.JsonProperty("ConsumerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConsumerName { get; set; }

        [Newtonsoft.Json.JsonProperty("IsDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDeleted { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TotalCount { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FailureCount { get; set; }

        [Newtonsoft.Json.JsonProperty("ExceptionCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ExceptionCount { get; set; }

        [Newtonsoft.Json.JsonProperty("AverageDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AverageDuration { get; set; }

        [Newtonsoft.Json.JsonProperty("AverageBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AverageBytes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubscriptionUsageSummary
    {
        [Newtonsoft.Json.JsonProperty("SubscriptionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SubscriptionId { get; set; }

        [Newtonsoft.Json.JsonProperty("SubscriptionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubscriptionName { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProductId { get; set; }

        [Newtonsoft.Json.JsonProperty("ProductName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        [Newtonsoft.Json.JsonProperty("ConsumerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ConsumerId { get; set; }

        [Newtonsoft.Json.JsonProperty("ConsumerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConsumerName { get; set; }

        [Newtonsoft.Json.JsonProperty("IsDeleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDeleted { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TotalCount { get; set; }

        [Newtonsoft.Json.JsonProperty("FailureCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FailureCount { get; set; }

        [Newtonsoft.Json.JsonProperty("ExceptionCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ExceptionCount { get; set; }

        [Newtonsoft.Json.JsonProperty("AverageDuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AverageDuration { get; set; }

        [Newtonsoft.Json.JsonProperty("AverageBytes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AverageBytes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangeSet
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UserId { get; set; }

        [Newtonsoft.Json.JsonProperty("UserName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("IdentityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangeSetDefinition : ChangeSet
    {
        [Newtonsoft.Json.JsonProperty("Records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChangeRecord> Records { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangeRecord
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("ChangeSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChangeSetId { get; set; }

        [Newtonsoft.Json.JsonProperty("EntityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityName { get; set; }

        [Newtonsoft.Json.JsonProperty("EntityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EntityId { get; set; }

        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChangeRecordEntityType? EntityType { get; set; }

        [Newtonsoft.Json.JsonProperty("MajorEntityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MajorEntityId { get; set; }

        [Newtonsoft.Json.JsonProperty("MajorEntityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChangeRecordMajorEntityType? MajorEntityType { get; set; }

        [Newtonsoft.Json.JsonProperty("MajorEntityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MajorEntityName { get; set; }

        [Newtonsoft.Json.JsonProperty("ChangeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChangeRecordChangeType? ChangeType { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UserId { get; set; }

        [Newtonsoft.Json.JsonProperty("UserName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserName { get; set; }

        [Newtonsoft.Json.JsonProperty("IdentityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangeRecordDefinition : ChangeRecord
    {
        [Newtonsoft.Json.JsonProperty("Fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChangeField> Fields { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangeField
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("ChangeRecordId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChangeRecordId { get; set; }

        [Newtonsoft.Json.JsonProperty("FieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }

        [Newtonsoft.Json.JsonProperty("PreviousValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousValue { get; set; }

        [Newtonsoft.Json.JsonProperty("NewValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewValue { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserSession
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UserId { get; set; }

        [Newtonsoft.Json.JsonProperty("UserFullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserFullName { get; set; }

        [Newtonsoft.Json.JsonProperty("StartDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset StartDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EndDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("Duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Duration { get; set; }

        [Newtonsoft.Json.JsonProperty("IdentityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityName { get; set; }

        [Newtonsoft.Json.JsonProperty("ClientAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientAddress { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserSessionsRequest
    {
        [Newtonsoft.Json.JsonProperty("StartDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset StartDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndDateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EndDateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UserId { get; set; }

        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

        [Newtonsoft.Json.JsonProperty("IdentityName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityName { get; set; }

        [Newtonsoft.Json.JsonProperty("ClientAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserSessionsRequestSortField? SortField { get; set; }

        [Newtonsoft.Json.JsonProperty("SortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserSessionsRequestSortOrder? SortOrder { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserDefinition : User
    {
        [Newtonsoft.Json.JsonProperty("Identities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdentityDefinitionBase> Identities { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

        [Newtonsoft.Json.JsonProperty("ConsumerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ConsumerId { get; set; }

        [Newtonsoft.Json.JsonProperty("ConsumerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConsumerName { get; set; }

        [Newtonsoft.Json.JsonProperty("FullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("SecurityRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SecurityRoleId { get; set; }

        [Newtonsoft.Json.JsonProperty("SecurityRoleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecurityRoleName { get; set; }

        [Newtonsoft.Json.JsonProperty("Permission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserPermission? Permission { get; set; }

        [Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SecurityRoleSummary
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalUsers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalUsers { get; set; }

        [Newtonsoft.Json.JsonProperty("EnabledUsers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EnabledUsers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserSearchResult : SearchResult
    {
        [Newtonsoft.Json.JsonProperty("SecurityRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SecurityRoleId { get; set; }

        [Newtonsoft.Json.JsonProperty("SecurityRoleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecurityRoleName { get; set; }

        [Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserSearchQuery : SearchQuery
    {
        [Newtonsoft.Json.JsonProperty("SecurityRoleId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SecurityRoleId { get; set; }

        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identity { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConsumerUserSearchQuery
    {
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("FullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }

        [Newtonsoft.Json.JsonProperty("ConsumerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ConsumerId { get; set; }

        [Newtonsoft.Json.JsonProperty("ConsumerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConsumerName { get; set; }

        [Newtonsoft.Json.JsonProperty("Permission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConsumerUserSearchQueryPermission? Permission { get; set; }

        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identity { get; set; }

        [Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConsumerUserSearchQuerySortField? SortField { get; set; }

        [Newtonsoft.Json.JsonProperty("SortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConsumerUserSearchQuerySortOrder? SortOrder { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlertSourceType : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlertGroup : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlertType : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("SourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SourceId { get; set; }

        [Newtonsoft.Json.JsonProperty("IntervalUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertTypeIntervalUnit? IntervalUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("Interval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Interval { get; set; }

        [Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("Configuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Configuration { get; set; }

        [Newtonsoft.Json.JsonProperty("HandlersCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HandlersCount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlertTypesRequest
    {
        [Newtonsoft.Json.JsonProperty("ServiceAgreementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceAgreementId { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertSourceTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AlertSourceTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertGroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AlertGroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

        [Newtonsoft.Json.JsonProperty("EntityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EntityId { get; set; }

        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertTypesRequestEntityType? EntityType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlertTypeDefinition : AlertType
    {
        [Newtonsoft.Json.JsonProperty("ServiceAgreements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ServiceAgreementAlertType> ServiceAgreements { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertHandlers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AlertHandler> AlertHandlers { get; set; }

        [Newtonsoft.Json.JsonProperty("ChangeEntities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChangeEntityAlertType> ChangeEntities { get; set; }

        [Newtonsoft.Json.JsonProperty("ChangeFolders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChangeFolderAlertType> ChangeFolders { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceAgreementAlertType
    {
        [Newtonsoft.Json.JsonProperty("AlertTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AlertTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertSubtype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlertSubtype { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceAgreementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceAgreementId { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceAgreementMetricId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceAgreementMetricId { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlertHandler
    {
        [Newtonsoft.Json.JsonProperty("AlertGroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AlertGroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AlertTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertSubtype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlertSubtype { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertHandlerTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AlertHandlerTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("Configuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Configuration { get; set; }

        [Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("IntervalUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertHandlerIntervalUnit? IntervalUnit { get; set; }

        [Newtonsoft.Json.JsonProperty("Interval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Interval { get; set; }

        [Newtonsoft.Json.JsonProperty("LastExecutionTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LastExecutionTime { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangeEntityAlertType
    {
        [Newtonsoft.Json.JsonProperty("AlertTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AlertTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("EntityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EntityId { get; set; }

        [Newtonsoft.Json.JsonProperty("EntityType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChangeEntityAlertTypeEntityType? EntityType { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangeFolderAlertType
    {
        [Newtonsoft.Json.JsonProperty("AlertTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AlertTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

        [Newtonsoft.Json.JsonProperty("EntityTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<EntityTypes> EntityTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("ChangeTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChangeFolderAlertTypeChangeTypes? ChangeTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlertGroupDefinition : AlertGroup
    {
        [Newtonsoft.Json.JsonProperty("AlertTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AlertType> AlertTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertHandlers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AlertHandler> AlertHandlers { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlertSummary
    {
        [Newtonsoft.Json.JsonProperty("Time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Time { get; set; }

        [Newtonsoft.Json.JsonProperty("Total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total { get; set; }

        [Newtonsoft.Json.JsonProperty("Observed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Observed { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlertSummaryRequest
    {
        [Newtonsoft.Json.JsonProperty("Start", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Start { get; set; }

        [Newtonsoft.Json.JsonProperty("End", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset End { get; set; }

        [Newtonsoft.Json.JsonProperty("Res", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Res { get; set; }

        [Newtonsoft.Json.JsonProperty("Unit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertSummaryRequestUnit? Unit { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AlertTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertSourceTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AlertSourceTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertGroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AlertGroupId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Alert : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("Time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Time { get; set; }

        [Newtonsoft.Json.JsonProperty("TypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("Subtype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subtype { get; set; }

        [Newtonsoft.Json.JsonProperty("Text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DataProperty> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("Observed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Observed { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlertTypeName { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertSourceTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AlertSourceTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertSourceTypeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlertSourceTypeName { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataProperty
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlertRequest
    {
        [Newtonsoft.Json.JsonProperty("StartTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("EndTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EndTime { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AlertTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertSourceTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AlertSourceTypeId { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("AlertGroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AlertGroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("IsObserved", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsObserved { get; set; }

        [Newtonsoft.Json.JsonProperty("SortField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertRequestSortField? SortField { get; set; }

        [Newtonsoft.Json.JsonProperty("SortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertRequestSortOrder? SortOrder { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PortalNotificationConfiguration
    {
        [Newtonsoft.Json.JsonProperty("EnabledAlertHandlers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Guid> EnabledAlertHandlers { get; set; }

        [Newtonsoft.Json.JsonProperty("ToAddresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToAddresses { get; set; }

        [Newtonsoft.Json.JsonProperty("SecurityRoles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> SecurityRoles { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Folder : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FolderSummary
    {
        [Newtonsoft.Json.JsonProperty("Folder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Folder Folder { get; set; }

        [Newtonsoft.Json.JsonProperty("Rules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AuthorizationRulesSummary Rules { get; set; }

        [Newtonsoft.Json.JsonProperty("AuthorizationGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AuthorizationGroupsSummary AuthorizationGroups { get; set; }

        [Newtonsoft.Json.JsonProperty("Bindings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BindingsSummary Bindings { get; set; }

        [Newtonsoft.Json.JsonProperty("Behaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BehaviorsSummary Behaviors { get; set; }

        [Newtonsoft.Json.JsonProperty("Nodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NodesSummary Nodes { get; set; }

        [Newtonsoft.Json.JsonProperty("Services", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServicesSummary Services { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceAgreements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceAgreementsSummary ServiceAgreements { get; set; }

        [Newtonsoft.Json.JsonProperty("Users", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecurityRoleSummary> Users { get; set; }

        [Newtonsoft.Json.JsonProperty("CustomEntities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomEntitiesSummary CustomEntities { get; set; }

        [Newtonsoft.Json.JsonProperty("Identities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdentitiesSummary Identities { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BindingsSummary
    {
        [Newtonsoft.Json.JsonProperty("TotalBindings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalBindings { get; set; }

        [Newtonsoft.Json.JsonProperty("ReferencedBindings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReferencedBindings { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalReferences { get; set; }

        [Newtonsoft.Json.JsonProperty("HostedReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HostedReferences { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("HostedServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HostedServiceVersions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BehaviorsSummary
    {
        [Newtonsoft.Json.JsonProperty("TotalBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalBehaviors { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceBehaviors { get; set; }

        [Newtonsoft.Json.JsonProperty("ReferencedBehaviors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReferencedBehaviors { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalReferences { get; set; }

        [Newtonsoft.Json.JsonProperty("HostedReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HostedReferences { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("HostedServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HostedServiceVersions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServicesSummary
    {
        [Newtonsoft.Json.JsonProperty("TotalServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalServices { get; set; }

        [Newtonsoft.Json.JsonProperty("VirtualServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VirtualServices { get; set; }

        [Newtonsoft.Json.JsonProperty("SoapServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SoapServices { get; set; }

        [Newtonsoft.Json.JsonProperty("DraftServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DraftServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("ActiveServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ActiveServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("ObsoleteServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ObsoleteServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("RetiredServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RetiredServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("VirtualServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VirtualServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersionsThatRequireAccessKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceVersionsThatRequireAccessKey { get; set; }

        [Newtonsoft.Json.JsonProperty("SoapServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SoapServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("VirtualizedServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VirtualizedServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("HostedServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HostedServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalNodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalNodes { get; set; }

        [Newtonsoft.Json.JsonProperty("HostingNodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HostingNodes { get; set; }

        [Newtonsoft.Json.JsonProperty("Schemes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SchemeSummary> Schemes { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentitiesSummary
    {
        [Newtonsoft.Json.JsonProperty("TotalIdentities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalIdentities { get; set; }

        [Newtonsoft.Json.JsonProperty("ReferencedIdentities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReferencedIdentities { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalReferences { get; set; }

        [Newtonsoft.Json.JsonProperty("HostedReferences", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HostedReferences { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("HostedServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HostedServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("IdentityKinds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdentityKindSummary> IdentityKinds { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentityKindSummary
    {
        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IdentityKindSummaryKind? Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalIdentities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalIdentities { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceDefinition : Service
    {
        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Property> Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ServiceVersionSummary> ServiceVersions { get; set; }

        [Newtonsoft.Json.JsonProperty("References", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EntityReference> References { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceVersionSummary
    {
        [Newtonsoft.Json.JsonProperty("ServiceVersionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceVersionId { get; set; }

        [Newtonsoft.Json.JsonProperty("FriendlyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FriendlyName { get; set; }

        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("VersionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceVersionSummaryStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("LastUpdate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LastUpdate { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalOperations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalOperations { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalContracts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalContracts { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalEndpoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalEndpoints { get; set; }

        [Newtonsoft.Json.JsonProperty("HostedEndpoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HostedEndpoints { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalNodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalNodes { get; set; }

        [Newtonsoft.Json.JsonProperty("HostingNodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HostingNodes { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalVirtualizations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalVirtualizations { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Service : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("IsVirtual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVirtual { get; set; }

        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceKind? Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceSearchResult : SearchResult
    {
        [Newtonsoft.Json.JsonProperty("IsVirtual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVirtual { get; set; }

        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceSearchResultKind? Kind { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceSearchQuery : SearchQuery
    {
        [Newtonsoft.Json.JsonProperty("IsVirtual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVirtual { get; set; }

        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceSearchQueryKind? Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("Keywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Keywords { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceVersionDefinition : ServiceVersion
    {
        [Newtonsoft.Json.JsonProperty("IsPopulated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPopulated { get; set; }

        [Newtonsoft.Json.JsonProperty("Behavior", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Behavior Behavior { get; set; }

        [Newtonsoft.Json.JsonProperty("Contracts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContractDefinition> Contracts { get; set; }

        [Newtonsoft.Json.JsonProperty("EndpointGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EndpointGroupDefinition> EndpointGroups { get; set; }

        [Newtonsoft.Json.JsonProperty("Nodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NodeDefinition> Nodes { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Property> Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("References", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EntityReference> References { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Behavior : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

        [Newtonsoft.Json.JsonProperty("FriendlyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FriendlyName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("IsPrivate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPrivate { get; set; }

        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BehaviorKind? Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("Configuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Configuration { get; set; }

        [Newtonsoft.Json.JsonProperty("Xml", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<object>> Xml { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractDefinition
    {
        [Newtonsoft.Json.JsonProperty("IsPopulated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPopulated { get; set; }

        [Newtonsoft.Json.JsonProperty("Operations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OperationDefinition> Operations { get; set; }

        [Newtonsoft.Json.JsonProperty("Endpoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EndpointDefinition> Endpoints { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceVersionId { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Namespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Namespace { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("IsPublished", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPublished { get; set; }

        [Newtonsoft.Json.JsonProperty("ProtectionLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractDefinitionProtectionLevel? ProtectionLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("SessionMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractDefinitionSessionMode? SessionMode { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EndpointGroupDefinition
    {
        [Newtonsoft.Json.JsonProperty("IsPopulated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPopulated { get; set; }

        [Newtonsoft.Json.JsonProperty("Endpoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EndpointDefinition> Endpoints { get; set; }

        [Newtonsoft.Json.JsonProperty("Router", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RouterType Router { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceVersionId { get; set; }

        [Newtonsoft.Json.JsonProperty("ContractId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContractId { get; set; }

        [Newtonsoft.Json.JsonProperty("RouterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RouterId { get; set; }

        [Newtonsoft.Json.JsonProperty("RouterConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RouterConfiguration { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationDefinition : Operation
    {
        [Newtonsoft.Json.JsonProperty("IsPopulated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPopulated { get; set; }

        [Newtonsoft.Json.JsonProperty("Messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MessageDefinition> Messages { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Property> Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OperationDefinitionKind? Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EndpointDefinition : Endpoint
    {
        [Newtonsoft.Json.JsonProperty("IsPopulated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPopulated { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NodeName { get; set; }

        [Newtonsoft.Json.JsonProperty("Binding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Binding Binding { get; set; }

        [Newtonsoft.Json.JsonProperty("Behavior", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Behavior Behavior { get; set; }

        [Newtonsoft.Json.JsonProperty("Identities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdentityDefinitionBase> Identities { get; set; }

        [Newtonsoft.Json.JsonProperty("DownstreamEndpointIdentities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdentityDefinitionBase> DownstreamEndpointIdentities { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Property> Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageDefinition
    {
        [Newtonsoft.Json.JsonProperty("IsPopulated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPopulated { get; set; }

        [Newtonsoft.Json.JsonProperty("Headers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MessageHeaderDefinition> Headers { get; set; }

        [Newtonsoft.Json.JsonProperty("OperationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OperationId { get; set; }

        [Newtonsoft.Json.JsonProperty("Direction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MessageDefinitionDirection? Direction { get; set; }

        [Newtonsoft.Json.JsonProperty("Action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Action { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Namespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Namespace { get; set; }

        [Newtonsoft.Json.JsonProperty("Settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessageSettings Settings { get; set; }

        [Newtonsoft.Json.JsonProperty("BodyProtectionLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MessageDefinitionBodyProtectionLevel? BodyProtectionLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("DownstreamMessageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DownstreamMessageId { get; set; }

        [Newtonsoft.Json.JsonProperty("TemplateFileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TemplateFileId { get; set; }

        [Newtonsoft.Json.JsonProperty("TemplateMessageVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MessageDefinitionTemplateMessageVersion? TemplateMessageVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Binding : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("FolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FolderId { get; set; }

        [Newtonsoft.Json.JsonProperty("FriendlyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FriendlyName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Namespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Namespace { get; set; }

        [Newtonsoft.Json.JsonProperty("IsPrivate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPrivate { get; set; }

        [Newtonsoft.Json.JsonProperty("Configuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Configuration { get; set; }

        [Newtonsoft.Json.JsonProperty("Capabilities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Capabilities { get; set; }

        [Newtonsoft.Json.JsonProperty("Xml", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<object>> Xml { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageHeaderDefinition
    {
        [Newtonsoft.Json.JsonProperty("IsPopulated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPopulated { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MessageId { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Namespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Namespace { get; set; }

        [Newtonsoft.Json.JsonProperty("ProtectionLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MessageHeaderDefinitionProtectionLevel? ProtectionLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("DownstreamHeaderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DownstreamHeaderId { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("Updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageSettings
    {
        [Newtonsoft.Json.JsonProperty("HttpMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HttpMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("UriTemplate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UriTemplate { get; set; }

        [Newtonsoft.Json.JsonProperty("PreserveTrailingSlash", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreserveTrailingSlash { get; set; }

        [Newtonsoft.Json.JsonProperty("UnknownQueryParameterAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MessageSettingsUnknownQueryParameterAction? UnknownQueryParameterAction { get; set; }

        [Newtonsoft.Json.JsonProperty("Parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MessageParameter> Parameters { get; set; }

        [Newtonsoft.Json.JsonProperty("RequestMimeTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RequestMimeTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("ResponseMimeTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ResponseMimeTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("Responses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ResponseMessage> Responses { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MessageParameter
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("VariableName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VariableName { get; set; }

        [Newtonsoft.Json.JsonProperty("Location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MessageParameterLocation? Location { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("DataType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MessageParameterDataType? DataType { get; set; }

        [Newtonsoft.Json.JsonProperty("ArrayFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MessageParameterArrayFormat? ArrayFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("ArrayItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Parameter ArrayItem { get; set; }

        [Newtonsoft.Json.JsonProperty("DataFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DataFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("Schema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema { get; set; }

        [Newtonsoft.Json.JsonProperty("IsRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRequired { get; set; }

        [Newtonsoft.Json.JsonProperty("IsEmptyValueAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEmptyValueAllowed { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("Values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Values { get; set; }

        [Newtonsoft.Json.JsonProperty("MaximumValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaximumValue { get; set; }

        [Newtonsoft.Json.JsonProperty("IsExclusiveMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsExclusiveMaximum { get; set; }

        [Newtonsoft.Json.JsonProperty("MinimumValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinimumValue { get; set; }

        [Newtonsoft.Json.JsonProperty("IsExclusiveMinimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsExclusiveMinimum { get; set; }

        [Newtonsoft.Json.JsonProperty("MaximumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumLength { get; set; }

        [Newtonsoft.Json.JsonProperty("MinimumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumLength { get; set; }

        [Newtonsoft.Json.JsonProperty("Pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }

        [Newtonsoft.Json.JsonProperty("ArrayMaximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ArrayMaximumItems { get; set; }

        [Newtonsoft.Json.JsonProperty("ArrayMinimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ArrayMinimumItems { get; set; }

        [Newtonsoft.Json.JsonProperty("IsArrayUnique", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsArrayUnique { get; set; }

        [Newtonsoft.Json.JsonProperty("MultipleOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MultipleOf { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponseMessage
    {
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusCode { get; set; }

        [Newtonsoft.Json.JsonProperty("Schema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Headers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ResponseMessageHeader> Headers { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Parameter
    {
        [Newtonsoft.Json.JsonProperty("DataType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParameterDataType? DataType { get; set; }

        [Newtonsoft.Json.JsonProperty("ArrayFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParameterArrayFormat? ArrayFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("ArrayItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Parameter ArrayItem { get; set; }

        [Newtonsoft.Json.JsonProperty("DataFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DataFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("Schema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema { get; set; }

        [Newtonsoft.Json.JsonProperty("IsRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRequired { get; set; }

        [Newtonsoft.Json.JsonProperty("IsEmptyValueAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEmptyValueAllowed { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("Values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Values { get; set; }

        [Newtonsoft.Json.JsonProperty("MaximumValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaximumValue { get; set; }

        [Newtonsoft.Json.JsonProperty("IsExclusiveMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsExclusiveMaximum { get; set; }

        [Newtonsoft.Json.JsonProperty("MinimumValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinimumValue { get; set; }

        [Newtonsoft.Json.JsonProperty("IsExclusiveMinimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsExclusiveMinimum { get; set; }

        [Newtonsoft.Json.JsonProperty("MaximumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumLength { get; set; }

        [Newtonsoft.Json.JsonProperty("MinimumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumLength { get; set; }

        [Newtonsoft.Json.JsonProperty("Pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }

        [Newtonsoft.Json.JsonProperty("ArrayMaximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ArrayMaximumItems { get; set; }

        [Newtonsoft.Json.JsonProperty("ArrayMinimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ArrayMinimumItems { get; set; }

        [Newtonsoft.Json.JsonProperty("IsArrayUnique", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsArrayUnique { get; set; }

        [Newtonsoft.Json.JsonProperty("MultipleOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MultipleOf { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponseMessageHeader
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("DataType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResponseMessageHeaderDataType? DataType { get; set; }

        [Newtonsoft.Json.JsonProperty("ArrayFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResponseMessageHeaderArrayFormat? ArrayFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("ArrayItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Parameter ArrayItem { get; set; }

        [Newtonsoft.Json.JsonProperty("DataFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DataFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("Schema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema { get; set; }

        [Newtonsoft.Json.JsonProperty("IsRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRequired { get; set; }

        [Newtonsoft.Json.JsonProperty("IsEmptyValueAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEmptyValueAllowed { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("Values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Values { get; set; }

        [Newtonsoft.Json.JsonProperty("MaximumValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaximumValue { get; set; }

        [Newtonsoft.Json.JsonProperty("IsExclusiveMaximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsExclusiveMaximum { get; set; }

        [Newtonsoft.Json.JsonProperty("MinimumValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinimumValue { get; set; }

        [Newtonsoft.Json.JsonProperty("IsExclusiveMinimum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsExclusiveMinimum { get; set; }

        [Newtonsoft.Json.JsonProperty("MaximumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaximumLength { get; set; }

        [Newtonsoft.Json.JsonProperty("MinimumLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinimumLength { get; set; }

        [Newtonsoft.Json.JsonProperty("Pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }

        [Newtonsoft.Json.JsonProperty("ArrayMaximumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ArrayMaximumItems { get; set; }

        [Newtonsoft.Json.JsonProperty("ArrayMinimumItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ArrayMinimumItems { get; set; }

        [Newtonsoft.Json.JsonProperty("IsArrayUnique", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsArrayUnique { get; set; }

        [Newtonsoft.Json.JsonProperty("MultipleOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MultipleOf { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceVersion : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("ServiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceId { get; set; }

        [Newtonsoft.Json.JsonProperty("Version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("VersionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("FriendlyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FriendlyName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Namespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Namespace { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceVersionStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("LastUpdate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LastUpdate { get; set; }

        [Newtonsoft.Json.JsonProperty("BaseAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("BehaviorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BehaviorId { get; set; }

        [Newtonsoft.Json.JsonProperty("Settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServiceVersionSettings Settings { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageProcessing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessagePipeline MessageProcessing { get; set; }

        [Newtonsoft.Json.JsonProperty("IsSchemaFirst", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSchemaFirst { get; set; }

        [Newtonsoft.Json.JsonProperty("IsAccessKeyRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsAccessKeyRequired { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceVersionImportDetails
    {
        [Newtonsoft.Json.JsonProperty("ServiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceId { get; set; }

        [Newtonsoft.Json.JsonProperty("QName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmlQualifiedName QName { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceVersionImportDetailsStatus? Status { get; set; }

        [Newtonsoft.Json.JsonProperty("Endpoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Endpoints { get; set; }

        [Newtonsoft.Json.JsonProperty("Contracts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<XmlQualifiedName> Contracts { get; set; }

        [Newtonsoft.Json.JsonProperty("IsSchemaFirst", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSchemaFirst { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceVersionUpdateDetails
    {
        [Newtonsoft.Json.JsonProperty("ServiceVersionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceVersionId { get; set; }

        [Newtonsoft.Json.JsonProperty("QName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmlQualifiedName QName { get; set; }

        [Newtonsoft.Json.JsonProperty("Endpoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Endpoints { get; set; }

        [Newtonsoft.Json.JsonProperty("Contracts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<XmlQualifiedName> Contracts { get; set; }

        [Newtonsoft.Json.JsonProperty("Options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceVersionUpdateDetailsOptions? Options { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceVersionSearchResult : SearchResult
    {
        [Newtonsoft.Json.JsonProperty("ServiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceId { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceName { get; set; }

        [Newtonsoft.Json.JsonProperty("IsVirtual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVirtual { get; set; }

        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceVersionSearchResultKind? Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("VersionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceVersionSearchResultStatus? Status { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceVersionSearchQuery : SearchQuery
    {
        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceVersionSearchQueryKind? Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("Keywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Keywords { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceName { get; set; }

        [Newtonsoft.Json.JsonProperty("IsVirtual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVirtual { get; set; }

        [Newtonsoft.Json.JsonProperty("VersionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ServiceVersionSearchQueryStatus? Status { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VirtualizationRequest
    {
        [Newtonsoft.Json.JsonProperty("ServiceVersionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceVersionId { get; set; }

        [Newtonsoft.Json.JsonProperty("Profile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VirtualizationProfile Profile { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataSchema : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("SchemaType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DataSchemaSchemaType? SchemaType { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceVersionId { get; set; }

        [Newtonsoft.Json.JsonProperty("Namespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Namespace { get; set; }

        [Newtonsoft.Json.JsonProperty("Json", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Json { get; set; }

        [Newtonsoft.Json.JsonProperty("Xsd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<object>> Xsd { get; set; }

        [Newtonsoft.Json.JsonProperty("IsPopulated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPopulated { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QualifiedName
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Namespace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Namespace { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Operation : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("ContractId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContractId { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("ExchangePattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OperationExchangePattern? ExchangePattern { get; set; }

        [Newtonsoft.Json.JsonProperty("ProtectionLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OperationProtectionLevel? ProtectionLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("IsPublished", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPublished { get; set; }

        [Newtonsoft.Json.JsonProperty("IsDeprecated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDeprecated { get; set; }

        [Newtonsoft.Json.JsonProperty("IsStatic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsStatic { get; set; }

        [Newtonsoft.Json.JsonProperty("IsSessionTerminating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSessionTerminating { get; set; }

        [Newtonsoft.Json.JsonProperty("IsSessionInitiating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSessionInitiating { get; set; }

        [Newtonsoft.Json.JsonProperty("TransactionFlow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OperationTransactionFlow? TransactionFlow { get; set; }

        [Newtonsoft.Json.JsonProperty("DownstreamOperationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DownstreamOperationId { get; set; }

        [Newtonsoft.Json.JsonProperty("DownstreamContractId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DownstreamContractId { get; set; }

        [Newtonsoft.Json.JsonProperty("MessageProcessing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MessagePipeline MessageProcessing { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Endpoint : DomainObjectBase
    {
        [Newtonsoft.Json.JsonProperty("ContractId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ContractId { get; set; }

        [Newtonsoft.Json.JsonProperty("BindingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BindingId { get; set; }

        [Newtonsoft.Json.JsonProperty("BehaviorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BehaviorId { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("LogicalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogicalAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("PhysicalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhysicalAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeId { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeAddressId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NodeAddressId { get; set; }

        [Newtonsoft.Json.JsonProperty("DownstreamEndpointId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DownstreamEndpointId { get; set; }

        [Newtonsoft.Json.JsonProperty("EndpointGroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EndpointGroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("IsPublished", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPublished { get; set; }

        [Newtonsoft.Json.JsonProperty("IsOutbound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsOutbound { get; set; }

        [Newtonsoft.Json.JsonProperty("IsSync", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSync { get; set; }

        [Newtonsoft.Json.JsonProperty("MonType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EndpointMonType? MonType { get; set; }

        [Newtonsoft.Json.JsonProperty("RecPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EndpointRecPoints? RecPoints { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EndpointSummary
    {
        [Newtonsoft.Json.JsonProperty("EndpointId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EndpointId { get; set; }

        [Newtonsoft.Json.JsonProperty("EndpointName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndpointName { get; set; }

        [Newtonsoft.Json.JsonProperty("PhysicalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhysicalAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceId { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceName { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceVersionId { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ServiceVersionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersionVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceVersionVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceVersionName { get; set; }

        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EndpointSummaryKind? Kind { get; set; }

        [Newtonsoft.Json.JsonProperty("BindingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BindingId { get; set; }

        [Newtonsoft.Json.JsonProperty("BindingName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BindingName { get; set; }

        [Newtonsoft.Json.JsonProperty("AddressKind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EndpointSummaryAddressKind? AddressKind { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EndpointSearchResult : EndpointSearchBase
    {
        [Newtonsoft.Json.JsonProperty("EndpointId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EndpointId { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersionLastUpdate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ServiceVersionLastUpdate { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EndpointSearchBase
    {
        [Newtonsoft.Json.JsonProperty("ServiceKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ServiceKey { get; set; }

        [Newtonsoft.Json.JsonProperty("ServicePathAndName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServicePathAndName { get; set; }

        [Newtonsoft.Json.JsonProperty("IsVirtual", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsVirtual { get; set; }

        [Newtonsoft.Json.JsonProperty("VersionNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? VersionNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersionStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EndpointSearchBaseServiceVersionStatus? ServiceVersionStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersionQName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmlQualifiedName ServiceVersionQName { get; set; }

        [Newtonsoft.Json.JsonProperty("ServiceVersionKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ServiceVersionKey { get; set; }

        [Newtonsoft.Json.JsonProperty("ContractKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ContractKey { get; set; }

        [Newtonsoft.Json.JsonProperty("ContractQName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XmlQualifiedName ContractQName { get; set; }

        [Newtonsoft.Json.JsonProperty("NodeKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid NodeKey { get; set; }

        [Newtonsoft.Json.JsonProperty("NodePathAndName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NodePathAndName { get; set; }

        [Newtonsoft.Json.JsonProperty("EndpointKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid EndpointKey { get; set; }

        [Newtonsoft.Json.JsonProperty("EndpointName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EndpointName { get; set; }

        [Newtonsoft.Json.JsonProperty("LogicalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogicalAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("PhysicalAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhysicalAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("BindingKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid BindingKey { get; set; }

        [Newtonsoft.Json.JsonProperty("BindingPathAndName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BindingPathAndName { get; set; }

        [Newtonsoft.Json.JsonProperty("IsHosted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHosted { get; set; }

        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EndpointSearchBaseKind? Kind { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EndpointSearchQuery : EndpointSearchBase
    {
        [Newtonsoft.Json.JsonProperty("Keywords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Keywords { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BindingSearchResult : SearchResult
    {
        [Newtonsoft.Json.JsonProperty("Capabilities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Capabilities { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BindingSearchQuery : SearchQuery
    {
        [Newtonsoft.Json.JsonProperty("Configuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Configuration { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentitySearchResult : SearchResult
    {
        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IdentitySearchResultKind? Kind { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentitySearchQuery : SearchQuery
    {
        [Newtonsoft.Json.JsonProperty("Kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IdentitySearchQueryKind? Kind { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TimeUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Second")]
        Second = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Minute")]
        Minute = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Hour")]
        Hour = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SortField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"StartDateTime")]
        StartDateTime = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Value")]
        Value = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Ascending")]
        Ascending = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Descending")]
        Descending = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageVersion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Soap11")]
        Soap11 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Soap12")]
        Soap12 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageVersion2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Soap11")]
        Soap11 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Soap12")]
        Soap12 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binding")]
        Binding = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Behavior")]
        Behavior = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceVersion")]
        ServiceVersion = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Contract")]
        Contract = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Operation")]
        Operation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreement")]
        ServiceAgreement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRule")]
        AuthorizationRule = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertSourceType")]
        AlertSourceType = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertType")]
        AlertType = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertGroup")]
        AlertGroup = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandlerType")]
        AlertHandlerType = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandler")]
        AlertHandler = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RouterType")]
        RouterType = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionType")]
        ExpressionType = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Folder")]
        Folder = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Message")]
        Message = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageHeader")]
        MessageHeader = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeAddress")]
        NodeAddress = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationClaimType")]
        AuthorizationClaimType = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementAlertType")]
        ServiceAgreementAlertType = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Alert")]
        Alert = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeInstance")]
        NodeInstance = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringRecord")]
        MonitoringRecord = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringActivity")]
        MonitoringActivity = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringTransaction")]
        MonitoringTransaction = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"Issuer")]
        Issuer = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointGroup")]
        EndpointGroup = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"Identity")]
        Identity = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageSample")]
        MessageSample = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataSection")]
        MetadataSection = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementMetric")]
        ServiceAgreementMetric = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRuleAssignment")]
        AuthorizationRuleAssignment = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeEntityAlertType")]
        ChangeEntityAlertType = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeFolderAlertType")]
        ChangeFolderAlertType = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"DataSchema")]
        DataSchema = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"Reference")]
        Reference = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"ComponentType")]
        ComponentType = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"Product")]
        Product = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductServiceVersion")]
        ProductServiceVersion = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SecurityRole")]
        SecurityRole = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomAttributeType")]
        CustomAttributeType = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualizationProfile")]
        VirtualizationProfile = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroup")]
        AuthorizationGroup = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroupMember")]
        AuthorizationGroupMember = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringFilterType")]
        MonitoringFilterType = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"Certificate")]
        Certificate = 56,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Password")]
        Password = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Binary")]
        Binary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Token")]
        Token = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Captcha")]
        Captcha = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Requested")]
        Requested = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Activated")]
        Activated = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Deactivated")]
        Deactivated = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntityType2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binding")]
        Binding = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Behavior")]
        Behavior = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceVersion")]
        ServiceVersion = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Contract")]
        Contract = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Operation")]
        Operation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreement")]
        ServiceAgreement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRule")]
        AuthorizationRule = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertSourceType")]
        AlertSourceType = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertType")]
        AlertType = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertGroup")]
        AlertGroup = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandlerType")]
        AlertHandlerType = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandler")]
        AlertHandler = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RouterType")]
        RouterType = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionType")]
        ExpressionType = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Folder")]
        Folder = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Message")]
        Message = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageHeader")]
        MessageHeader = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeAddress")]
        NodeAddress = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationClaimType")]
        AuthorizationClaimType = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementAlertType")]
        ServiceAgreementAlertType = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Alert")]
        Alert = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeInstance")]
        NodeInstance = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringRecord")]
        MonitoringRecord = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringActivity")]
        MonitoringActivity = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringTransaction")]
        MonitoringTransaction = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"Issuer")]
        Issuer = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointGroup")]
        EndpointGroup = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"Identity")]
        Identity = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageSample")]
        MessageSample = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataSection")]
        MetadataSection = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementMetric")]
        ServiceAgreementMetric = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRuleAssignment")]
        AuthorizationRuleAssignment = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeEntityAlertType")]
        ChangeEntityAlertType = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeFolderAlertType")]
        ChangeFolderAlertType = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"DataSchema")]
        DataSchema = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"Reference")]
        Reference = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"ComponentType")]
        ComponentType = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"Product")]
        Product = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductServiceVersion")]
        ProductServiceVersion = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SecurityRole")]
        SecurityRole = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomAttributeType")]
        CustomAttributeType = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualizationProfile")]
        VirtualizationProfile = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroup")]
        AuthorizationGroup = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroupMember")]
        AuthorizationGroupMember = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringFilterType")]
        MonitoringFilterType = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"Certificate")]
        Certificate = 56,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntityType3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binding")]
        Binding = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Behavior")]
        Behavior = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceVersion")]
        ServiceVersion = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Contract")]
        Contract = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Operation")]
        Operation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreement")]
        ServiceAgreement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRule")]
        AuthorizationRule = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertSourceType")]
        AlertSourceType = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertType")]
        AlertType = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertGroup")]
        AlertGroup = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandlerType")]
        AlertHandlerType = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandler")]
        AlertHandler = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RouterType")]
        RouterType = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionType")]
        ExpressionType = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Folder")]
        Folder = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Message")]
        Message = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageHeader")]
        MessageHeader = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeAddress")]
        NodeAddress = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationClaimType")]
        AuthorizationClaimType = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementAlertType")]
        ServiceAgreementAlertType = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Alert")]
        Alert = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeInstance")]
        NodeInstance = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringRecord")]
        MonitoringRecord = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringActivity")]
        MonitoringActivity = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringTransaction")]
        MonitoringTransaction = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"Issuer")]
        Issuer = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointGroup")]
        EndpointGroup = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"Identity")]
        Identity = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageSample")]
        MessageSample = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataSection")]
        MetadataSection = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementMetric")]
        ServiceAgreementMetric = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRuleAssignment")]
        AuthorizationRuleAssignment = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeEntityAlertType")]
        ChangeEntityAlertType = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeFolderAlertType")]
        ChangeFolderAlertType = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"DataSchema")]
        DataSchema = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"Reference")]
        Reference = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"ComponentType")]
        ComponentType = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"Product")]
        Product = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductServiceVersion")]
        ProductServiceVersion = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SecurityRole")]
        SecurityRole = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomAttributeType")]
        CustomAttributeType = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualizationProfile")]
        VirtualizationProfile = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroup")]
        AuthorizationGroup = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroupMember")]
        AuthorizationGroupMember = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringFilterType")]
        MonitoringFilterType = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"Certificate")]
        Certificate = 56,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntityType4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binding")]
        Binding = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Behavior")]
        Behavior = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceVersion")]
        ServiceVersion = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Contract")]
        Contract = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Operation")]
        Operation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreement")]
        ServiceAgreement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRule")]
        AuthorizationRule = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertSourceType")]
        AlertSourceType = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertType")]
        AlertType = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertGroup")]
        AlertGroup = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandlerType")]
        AlertHandlerType = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandler")]
        AlertHandler = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RouterType")]
        RouterType = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionType")]
        ExpressionType = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Folder")]
        Folder = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Message")]
        Message = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageHeader")]
        MessageHeader = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeAddress")]
        NodeAddress = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationClaimType")]
        AuthorizationClaimType = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementAlertType")]
        ServiceAgreementAlertType = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Alert")]
        Alert = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeInstance")]
        NodeInstance = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringRecord")]
        MonitoringRecord = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringActivity")]
        MonitoringActivity = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringTransaction")]
        MonitoringTransaction = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"Issuer")]
        Issuer = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointGroup")]
        EndpointGroup = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"Identity")]
        Identity = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageSample")]
        MessageSample = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataSection")]
        MetadataSection = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementMetric")]
        ServiceAgreementMetric = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRuleAssignment")]
        AuthorizationRuleAssignment = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeEntityAlertType")]
        ChangeEntityAlertType = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeFolderAlertType")]
        ChangeFolderAlertType = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"DataSchema")]
        DataSchema = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"Reference")]
        Reference = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"ComponentType")]
        ComponentType = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"Product")]
        Product = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductServiceVersion")]
        ProductServiceVersion = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SecurityRole")]
        SecurityRole = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomAttributeType")]
        CustomAttributeType = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualizationProfile")]
        VirtualizationProfile = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroup")]
        AuthorizationGroup = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroupMember")]
        AuthorizationGroupMember = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringFilterType")]
        MonitoringFilterType = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"Certificate")]
        Certificate = 56,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Serializer
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Auto")]
        Auto = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DataContractSerializer")]
        DataContractSerializer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"XmlSerializer")]
        XmlSerializer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SoapSerializer")]
        SoapSerializer = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Serializer2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Auto")]
        Auto = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DataContractSerializer")]
        DataContractSerializer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"XmlSerializer")]
        XmlSerializer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SoapSerializer")]
        SoapSerializer = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Serializer3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Auto")]
        Auto = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DataContractSerializer")]
        DataContractSerializer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"XmlSerializer")]
        XmlSerializer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SoapSerializer")]
        SoapSerializer = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Serializer4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Auto")]
        Auto = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DataContractSerializer")]
        DataContractSerializer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"XmlSerializer")]
        XmlSerializer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SoapSerializer")]
        SoapSerializer = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binding")]
        Binding = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Behavior")]
        Behavior = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceVersion")]
        ServiceVersion = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Contract")]
        Contract = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Operation")]
        Operation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreement")]
        ServiceAgreement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRule")]
        AuthorizationRule = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertSourceType")]
        AlertSourceType = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertType")]
        AlertType = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertGroup")]
        AlertGroup = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandlerType")]
        AlertHandlerType = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandler")]
        AlertHandler = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RouterType")]
        RouterType = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionType")]
        ExpressionType = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Folder")]
        Folder = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Message")]
        Message = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageHeader")]
        MessageHeader = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeAddress")]
        NodeAddress = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationClaimType")]
        AuthorizationClaimType = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementAlertType")]
        ServiceAgreementAlertType = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Alert")]
        Alert = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeInstance")]
        NodeInstance = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringRecord")]
        MonitoringRecord = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringActivity")]
        MonitoringActivity = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringTransaction")]
        MonitoringTransaction = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"Issuer")]
        Issuer = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointGroup")]
        EndpointGroup = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"Identity")]
        Identity = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageSample")]
        MessageSample = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataSection")]
        MetadataSection = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementMetric")]
        ServiceAgreementMetric = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRuleAssignment")]
        AuthorizationRuleAssignment = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeEntityAlertType")]
        ChangeEntityAlertType = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeFolderAlertType")]
        ChangeFolderAlertType = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"DataSchema")]
        DataSchema = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"Reference")]
        Reference = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"ComponentType")]
        ComponentType = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"Product")]
        Product = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductServiceVersion")]
        ProductServiceVersion = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SecurityRole")]
        SecurityRole = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomAttributeType")]
        CustomAttributeType = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualizationProfile")]
        VirtualizationProfile = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroup")]
        AuthorizationGroup = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroupMember")]
        AuthorizationGroupMember = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringFilterType")]
        MonitoringFilterType = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"Certificate")]
        Certificate = 56,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChangeTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Updated")]
        Updated = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
        Deleted = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntityType5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binding")]
        Binding = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Behavior")]
        Behavior = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceVersion")]
        ServiceVersion = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Contract")]
        Contract = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Operation")]
        Operation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreement")]
        ServiceAgreement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRule")]
        AuthorizationRule = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertSourceType")]
        AlertSourceType = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertType")]
        AlertType = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertGroup")]
        AlertGroup = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandlerType")]
        AlertHandlerType = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandler")]
        AlertHandler = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RouterType")]
        RouterType = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionType")]
        ExpressionType = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Folder")]
        Folder = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Message")]
        Message = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageHeader")]
        MessageHeader = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeAddress")]
        NodeAddress = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationClaimType")]
        AuthorizationClaimType = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementAlertType")]
        ServiceAgreementAlertType = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Alert")]
        Alert = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeInstance")]
        NodeInstance = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringRecord")]
        MonitoringRecord = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringActivity")]
        MonitoringActivity = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringTransaction")]
        MonitoringTransaction = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"Issuer")]
        Issuer = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointGroup")]
        EndpointGroup = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"Identity")]
        Identity = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageSample")]
        MessageSample = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataSection")]
        MetadataSection = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementMetric")]
        ServiceAgreementMetric = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRuleAssignment")]
        AuthorizationRuleAssignment = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeEntityAlertType")]
        ChangeEntityAlertType = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeFolderAlertType")]
        ChangeFolderAlertType = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"DataSchema")]
        DataSchema = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"Reference")]
        Reference = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"ComponentType")]
        ComponentType = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"Product")]
        Product = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductServiceVersion")]
        ProductServiceVersion = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SecurityRole")]
        SecurityRole = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomAttributeType")]
        CustomAttributeType = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualizationProfile")]
        VirtualizationProfile = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroup")]
        AuthorizationGroup = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroupMember")]
        AuthorizationGroupMember = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringFilterType")]
        MonitoringFilterType = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"Certificate")]
        Certificate = 56,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChangeTypes2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Updated")]
        Updated = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
        Deleted = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Entities
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Folder")]
        Folder = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binding")]
        Binding = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PhysicalService")]
        PhysicalService = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualService")]
        VirtualService = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Rule")]
        Rule = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreement")]
        ServiceAgreement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointBehavior")]
        EndpointBehavior = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceBehavior")]
        ServiceBehavior = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Behavior")]
        Behavior = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Identity")]
        Identity = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroup")]
        AuthorizationGroup = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntityType6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Folder")]
        Folder = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binding")]
        Binding = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PhysicalService")]
        PhysicalService = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualService")]
        VirtualService = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Rule")]
        Rule = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreement")]
        ServiceAgreement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointBehavior")]
        EndpointBehavior = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceBehavior")]
        ServiceBehavior = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Behavior")]
        Behavior = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Identity")]
        Identity = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroup")]
        AuthorizationGroup = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Entities2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Folder")]
        Folder = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binding")]
        Binding = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PhysicalService")]
        PhysicalService = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualService")]
        VirtualService = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Rule")]
        Rule = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreement")]
        ServiceAgreement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointBehavior")]
        EndpointBehavior = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceBehavior")]
        ServiceBehavior = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Behavior")]
        Behavior = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Identity")]
        Identity = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroup")]
        AuthorizationGroup = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BaseAddressCollisionAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Throw")]
        Throw = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Disable")]
        Disable = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Retire")]
        Retire = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BaseAddressCollisionAction2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Throw")]
        Throw = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Disable")]
        Disable = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Retire")]
        Retire = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ErrorTolerance
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IgnoreErrors")]
        IgnoreErrors = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IgnoreWarnings")]
        IgnoreWarnings = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IgnoreNone")]
        IgnoreNone = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Serializer5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Auto")]
        Auto = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DataContractSerializer")]
        DataContractSerializer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"XmlSerializer")]
        XmlSerializer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SoapSerializer")]
        SoapSerializer = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ErrorTolerance2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IgnoreErrors")]
        IgnoreErrors = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IgnoreWarnings")]
        IgnoreWarnings = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IgnoreNone")]
        IgnoreNone = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Serializer6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Auto")]
        Auto = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DataContractSerializer")]
        DataContractSerializer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"XmlSerializer")]
        XmlSerializer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SoapSerializer")]
        SoapSerializer = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ErrorTolerance3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IgnoreErrors")]
        IgnoreErrors = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IgnoreWarnings")]
        IgnoreWarnings = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IgnoreNone")]
        IgnoreNone = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Serializer7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Auto")]
        Auto = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DataContractSerializer")]
        DataContractSerializer = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"XmlSerializer")]
        XmlSerializer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SoapSerializer")]
        SoapSerializer = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Obsolete")]
        Obsolete = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Retired")]
        Retired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Obsolete")]
        Obsolete = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Retired")]
        Retired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Options
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ProtectExistingEndpoints")]
        ProtectExistingEndpoints = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceAgreementMetricMetric
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TotalCount")]
        TotalCount = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SuccessCount")]
        SuccessCount = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FaultCount")]
        FaultCount = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FaultPercent")]
        FaultPercent = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AverageDuration")]
        AverageDuration = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MaximumDuration")]
        MaximumDuration = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AverageSize")]
        AverageSize = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MaximumSize")]
        MaximumSize = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"TotalBytes")]
        TotalBytes = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"RequestedBytes")]
        RequestedBytes = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"RespondedBytes")]
        RespondedBytes = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"RespondedBytesPercent")]
        RespondedBytesPercent = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ExceptionCount")]
        ExceptionCount = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ExceptionPercent")]
        ExceptionPercent = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceAgreementMetricTimeUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Second")]
        Second = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Minute")]
        Minute = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Hour")]
        Hour = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AuthorizationRuleAssignmentKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Soap")]
        Soap = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Rest")]
        Rest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenData")]
        OpenData = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AuthorizationRuleAssignmentAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Permit")]
        Permit = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Deny")]
        Deny = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PropertyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Text")]
        Text = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Uri")]
        Uri = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Keyword")]
        Keyword = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceAgreementStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Retired")]
        Retired = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceAgreementViolationSummaryUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Second")]
        Second = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Minute")]
        Minute = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Hour")]
        Hour = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceAgreementViolationSummaryRequestTimeUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Second")]
        Second = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Minute")]
        Minute = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Hour")]
        Hour = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceAgreementViolationMetricType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TotalCount")]
        TotalCount = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SuccessCount")]
        SuccessCount = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FaultCount")]
        FaultCount = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FaultPercent")]
        FaultPercent = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AverageDuration")]
        AverageDuration = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MaximumDuration")]
        MaximumDuration = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AverageSize")]
        AverageSize = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"MaximumSize")]
        MaximumSize = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"TotalBytes")]
        TotalBytes = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"RequestedBytes")]
        RequestedBytes = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"RespondedBytes")]
        RespondedBytes = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"RespondedBytesPercent")]
        RespondedBytesPercent = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ExceptionCount")]
        ExceptionCount = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"ExceptionPercent")]
        ExceptionPercent = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceAgreementViolationsRequestSortField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"StartDateTime")]
        StartDateTime = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MetricType")]
        MetricType = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementName")]
        ServiceAgreementName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"InitialValue")]
        InitialValue = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CurrentValue")]
        CurrentValue = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceAgreementViolationsRequestSortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Ascending")]
        Ascending = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Descending")]
        Descending = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceAgreementSearchResultStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Retired")]
        Retired = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceAgreementSearchQueryStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Retired")]
        Retired = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageSampleVersion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Soap11")]
        Soap11 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Soap12")]
        Soap12 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FileContentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Message")]
        Message = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Metadata")]
        Metadata = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ImportPackage")]
        ImportPackage = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Swagger")]
        Swagger = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenApiV3")]
        OpenApiV3 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageGenerationSettingsEnvelopeVersion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Soap11")]
        Soap11 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Soap12")]
        Soap12 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DependencyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Natural")]
        Natural = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Declarative")]
        Declarative = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DependencyReferenceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DependsOn")]
        DependsOn = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Contains")]
        Contains = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LocalIdentifierEntityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binding")]
        Binding = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Behavior")]
        Behavior = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceVersion")]
        ServiceVersion = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Contract")]
        Contract = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Operation")]
        Operation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreement")]
        ServiceAgreement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRule")]
        AuthorizationRule = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertSourceType")]
        AlertSourceType = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertType")]
        AlertType = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertGroup")]
        AlertGroup = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandlerType")]
        AlertHandlerType = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandler")]
        AlertHandler = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RouterType")]
        RouterType = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionType")]
        ExpressionType = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Folder")]
        Folder = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Message")]
        Message = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageHeader")]
        MessageHeader = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeAddress")]
        NodeAddress = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationClaimType")]
        AuthorizationClaimType = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementAlertType")]
        ServiceAgreementAlertType = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Alert")]
        Alert = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeInstance")]
        NodeInstance = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringRecord")]
        MonitoringRecord = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringActivity")]
        MonitoringActivity = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringTransaction")]
        MonitoringTransaction = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"Issuer")]
        Issuer = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointGroup")]
        EndpointGroup = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"Identity")]
        Identity = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageSample")]
        MessageSample = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataSection")]
        MetadataSection = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementMetric")]
        ServiceAgreementMetric = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRuleAssignment")]
        AuthorizationRuleAssignment = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeEntityAlertType")]
        ChangeEntityAlertType = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeFolderAlertType")]
        ChangeFolderAlertType = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"DataSchema")]
        DataSchema = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"Reference")]
        Reference = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"ComponentType")]
        ComponentType = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"Product")]
        Product = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductServiceVersion")]
        ProductServiceVersion = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SecurityRole")]
        SecurityRole = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomAttributeType")]
        CustomAttributeType = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualizationProfile")]
        VirtualizationProfile = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroup")]
        AuthorizationGroup = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroupMember")]
        AuthorizationGroupMember = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringFilterType")]
        MonitoringFilterType = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"Certificate")]
        Certificate = 56,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceSubtreeKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Soap")]
        Soap = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Rest")]
        Rest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenData")]
        OpenData = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NodeSubtreeNodeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IisMixedTransportsMode")]
        IisMixedTransportsMode = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IisAspNetCompatibilityMode")]
        IisAspNetCompatibilityMode = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SelfHosted")]
        SelfHosted = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BehaviorSubtreeKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IdentitySubtreeKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"X509Certificate")]
        X509Certificate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Windows")]
        Windows = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UserNamePassword")]
        UserNamePassword = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UserPrincipalName")]
        UserPrincipalName = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ServicePrincipalName")]
        ServicePrincipalName = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Digest")]
        Digest = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"UserNamePasswordHash")]
        UserNamePasswordHash = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"WindowsNoPassword")]
        WindowsNoPassword = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AzureCredentials")]
        AzureCredentials = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DnsName")]
        DnsName = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"X509CertificateFederation")]
        X509CertificateFederation = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"WindowsGroup")]
        WindowsGroup = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Claim")]
        Claim = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"X509CertificateThumbprint")]
        X509CertificateThumbprint = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"OAuthClientCredentials")]
        OAuthClientCredentials = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"OAuthServiceCredentials")]
        OAuthServiceCredentials = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceVersionSubtreeStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Obsolete")]
        Obsolete = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Retired")]
        Retired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceVersionSubtreeKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Soap")]
        Soap = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Rest")]
        Rest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenData")]
        OpenData = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OperationSubtreeExchangePattern
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Send")]
        Send = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RequestResponse")]
        RequestResponse = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SolicitResponse")]
        SolicitResponse = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Receive")]
        Receive = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageSubtreeDirection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Input")]
        Input = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Output")]
        Output = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Fault")]
        Fault = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GenericFault")]
        GenericFault = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntityInfoEntityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binding")]
        Binding = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Behavior")]
        Behavior = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceVersion")]
        ServiceVersion = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Contract")]
        Contract = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Operation")]
        Operation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreement")]
        ServiceAgreement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRule")]
        AuthorizationRule = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertSourceType")]
        AlertSourceType = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertType")]
        AlertType = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertGroup")]
        AlertGroup = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandlerType")]
        AlertHandlerType = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandler")]
        AlertHandler = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RouterType")]
        RouterType = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionType")]
        ExpressionType = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Folder")]
        Folder = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Message")]
        Message = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageHeader")]
        MessageHeader = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeAddress")]
        NodeAddress = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationClaimType")]
        AuthorizationClaimType = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementAlertType")]
        ServiceAgreementAlertType = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Alert")]
        Alert = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeInstance")]
        NodeInstance = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringRecord")]
        MonitoringRecord = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringActivity")]
        MonitoringActivity = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringTransaction")]
        MonitoringTransaction = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"Issuer")]
        Issuer = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointGroup")]
        EndpointGroup = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"Identity")]
        Identity = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageSample")]
        MessageSample = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataSection")]
        MetadataSection = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementMetric")]
        ServiceAgreementMetric = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRuleAssignment")]
        AuthorizationRuleAssignment = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeEntityAlertType")]
        ChangeEntityAlertType = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeFolderAlertType")]
        ChangeFolderAlertType = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"DataSchema")]
        DataSchema = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"Reference")]
        Reference = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"ComponentType")]
        ComponentType = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"Product")]
        Product = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductServiceVersion")]
        ProductServiceVersion = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SecurityRole")]
        SecurityRole = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomAttributeType")]
        CustomAttributeType = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualizationProfile")]
        VirtualizationProfile = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroup")]
        AuthorizationGroup = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroupMember")]
        AuthorizationGroupMember = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringFilterType")]
        MonitoringFilterType = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"Certificate")]
        Certificate = 56,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GlobalIdentifierEntityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binding")]
        Binding = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Behavior")]
        Behavior = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceVersion")]
        ServiceVersion = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Contract")]
        Contract = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Operation")]
        Operation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreement")]
        ServiceAgreement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRule")]
        AuthorizationRule = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertSourceType")]
        AlertSourceType = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertType")]
        AlertType = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertGroup")]
        AlertGroup = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandlerType")]
        AlertHandlerType = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandler")]
        AlertHandler = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RouterType")]
        RouterType = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionType")]
        ExpressionType = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Folder")]
        Folder = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Message")]
        Message = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageHeader")]
        MessageHeader = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeAddress")]
        NodeAddress = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationClaimType")]
        AuthorizationClaimType = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementAlertType")]
        ServiceAgreementAlertType = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Alert")]
        Alert = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeInstance")]
        NodeInstance = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringRecord")]
        MonitoringRecord = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringActivity")]
        MonitoringActivity = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringTransaction")]
        MonitoringTransaction = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"Issuer")]
        Issuer = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointGroup")]
        EndpointGroup = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"Identity")]
        Identity = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageSample")]
        MessageSample = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataSection")]
        MetadataSection = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementMetric")]
        ServiceAgreementMetric = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRuleAssignment")]
        AuthorizationRuleAssignment = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeEntityAlertType")]
        ChangeEntityAlertType = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeFolderAlertType")]
        ChangeFolderAlertType = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"DataSchema")]
        DataSchema = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"Reference")]
        Reference = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"ComponentType")]
        ComponentType = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"Product")]
        Product = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductServiceVersion")]
        ProductServiceVersion = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SecurityRole")]
        SecurityRole = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomAttributeType")]
        CustomAttributeType = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualizationProfile")]
        VirtualizationProfile = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroup")]
        AuthorizationGroup = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroupMember")]
        AuthorizationGroupMember = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringFilterType")]
        MonitoringFilterType = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"Certificate")]
        Certificate = 56,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum KeyMappingEntityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binding")]
        Binding = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Behavior")]
        Behavior = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceVersion")]
        ServiceVersion = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Contract")]
        Contract = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Operation")]
        Operation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreement")]
        ServiceAgreement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRule")]
        AuthorizationRule = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertSourceType")]
        AlertSourceType = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertType")]
        AlertType = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertGroup")]
        AlertGroup = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandlerType")]
        AlertHandlerType = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandler")]
        AlertHandler = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RouterType")]
        RouterType = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionType")]
        ExpressionType = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Folder")]
        Folder = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Message")]
        Message = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageHeader")]
        MessageHeader = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeAddress")]
        NodeAddress = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationClaimType")]
        AuthorizationClaimType = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementAlertType")]
        ServiceAgreementAlertType = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Alert")]
        Alert = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeInstance")]
        NodeInstance = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringRecord")]
        MonitoringRecord = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringActivity")]
        MonitoringActivity = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringTransaction")]
        MonitoringTransaction = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"Issuer")]
        Issuer = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointGroup")]
        EndpointGroup = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"Identity")]
        Identity = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageSample")]
        MessageSample = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataSection")]
        MetadataSection = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementMetric")]
        ServiceAgreementMetric = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRuleAssignment")]
        AuthorizationRuleAssignment = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeEntityAlertType")]
        ChangeEntityAlertType = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeFolderAlertType")]
        ChangeFolderAlertType = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"DataSchema")]
        DataSchema = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"Reference")]
        Reference = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"ComponentType")]
        ComponentType = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"Product")]
        Product = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductServiceVersion")]
        ProductServiceVersion = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SecurityRole")]
        SecurityRole = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomAttributeType")]
        CustomAttributeType = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualizationProfile")]
        VirtualizationProfile = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroup")]
        AuthorizationGroup = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroupMember")]
        AuthorizationGroupMember = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringFilterType")]
        MonitoringFilterType = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"Certificate")]
        Certificate = 56,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UserAuthorizationInfoPermission
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadOnly")]
        ReadOnly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadWrite")]
        ReadWrite = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Administrator")]
        Administrator = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UserAuthorizationInfoIdentityKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"X509Certificate")]
        X509Certificate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Windows")]
        Windows = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UserNamePassword")]
        UserNamePassword = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UserPrincipalName")]
        UserPrincipalName = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ServicePrincipalName")]
        ServicePrincipalName = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Digest")]
        Digest = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"UserNamePasswordHash")]
        UserNamePasswordHash = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"WindowsNoPassword")]
        WindowsNoPassword = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AzureCredentials")]
        AzureCredentials = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DnsName")]
        DnsName = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"X509CertificateFederation")]
        X509CertificateFederation = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"WindowsGroup")]
        WindowsGroup = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Claim")]
        Claim = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"X509CertificateThumbprint")]
        X509CertificateThumbprint = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"OAuthClientCredentials")]
        OAuthClientCredentials = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"OAuthServiceCredentials")]
        OAuthServiceCredentials = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LicenseInfoType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Evaluation")]
        Evaluation = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Development")]
        Development = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NonProduction")]
        NonProduction = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Production")]
        Production = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LicenseInfoFeatures
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DeveloperPortal")]
        DeveloperPortal = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CertificateInfoContentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Serialized")]
        Serialized = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Pfx")]
        Pfx = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LiquidTemplateParametersContentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Auto")]
        Auto = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Xml")]
        Xml = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Json")]
        Json = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Raw")]
        Raw = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductServiceVersionStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Obsolete")]
        Obsolete = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Retired")]
        Retired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductServiceVersionKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Soap")]
        Soap = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Rest")]
        Rest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenData")]
        OpenData = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntityReferencePrimaryEntityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binding")]
        Binding = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Behavior")]
        Behavior = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceVersion")]
        ServiceVersion = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Contract")]
        Contract = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Operation")]
        Operation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreement")]
        ServiceAgreement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRule")]
        AuthorizationRule = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertSourceType")]
        AlertSourceType = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertType")]
        AlertType = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertGroup")]
        AlertGroup = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandlerType")]
        AlertHandlerType = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandler")]
        AlertHandler = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RouterType")]
        RouterType = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionType")]
        ExpressionType = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Folder")]
        Folder = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Message")]
        Message = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageHeader")]
        MessageHeader = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeAddress")]
        NodeAddress = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationClaimType")]
        AuthorizationClaimType = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementAlertType")]
        ServiceAgreementAlertType = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Alert")]
        Alert = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeInstance")]
        NodeInstance = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringRecord")]
        MonitoringRecord = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringActivity")]
        MonitoringActivity = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringTransaction")]
        MonitoringTransaction = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"Issuer")]
        Issuer = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointGroup")]
        EndpointGroup = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"Identity")]
        Identity = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageSample")]
        MessageSample = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataSection")]
        MetadataSection = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementMetric")]
        ServiceAgreementMetric = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRuleAssignment")]
        AuthorizationRuleAssignment = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeEntityAlertType")]
        ChangeEntityAlertType = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeFolderAlertType")]
        ChangeFolderAlertType = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"DataSchema")]
        DataSchema = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"Reference")]
        Reference = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"ComponentType")]
        ComponentType = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"Product")]
        Product = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductServiceVersion")]
        ProductServiceVersion = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SecurityRole")]
        SecurityRole = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomAttributeType")]
        CustomAttributeType = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualizationProfile")]
        VirtualizationProfile = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroup")]
        AuthorizationGroup = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroupMember")]
        AuthorizationGroupMember = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringFilterType")]
        MonitoringFilterType = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"Certificate")]
        Certificate = 56,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntityReferenceForeignEntityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binding")]
        Binding = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Behavior")]
        Behavior = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceVersion")]
        ServiceVersion = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Contract")]
        Contract = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Operation")]
        Operation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreement")]
        ServiceAgreement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRule")]
        AuthorizationRule = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertSourceType")]
        AlertSourceType = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertType")]
        AlertType = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertGroup")]
        AlertGroup = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandlerType")]
        AlertHandlerType = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandler")]
        AlertHandler = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RouterType")]
        RouterType = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionType")]
        ExpressionType = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Folder")]
        Folder = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Message")]
        Message = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageHeader")]
        MessageHeader = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeAddress")]
        NodeAddress = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationClaimType")]
        AuthorizationClaimType = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementAlertType")]
        ServiceAgreementAlertType = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Alert")]
        Alert = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeInstance")]
        NodeInstance = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringRecord")]
        MonitoringRecord = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringActivity")]
        MonitoringActivity = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringTransaction")]
        MonitoringTransaction = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"Issuer")]
        Issuer = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointGroup")]
        EndpointGroup = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"Identity")]
        Identity = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageSample")]
        MessageSample = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataSection")]
        MetadataSection = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementMetric")]
        ServiceAgreementMetric = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRuleAssignment")]
        AuthorizationRuleAssignment = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeEntityAlertType")]
        ChangeEntityAlertType = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeFolderAlertType")]
        ChangeFolderAlertType = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"DataSchema")]
        DataSchema = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"Reference")]
        Reference = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"ComponentType")]
        ComponentType = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"Product")]
        Product = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductServiceVersion")]
        ProductServiceVersion = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SecurityRole")]
        SecurityRole = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomAttributeType")]
        CustomAttributeType = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualizationProfile")]
        VirtualizationProfile = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroup")]
        AuthorizationGroup = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroupMember")]
        AuthorizationGroupMember = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringFilterType")]
        MonitoringFilterType = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"Certificate")]
        Certificate = 56,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntityReferenceReferenceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DependsOn")]
        DependsOn = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Contains")]
        Contains = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Obsolete")]
        Obsolete = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Retired")]
        Retired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductSearchQueryStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Obsolete")]
        Obsolete = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Retired")]
        Retired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductSearchQuerySortField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Status")]
        Status = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IsPrivate")]
        IsPrivate = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IsApprovalRequired")]
        IsApprovalRequired = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"IsSubscriptionRequired")]
        IsSubscriptionRequired = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceVersionCount")]
        ServiceVersionCount = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProductSearchQuerySortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Ascending")]
        Ascending = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Descending")]
        Descending = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ConsumerSearchQuerySortField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IsEnabled")]
        IsEnabled = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ConsumerSearchQuerySortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Ascending")]
        Ascending = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Descending")]
        Descending = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SubscriptionStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Requested")]
        Requested = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Activated")]
        Activated = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Deactivated")]
        Deactivated = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SubscriptionSearchQueryStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Requested")]
        Requested = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Activated")]
        Activated = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Deactivated")]
        Deactivated = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SubscriptionSearchQuerySortField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductName")]
        ProductName = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ConsumerName")]
        ConsumerName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Status")]
        Status = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Expiration")]
        Expiration = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SubscriptionSearchQuerySortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Ascending")]
        Ascending = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Descending")]
        Descending = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApplicationSearchQuerySortField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AccessKey1Expiration")]
        AccessKey1Expiration = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AccessKey2Expiration")]
        AccessKey2Expiration = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApplicationSearchQuerySortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Ascending")]
        Ascending = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Descending")]
        Descending = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PolicyDescriptionKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Web")]
        Web = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Soap")]
        Soap = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WebRelay")]
        WebRelay = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SoapRelay")]
        SoapRelay = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SoapDescriptionVersion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Soap11")]
        Soap11 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Soap12")]
        Soap12 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SoapDescriptionSecurityMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Transport")]
        Transport = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Message")]
        Message = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SoapDescriptionMessageSecurity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Windows")]
        Windows = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UserName")]
        UserName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Certificate")]
        Certificate = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"IssuedToken")]
        IssuedToken = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SoapDescriptionReliableSession
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NotOrdered")]
        NotOrdered = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"InOrder")]
        InOrder = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomAttributeTypeEntityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binding")]
        Binding = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Behavior")]
        Behavior = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceVersion")]
        ServiceVersion = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Contract")]
        Contract = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Operation")]
        Operation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreement")]
        ServiceAgreement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRule")]
        AuthorizationRule = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertSourceType")]
        AlertSourceType = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertType")]
        AlertType = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertGroup")]
        AlertGroup = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandlerType")]
        AlertHandlerType = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandler")]
        AlertHandler = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RouterType")]
        RouterType = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionType")]
        ExpressionType = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Folder")]
        Folder = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Message")]
        Message = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageHeader")]
        MessageHeader = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeAddress")]
        NodeAddress = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationClaimType")]
        AuthorizationClaimType = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementAlertType")]
        ServiceAgreementAlertType = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Alert")]
        Alert = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeInstance")]
        NodeInstance = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringRecord")]
        MonitoringRecord = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringActivity")]
        MonitoringActivity = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringTransaction")]
        MonitoringTransaction = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"Issuer")]
        Issuer = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointGroup")]
        EndpointGroup = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"Identity")]
        Identity = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageSample")]
        MessageSample = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataSection")]
        MetadataSection = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementMetric")]
        ServiceAgreementMetric = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRuleAssignment")]
        AuthorizationRuleAssignment = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeEntityAlertType")]
        ChangeEntityAlertType = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeFolderAlertType")]
        ChangeFolderAlertType = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"DataSchema")]
        DataSchema = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"Reference")]
        Reference = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"ComponentType")]
        ComponentType = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"Product")]
        Product = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductServiceVersion")]
        ProductServiceVersion = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SecurityRole")]
        SecurityRole = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomAttributeType")]
        CustomAttributeType = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualizationProfile")]
        VirtualizationProfile = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroup")]
        AuthorizationGroup = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroupMember")]
        AuthorizationGroupMember = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringFilterType")]
        MonitoringFilterType = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"Certificate")]
        Certificate = 56,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomAttributeTypeDataType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"String")]
        String = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Integer")]
        Integer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Decimal")]
        Decimal = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DateTime")]
        DateTime = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
        Boolean = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomAttributeTypePortalVisibility
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"View")]
        View = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Edit")]
        Edit = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VirtualizationProfileServiceKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Soap")]
        Soap = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Rest")]
        Rest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenData")]
        OpenData = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VirtualizationSettingsMonitoringProfile
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Default")]
        Default = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Extended")]
        Extended = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Full")]
        Full = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DefaultAuthorizationRuleAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Permit")]
        Permit = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Deny")]
        Deny = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceVersionSettingsUserNameAuth
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Windows")]
        Windows = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SecurityTokenServiceSettingsJwtSigningAlgorithm
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RS256")]
        RS256 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HS256")]
        HS256 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WebErrorsHandlingMessageContentFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Xml")]
        Xml = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Json")]
        Json = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Text")]
        Text = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BehaviorSearchResultKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BehaviorSearchQueryKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NodeAddressKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Physical")]
        Physical = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AzureServiceBus")]
        AzureServiceBus = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IdentityDefinitionBaseKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"X509Certificate")]
        X509Certificate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Windows")]
        Windows = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UserNamePassword")]
        UserNamePassword = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UserPrincipalName")]
        UserPrincipalName = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ServicePrincipalName")]
        ServicePrincipalName = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Digest")]
        Digest = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"UserNamePasswordHash")]
        UserNamePasswordHash = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"WindowsNoPassword")]
        WindowsNoPassword = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AzureCredentials")]
        AzureCredentials = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DnsName")]
        DnsName = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"X509CertificateFederation")]
        X509CertificateFederation = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"WindowsGroup")]
        WindowsGroup = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Claim")]
        Claim = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"X509CertificateThumbprint")]
        X509CertificateThumbprint = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"OAuthClientCredentials")]
        OAuthClientCredentials = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"OAuthServiceCredentials")]
        OAuthServiceCredentials = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NodeInstanceLastReportedStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Idle")]
        Idle = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Warnings")]
        Warnings = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Errors")]
        Errors = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NodeInstanceStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Idle")]
        Idle = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Warnings")]
        Warnings = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Errors")]
        Errors = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NodeSettingsClientAddressOptions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TakeLast")]
        TakeLast = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NodeSettingsChangeMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceRestart")]
        ServiceRestart = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeRecycle")]
        NodeRecycle = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AzureSecurityConfigurationCredentialType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SharedSecret")]
        SharedSecret = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SimpleWebToken")]
        SimpleWebToken = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Saml")]
        Saml = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SharedAccessSignature")]
        SharedAccessSignature = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OAuth")]
        OAuth = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Windows")]
        Windows = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NodeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IisMixedTransportsMode")]
        IisMixedTransportsMode = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IisAspNetCompatibilityMode")]
        IisAspNetCompatibilityMode = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SelfHosted")]
        SelfHosted = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SchemeSummaryKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Physical")]
        Physical = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AzureServiceBus")]
        AzureServiceBus = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NodeSearchQueryStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Idle")]
        Idle = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Warnings")]
        Warnings = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Errors")]
        Errors = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ComponentTypeAllowedPositions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InboundRequest")]
        InboundRequest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"InboundResponse")]
        InboundResponse = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OutboundRequest")]
        OutboundRequest = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"OutboundResponse")]
        OutboundResponse = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OperationInfoExchangePattern
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Send")]
        Send = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RequestResponse")]
        RequestResponse = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SolicitResponse")]
        SolicitResponse = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Receive")]
        Receive = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransactionSummaryRequestType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"O")]
        O = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransactionSummaryRequestUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Second")]
        Second = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Minute")]
        Minute = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Hour")]
        Hour = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MonitoringTransactionHeaderType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"O")]
        O = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MonitoringTransactionHeaderStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"F")]
        F = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransactionHeadersRequestTransactionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"O")]
        O = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransactionHeadersRequestStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"F")]
        F = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransactionHeadersRequestSortField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"StartDateTime")]
        StartDateTime = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OperationName")]
        OperationName = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"InboundEndpointName")]
        InboundEndpointName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"InboundPhysicalAddress")]
        InboundPhysicalAddress = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"InboundServiceName")]
        InboundServiceName = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"InboundServiceVersionName")]
        InboundServiceVersionName = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"InboundClientAddress")]
        InboundClientAddress = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"OutboundEndpointName")]
        OutboundEndpointName = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"OutboundPhysicalAddress")]
        OutboundPhysicalAddress = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"OutboundServiceVersionName")]
        OutboundServiceVersionName = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"OutboundServiceName")]
        OutboundServiceName = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Duration")]
        Duration = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Status")]
        Status = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"TransactionError")]
        TransactionError = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"HttpStatusCode")]
        HttpStatusCode = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransactionHeadersRequestSortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Ascending")]
        Ascending = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Descending")]
        Descending = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MonitoringTransactionDetailsTransactionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"O")]
        O = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MonitoringTransactionDetailsStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"S")]
        S = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"F")]
        F = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MonitoringTransactionDetailsKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Soap")]
        Soap = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Rest")]
        Rest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenData")]
        OpenData = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MonitoringRecordPoint
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReqT")]
        ReqT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ReqS")]
        ReqS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ResS")]
        ResS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ResT")]
        ResT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Claims")]
        Claims = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MonitoringActivitySeverity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"W")]
        W = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"T")]
        T = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MonitoringActivitiesRequestMinimumSeverity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"W")]
        W = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"I")]
        I = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"T")]
        T = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MonitoringActivitiesRequestSortField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ActivityDateTime")]
        ActivityDateTime = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeName")]
        NodeName = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeInstanceName")]
        NodeInstanceName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TransactionId")]
        TransactionId = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceVersionName")]
        ServiceVersionName = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointName")]
        EndpointName = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Severity")]
        Severity = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ActivityMessage")]
        ActivityMessage = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MonitoringActivitiesRequestSortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Ascending")]
        Ascending = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Descending")]
        Descending = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceVersionUsageSummaryKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Soap")]
        Soap = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Rest")]
        Rest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenData")]
        OpenData = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UsageSummaryRequestReportType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"MostCalled")]
        MostCalled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MostFailed")]
        MostFailed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MostPercentageFailed")]
        MostPercentageFailed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LeastResponsive")]
        LeastResponsive = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MostErrored")]
        MostErrored = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MostPercentageErrored")]
        MostPercentageErrored = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UsageSummaryRequestOptions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IncludeVirtualServices")]
        IncludeVirtualServices = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IncludePhysicalServices")]
        IncludePhysicalServices = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IncludeDeletedServices")]
        IncludeDeletedServices = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"IncludeSystemOperations")]
        IncludeSystemOperations = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"IncludeDeletedOperations")]
        IncludeDeletedOperations = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"IncludeSubfolders")]
        IncludeSubfolders = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"IncludeDeletedSubscriptions")]
        IncludeDeletedSubscriptions = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"IncludeDeletedProducts")]
        IncludeDeletedProducts = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"IncludeDeletedConsumers")]
        IncludeDeletedConsumers = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChangeRecordEntityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binding")]
        Binding = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Behavior")]
        Behavior = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceVersion")]
        ServiceVersion = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Contract")]
        Contract = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Operation")]
        Operation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreement")]
        ServiceAgreement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRule")]
        AuthorizationRule = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertSourceType")]
        AlertSourceType = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertType")]
        AlertType = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertGroup")]
        AlertGroup = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandlerType")]
        AlertHandlerType = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandler")]
        AlertHandler = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RouterType")]
        RouterType = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionType")]
        ExpressionType = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Folder")]
        Folder = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Message")]
        Message = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageHeader")]
        MessageHeader = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeAddress")]
        NodeAddress = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationClaimType")]
        AuthorizationClaimType = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementAlertType")]
        ServiceAgreementAlertType = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Alert")]
        Alert = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeInstance")]
        NodeInstance = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringRecord")]
        MonitoringRecord = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringActivity")]
        MonitoringActivity = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringTransaction")]
        MonitoringTransaction = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"Issuer")]
        Issuer = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointGroup")]
        EndpointGroup = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"Identity")]
        Identity = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageSample")]
        MessageSample = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataSection")]
        MetadataSection = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementMetric")]
        ServiceAgreementMetric = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRuleAssignment")]
        AuthorizationRuleAssignment = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeEntityAlertType")]
        ChangeEntityAlertType = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeFolderAlertType")]
        ChangeFolderAlertType = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"DataSchema")]
        DataSchema = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"Reference")]
        Reference = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"ComponentType")]
        ComponentType = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"Product")]
        Product = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductServiceVersion")]
        ProductServiceVersion = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SecurityRole")]
        SecurityRole = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomAttributeType")]
        CustomAttributeType = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualizationProfile")]
        VirtualizationProfile = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroup")]
        AuthorizationGroup = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroupMember")]
        AuthorizationGroupMember = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringFilterType")]
        MonitoringFilterType = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"Certificate")]
        Certificate = 56,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChangeRecordMajorEntityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binding")]
        Binding = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Behavior")]
        Behavior = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceVersion")]
        ServiceVersion = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Contract")]
        Contract = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Operation")]
        Operation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreement")]
        ServiceAgreement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRule")]
        AuthorizationRule = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertSourceType")]
        AlertSourceType = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertType")]
        AlertType = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertGroup")]
        AlertGroup = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandlerType")]
        AlertHandlerType = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandler")]
        AlertHandler = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RouterType")]
        RouterType = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionType")]
        ExpressionType = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Folder")]
        Folder = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Message")]
        Message = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageHeader")]
        MessageHeader = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeAddress")]
        NodeAddress = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationClaimType")]
        AuthorizationClaimType = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementAlertType")]
        ServiceAgreementAlertType = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Alert")]
        Alert = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeInstance")]
        NodeInstance = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringRecord")]
        MonitoringRecord = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringActivity")]
        MonitoringActivity = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringTransaction")]
        MonitoringTransaction = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"Issuer")]
        Issuer = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointGroup")]
        EndpointGroup = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"Identity")]
        Identity = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageSample")]
        MessageSample = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataSection")]
        MetadataSection = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementMetric")]
        ServiceAgreementMetric = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRuleAssignment")]
        AuthorizationRuleAssignment = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeEntityAlertType")]
        ChangeEntityAlertType = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeFolderAlertType")]
        ChangeFolderAlertType = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"DataSchema")]
        DataSchema = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"Reference")]
        Reference = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"ComponentType")]
        ComponentType = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"Product")]
        Product = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductServiceVersion")]
        ProductServiceVersion = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SecurityRole")]
        SecurityRole = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomAttributeType")]
        CustomAttributeType = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualizationProfile")]
        VirtualizationProfile = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroup")]
        AuthorizationGroup = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroupMember")]
        AuthorizationGroupMember = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringFilterType")]
        MonitoringFilterType = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"Certificate")]
        Certificate = 56,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChangeRecordChangeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Updated")]
        Updated = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
        Deleted = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UserSessionsRequestSortField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"StartDateTime")]
        StartDateTime = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EndDateTime")]
        EndDateTime = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Duration")]
        Duration = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UserFullName")]
        UserFullName = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"IdentityName")]
        IdentityName = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ClientAddress")]
        ClientAddress = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UserSessionsRequestSortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Ascending")]
        Ascending = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Descending")]
        Descending = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UserPermission
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadOnly")]
        ReadOnly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadWrite")]
        ReadWrite = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Administrator")]
        Administrator = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ConsumerUserSearchQueryPermission
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadOnly")]
        ReadOnly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadWrite")]
        ReadWrite = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Administrator")]
        Administrator = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ConsumerUserSearchQuerySortField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FullName")]
        FullName = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ConsumerName")]
        ConsumerName = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Email")]
        Email = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Permission")]
        Permission = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SecurityRoleName")]
        SecurityRoleName = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"IsEnabled")]
        IsEnabled = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ConsumerUserSearchQuerySortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Ascending")]
        Ascending = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Descending")]
        Descending = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AlertTypeIntervalUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Second")]
        Second = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Minute")]
        Minute = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Hour")]
        Hour = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AlertTypesRequestEntityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binding")]
        Binding = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Behavior")]
        Behavior = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceVersion")]
        ServiceVersion = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Contract")]
        Contract = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Operation")]
        Operation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreement")]
        ServiceAgreement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRule")]
        AuthorizationRule = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertSourceType")]
        AlertSourceType = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertType")]
        AlertType = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertGroup")]
        AlertGroup = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandlerType")]
        AlertHandlerType = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandler")]
        AlertHandler = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RouterType")]
        RouterType = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionType")]
        ExpressionType = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Folder")]
        Folder = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Message")]
        Message = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageHeader")]
        MessageHeader = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeAddress")]
        NodeAddress = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationClaimType")]
        AuthorizationClaimType = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementAlertType")]
        ServiceAgreementAlertType = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Alert")]
        Alert = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeInstance")]
        NodeInstance = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringRecord")]
        MonitoringRecord = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringActivity")]
        MonitoringActivity = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringTransaction")]
        MonitoringTransaction = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"Issuer")]
        Issuer = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointGroup")]
        EndpointGroup = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"Identity")]
        Identity = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageSample")]
        MessageSample = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataSection")]
        MetadataSection = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementMetric")]
        ServiceAgreementMetric = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRuleAssignment")]
        AuthorizationRuleAssignment = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeEntityAlertType")]
        ChangeEntityAlertType = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeFolderAlertType")]
        ChangeFolderAlertType = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"DataSchema")]
        DataSchema = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"Reference")]
        Reference = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"ComponentType")]
        ComponentType = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"Product")]
        Product = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductServiceVersion")]
        ProductServiceVersion = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SecurityRole")]
        SecurityRole = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomAttributeType")]
        CustomAttributeType = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualizationProfile")]
        VirtualizationProfile = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroup")]
        AuthorizationGroup = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroupMember")]
        AuthorizationGroupMember = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringFilterType")]
        MonitoringFilterType = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"Certificate")]
        Certificate = 56,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AlertHandlerIntervalUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Second")]
        Second = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Minute")]
        Minute = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Hour")]
        Hour = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChangeEntityAlertTypeEntityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binding")]
        Binding = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Behavior")]
        Behavior = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceVersion")]
        ServiceVersion = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Contract")]
        Contract = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Operation")]
        Operation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreement")]
        ServiceAgreement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRule")]
        AuthorizationRule = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertSourceType")]
        AlertSourceType = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertType")]
        AlertType = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertGroup")]
        AlertGroup = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandlerType")]
        AlertHandlerType = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandler")]
        AlertHandler = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RouterType")]
        RouterType = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionType")]
        ExpressionType = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Folder")]
        Folder = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Message")]
        Message = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageHeader")]
        MessageHeader = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeAddress")]
        NodeAddress = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationClaimType")]
        AuthorizationClaimType = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementAlertType")]
        ServiceAgreementAlertType = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Alert")]
        Alert = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeInstance")]
        NodeInstance = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringRecord")]
        MonitoringRecord = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringActivity")]
        MonitoringActivity = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringTransaction")]
        MonitoringTransaction = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"Issuer")]
        Issuer = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointGroup")]
        EndpointGroup = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"Identity")]
        Identity = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageSample")]
        MessageSample = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataSection")]
        MetadataSection = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementMetric")]
        ServiceAgreementMetric = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRuleAssignment")]
        AuthorizationRuleAssignment = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeEntityAlertType")]
        ChangeEntityAlertType = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeFolderAlertType")]
        ChangeFolderAlertType = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"DataSchema")]
        DataSchema = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"Reference")]
        Reference = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"ComponentType")]
        ComponentType = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"Product")]
        Product = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductServiceVersion")]
        ProductServiceVersion = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SecurityRole")]
        SecurityRole = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomAttributeType")]
        CustomAttributeType = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualizationProfile")]
        VirtualizationProfile = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroup")]
        AuthorizationGroup = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroupMember")]
        AuthorizationGroupMember = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringFilterType")]
        MonitoringFilterType = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"Certificate")]
        Certificate = 56,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EntityTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Binding")]
        Binding = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Behavior")]
        Behavior = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceVersion")]
        ServiceVersion = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Contract")]
        Contract = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Operation")]
        Operation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreement")]
        ServiceAgreement = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRule")]
        AuthorizationRule = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertSourceType")]
        AlertSourceType = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertType")]
        AlertType = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertGroup")]
        AlertGroup = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandlerType")]
        AlertHandlerType = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertHandler")]
        AlertHandler = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RouterType")]
        RouterType = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpressionType")]
        ExpressionType = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Folder")]
        Folder = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Message")]
        Message = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageHeader")]
        MessageHeader = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeAddress")]
        NodeAddress = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationClaimType")]
        AuthorizationClaimType = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementAlertType")]
        ServiceAgreementAlertType = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"Alert")]
        Alert = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"Property")]
        Property = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"NodeInstance")]
        NodeInstance = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringRecord")]
        MonitoringRecord = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringActivity")]
        MonitoringActivity = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringTransaction")]
        MonitoringTransaction = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"Issuer")]
        Issuer = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointGroup")]
        EndpointGroup = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"Identity")]
        Identity = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"MessageSample")]
        MessageSample = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"MetadataSection")]
        MetadataSection = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceAgreementMetric")]
        ServiceAgreementMetric = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationRuleAssignment")]
        AuthorizationRuleAssignment = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeEntityAlertType")]
        ChangeEntityAlertType = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ChangeFolderAlertType")]
        ChangeFolderAlertType = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"DataSchema")]
        DataSchema = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"Reference")]
        Reference = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"ComponentType")]
        ComponentType = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"Product")]
        Product = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"Consumer")]
        Consumer = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"Subscription")]
        Subscription = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"Application")]
        Application = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"ProductServiceVersion")]
        ProductServiceVersion = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"SecurityRole")]
        SecurityRole = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomAttributeType")]
        CustomAttributeType = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualizationProfile")]
        VirtualizationProfile = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroup")]
        AuthorizationGroup = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"AuthorizationGroupMember")]
        AuthorizationGroupMember = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"MonitoringFilterType")]
        MonitoringFilterType = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"Certificate")]
        Certificate = 56,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChangeFolderAlertTypeChangeTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Created")]
        Created = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Updated")]
        Updated = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
        Deleted = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AlertSummaryRequestUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Second")]
        Second = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Minute")]
        Minute = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Hour")]
        Hour = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Year")]
        Year = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AlertRequestSortField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AlertDateTime")]
        AlertDateTime = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertTypeName")]
        AlertTypeName = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AlertSourceTypeName")]
        AlertSourceTypeName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IsObserved")]
        IsObserved = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Description")]
        Description = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AlertRequestSortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Ascending")]
        Ascending = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Descending")]
        Descending = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IdentityKindSummaryKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"X509Certificate")]
        X509Certificate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Windows")]
        Windows = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UserNamePassword")]
        UserNamePassword = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UserPrincipalName")]
        UserPrincipalName = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ServicePrincipalName")]
        ServicePrincipalName = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Digest")]
        Digest = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"UserNamePasswordHash")]
        UserNamePasswordHash = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"WindowsNoPassword")]
        WindowsNoPassword = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AzureCredentials")]
        AzureCredentials = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DnsName")]
        DnsName = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"X509CertificateFederation")]
        X509CertificateFederation = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"WindowsGroup")]
        WindowsGroup = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Claim")]
        Claim = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"X509CertificateThumbprint")]
        X509CertificateThumbprint = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"OAuthClientCredentials")]
        OAuthClientCredentials = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"OAuthServiceCredentials")]
        OAuthServiceCredentials = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceVersionSummaryStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Obsolete")]
        Obsolete = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Retired")]
        Retired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Soap")]
        Soap = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Rest")]
        Rest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenData")]
        OpenData = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceSearchResultKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Soap")]
        Soap = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Rest")]
        Rest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenData")]
        OpenData = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceSearchQueryKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Soap")]
        Soap = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Rest")]
        Rest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenData")]
        OpenData = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BehaviorKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Endpoint")]
        Endpoint = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Service")]
        Service = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContractDefinitionProtectionLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Sign")]
        Sign = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EncryptAndSign")]
        EncryptAndSign = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContractDefinitionSessionMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Allowed")]
        Allowed = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Required")]
        Required = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NotAllowed")]
        NotAllowed = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OperationDefinitionKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Soap")]
        Soap = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Rest")]
        Rest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenData")]
        OpenData = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageDefinitionDirection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Input")]
        Input = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Output")]
        Output = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Fault")]
        Fault = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"GenericFault")]
        GenericFault = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageDefinitionBodyProtectionLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Sign")]
        Sign = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EncryptAndSign")]
        EncryptAndSign = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageDefinitionTemplateMessageVersion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Soap11")]
        Soap11 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Soap12")]
        Soap12 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageHeaderDefinitionProtectionLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Sign")]
        Sign = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EncryptAndSign")]
        EncryptAndSign = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageSettingsUnknownQueryParameterAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PassThrough")]
        PassThrough = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Ignore")]
        Ignore = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Reject")]
        Reject = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageParameterLocation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Path")]
        Path = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Query")]
        Query = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Body")]
        Body = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Form")]
        Form = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Header")]
        Header = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Cookie")]
        Cookie = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageParameterDataType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"String")]
        String = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Number")]
        Number = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Integer")]
        Integer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
        Boolean = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Array")]
        Array = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Complex")]
        Complex = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MessageParameterArrayFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CommaSeparated")]
        CommaSeparated = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SpaceSeparated")]
        SpaceSeparated = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TabSeparated")]
        TabSeparated = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PipeSeparated")]
        PipeSeparated = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Multiple")]
        Multiple = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ParameterDataType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"String")]
        String = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Number")]
        Number = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Integer")]
        Integer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
        Boolean = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Array")]
        Array = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Complex")]
        Complex = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ParameterArrayFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CommaSeparated")]
        CommaSeparated = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SpaceSeparated")]
        SpaceSeparated = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TabSeparated")]
        TabSeparated = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PipeSeparated")]
        PipeSeparated = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Multiple")]
        Multiple = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResponseMessageHeaderDataType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"String")]
        String = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Number")]
        Number = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Integer")]
        Integer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
        Boolean = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Array")]
        Array = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"File")]
        File = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Complex")]
        Complex = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResponseMessageHeaderArrayFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CommaSeparated")]
        CommaSeparated = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SpaceSeparated")]
        SpaceSeparated = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TabSeparated")]
        TabSeparated = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PipeSeparated")]
        PipeSeparated = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Multiple")]
        Multiple = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceVersionStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Obsolete")]
        Obsolete = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Retired")]
        Retired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceVersionImportDetailsStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Obsolete")]
        Obsolete = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Retired")]
        Retired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceVersionUpdateDetailsOptions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ProtectExistingEndpoints")]
        ProtectExistingEndpoints = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceVersionSearchResultKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Soap")]
        Soap = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Rest")]
        Rest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenData")]
        OpenData = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceVersionSearchResultStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Obsolete")]
        Obsolete = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Retired")]
        Retired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceVersionSearchQueryKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Soap")]
        Soap = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Rest")]
        Rest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenData")]
        OpenData = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ServiceVersionSearchQueryStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Obsolete")]
        Obsolete = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Retired")]
        Retired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DataSchemaSchemaType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"XmlSchema")]
        XmlSchema = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"JsonSchema")]
        JsonSchema = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OperationExchangePattern
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Send")]
        Send = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RequestResponse")]
        RequestResponse = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SolicitResponse")]
        SolicitResponse = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Receive")]
        Receive = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OperationProtectionLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Sign")]
        Sign = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EncryptAndSign")]
        EncryptAndSign = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OperationTransactionFlow
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NotAllowed")]
        NotAllowed = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Allowed")]
        Allowed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Mandatory")]
        Mandatory = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EndpointMonType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"N")]
        N = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"A")]
        A = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EndpointRecPoints
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReqT")]
        ReqT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ReqS")]
        ReqS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ResS")]
        ResS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ResT")]
        ResT = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Claims")]
        Claims = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EndpointSummaryKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Soap")]
        Soap = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Rest")]
        Rest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenData")]
        OpenData = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EndpointSummaryAddressKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Physical")]
        Physical = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AzureServiceBus")]
        AzureServiceBus = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EndpointSearchBaseServiceVersionStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Obsolete")]
        Obsolete = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Retired")]
        Retired = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EndpointSearchBaseKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Soap")]
        Soap = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Rest")]
        Rest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OpenData")]
        OpenData = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IdentitySearchResultKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"X509Certificate")]
        X509Certificate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Windows")]
        Windows = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UserNamePassword")]
        UserNamePassword = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UserPrincipalName")]
        UserPrincipalName = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ServicePrincipalName")]
        ServicePrincipalName = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Digest")]
        Digest = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"UserNamePasswordHash")]
        UserNamePasswordHash = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"WindowsNoPassword")]
        WindowsNoPassword = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AzureCredentials")]
        AzureCredentials = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DnsName")]
        DnsName = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"X509CertificateFederation")]
        X509CertificateFederation = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"WindowsGroup")]
        WindowsGroup = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Claim")]
        Claim = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"X509CertificateThumbprint")]
        X509CertificateThumbprint = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"OAuthClientCredentials")]
        OAuthClientCredentials = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"OAuthServiceCredentials")]
        OAuthServiceCredentials = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IdentitySearchQueryKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"X509Certificate")]
        X509Certificate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Windows")]
        Windows = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UserNamePassword")]
        UserNamePassword = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UserPrincipalName")]
        UserPrincipalName = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ServicePrincipalName")]
        ServicePrincipalName = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Digest")]
        Digest = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"UserNamePasswordHash")]
        UserNamePasswordHash = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"WindowsNoPassword")]
        WindowsNoPassword = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"AzureCredentials")]
        AzureCredentials = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DnsName")]
        DnsName = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"X509CertificateFederation")]
        X509CertificateFederation = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"WindowsGroup")]
        WindowsGroup = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Claim")]
        Claim = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"X509CertificateThumbprint")]
        X509CertificateThumbprint = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"OAuthClientCredentials")]
        OAuthClientCredentials = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"OAuthServiceCredentials")]
        OAuthServiceCredentials = 15,

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625