{
  "openapi": "3.0.1",
  "info": {
    "title": "Sentinet Management API",
    "description": "Sentinet Management API",
    "version": "6.5"
  },
  "servers": [
    {
      "url": "https://localhost/sentinet/RepositoryService.svc"
    }
  ],
  "paths": {
    "/CreateOrUpdateOrDeleteCertificatesWithResult": {
      "post": {
        "tags": [
          "Certificate Management Methods"
        ],
        "description": "Creates, updates, or deletes the X.509 certificate records in the provided collection.",
        "operationId": "CreateOrUpdateOrDeleteCertificatesWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Certificate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateServiceAgreementWithResult": {
      "post": {
        "tags": [
          "Service Agreement Management Methods"
        ],
        "description": "Creates new or updates service level agreement and returns its fully populated instance.",
        "operationId": "CreateOrUpdateServiceAgreementWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceAgreementDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAgreementDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/CopyServiceAgreement": {
      "post": {
        "tags": [
          "Service Agreement Management Methods"
        ],
        "description": "Creates new service agreement as a copy of existing one.",
        "operationId": "CopyServiceAgreement",
        "parameters": [
          {
            "name": "serviceAgreementId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CopyServiceAgreementWithResult": {
      "post": {
        "tags": [
          "Service Agreement Management Methods"
        ],
        "description": "Creates new service agreement as a copy of existing one and returns its fully populated instance.",
        "operationId": "CopyServiceAgreementWithResult",
        "parameters": [
          {
            "name": "serviceAgreementId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAgreementDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteServiceAgreement": {
      "delete": {
        "tags": [
          "Service Agreement Management Methods"
        ],
        "description": "Deletes service agreement corresponding to provided database identifier.",
        "operationId": "DeleteServiceAgreement",
        "parameters": [
          {
            "name": "serviceAgreementId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/GetServiceAgreementSummary": {
      "get": {
        "tags": [
          "Service Agreement Management Methods"
        ],
        "description": "Returns summary for the service agreements belonging to the specified folder.",
        "operationId": "GetServiceAgreementSummary",
        "parameters": [
          {
            "name": "folderId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAgreementsSummary"
                }
              }
            }
          }
        }
      }
    },
    "/GetServiceAgreementViolationsSummary": {
      "post": {
        "tags": [
          "Service Agreement Management Methods"
        ],
        "description": "Returns collection of service agreement violation counts aggregated into the requested time intervals for the specified metrics.",
        "operationId": "GetServiceAgreementViolationsSummary",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceAgreementViolationSummaryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceAgreementViolationSummary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetServiceAgreementViolations": {
      "post": {
        "tags": [
          "Service Agreement Management Methods"
        ],
        "description": "Returns collection of service agreement violations satisfying the provided search criteria.",
        "operationId": "GetServiceAgreementViolations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceAgreementViolationsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceAgreementViolation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetServiceAgreementReadingsSummary": {
      "get": {
        "tags": [
          "Service Agreement Management Methods"
        ],
        "description": "Returns collection of service agreement metric readings aggregated by the time intervals of the requested length.",
        "operationId": "GetServiceAgreementReadingsSummary",
        "parameters": [
          {
            "name": "metricIds",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "startDateTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "endDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "timeUnit",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TimeUnit"
            }
          },
          {
            "name": "timeResolution",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetricReadingSummary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetServiceAgreementReadings": {
      "get": {
        "tags": [
          "Service Agreement Management Methods"
        ],
        "description": "Returns collection of service agreement metric readings done during the specified time interval.",
        "operationId": "GetServiceAgreementReadings",
        "parameters": [
          {
            "name": "metricIds",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "startDateTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "endDateTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "StartDateTime",
                "Value"
              ],
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SortOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetricReading"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/FindServiceAgreements": {
      "post": {
        "tags": [
          "Service Agreement Management Methods"
        ],
        "description": "Returns collection of service agreements matching provided search query.",
        "operationId": "FindServiceAgreements",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceAgreementSearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceAgreementSearchResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetStaticResponseConfiguration": {
      "get": {
        "tags": [
          "Message Samples Management Methods"
        ],
        "description": "Returns service version configuration related to providing static responses without making outbound service calls.",
        "operationId": "GetStaticResponseConfiguration",
        "parameters": [
          {
            "name": "serviceVersionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticResponseConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateStaticResponseConfiguration": {
      "post": {
        "tags": [
          "Message Samples Management Methods"
        ],
        "description": "Configures or re-configures a service version with ability to provide static responses to operation requests without making outbound service calls.",
        "operationId": "CreateOrUpdateStaticResponseConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaticResponseConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/CreateOrUpdateStaticResponseConfigurationWithResult": {
      "post": {
        "tags": [
          "Message Samples Management Methods"
        ],
        "description": "Configures or re-configures a service version with ability to provide static responses to operation requests without making outbound service calls.",
        "operationId": "CreateOrUpdateStaticResponseConfigurationWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaticResponseConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticResponseConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/CreateMessageContent": {
      "post": {
        "tags": [
          "Message Samples Management Methods"
        ],
        "description": "Saves provided sample message content to a temporary storage for a limited amount of time and returns file identifier. If content is not referenced by a <see cref=\"MessageSample\"/>, it will be deleted after expiration.",
        "operationId": "CreateMessageContent",
        "parameters": [
          {
            "name": "messageId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "messageVersion",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MessageVersion"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateMessageContentWithResult": {
      "post": {
        "tags": [
          "Message Samples Management Methods"
        ],
        "description": "Generates a sample message content for requested service message.",
        "operationId": "CreateMessageContentWithResult",
        "parameters": [
          {
            "name": "messageId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "messageVersion",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MessageVersion"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        }
      }
    },
    "/GenerateMessageContent": {
      "post": {
        "tags": [
          "Message Samples Management Methods"
        ],
        "description": "Generates a sample message content for requested service message.",
        "operationId": "GenerateMessageContent",
        "parameters": [
          {
            "name": "messageId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageGenerationSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageContent"
                }
              }
            }
          }
        }
      }
    },
    "/GenerateMessageSchema": {
      "get": {
        "tags": [
          "Message Samples Management Methods"
        ],
        "description": "Generates XSD schema for requested service message. This method can only be called for strongly-typed request or response messages (SOAP, no faults).",
        "operationId": "GenerateMessageSchema",
        "parameters": [
          {
            "name": "messageId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSchema"
                }
              }
            }
          }
        }
      }
    },
    "/DeserializeMessagePipeline": {
      "post": {
        "tags": [
          "Message Processing Methods"
        ],
        "description": "Deserializes and returns the message processing pipeline from provided XML string.",
        "operationId": "DeserializeMessagePipeline",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagePipeline"
                }
              }
            }
          }
        }
      }
    },
    "/SerializeMessagePipeline": {
      "post": {
        "tags": [
          "Message Processing Methods"
        ],
        "description": "Serializes provided message processing pipeline to XML string.",
        "operationId": "SerializeMessagePipeline",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessagePipeline"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/GetDependencies": {
      "post": {
        "tags": [
          "Import/Export Methods"
        ],
        "description": "Returns the cross-dependency map for the specified entities together with entities they depend on.",
        "operationId": "GetDependencies",
        "parameters": [
          {
            "name": "includeDeclarative",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "maxDownLevels",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxUpLevels",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LocalIdentifier"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DependencyPackage"
                }
              }
            }
          }
        }
      }
    },
    "/ExportEntities": {
      "post": {
        "tags": [
          "Import/Export Methods"
        ],
        "description": "Exports specified entities into an XML file and returns it serialized to byte array.",
        "operationId": "ExportEntities",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LocalIdentifier"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/ExportEntitiesToStream": {
      "post": {
        "tags": [
          "Import/Export Methods"
        ],
        "description": "Exports specified entities into an XML file and returns it serialized to a stream.",
        "operationId": "ExportEntitiesToStream",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LocalIdentifier"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stream"
                }
              }
            }
          }
        }
      }
    },
    "/ImportRepositoryPackage": {
      "post": {
        "tags": [
          "Import/Export Methods"
        ],
        "description": "Uploads provided repository package and stores it in the service session storage.",
        "operationId": "ImportRepositoryPackage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryPackageInfo"
                }
              }
            }
          }
        }
      }
    },
    "/ImportRepositoryPackageFromStream": {
      "post": {
        "tags": [
          "Import/Export Methods"
        ],
        "description": "Uploads provided repository package and stores it in the service session storage.",
        "operationId": "ImportRepositoryPackageFromStream",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Stream"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryPackageInfo"
                }
              }
            }
          }
        }
      }
    },
    "/ImportEntities": {
      "post": {
        "tags": [
          "Import/Export Methods"
        ],
        "description": "Imports specified entities from a repository import package stored in the service session storage into the local repository.",
        "operationId": "ImportEntities",
        "parameters": [
          {
            "name": "fileId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "verifyOnly",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LocalIdentifier"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ImportEntitiesFromPackage": {
      "post": {
        "tags": [
          "Import/Export Methods"
        ],
        "description": "Imports specified entities from a repository import package stored in the service session storage into the local repository.",
        "operationId": "ImportEntitiesFromPackage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepositoryPackageImportParameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/FindEntity": {
      "get": {
        "tags": [
          "Import/Export Methods"
        ],
        "description": "Returns the entity of the specified type and having the provided identifier.",
        "operationId": "FindEntity",
        "parameters": [
          {
            "name": "entityId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entityType",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResult"
                }
              }
            }
          }
        }
      }
    },
    "/FindEntities": {
      "post": {
        "tags": [
          "Import/Export Methods"
        ],
        "description": "Returns collection of entities corresponding to provided unique keys.",
        "operationId": "FindEntities",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetSystemInfo": {
      "get": {
        "tags": [
          "Utility Methods"
        ],
        "description": "Returns security-related information about currently logged user as well as current application configuration settings.",
        "operationId": "GetSystemInfo",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemInfo"
                }
              }
            }
          }
        }
      }
    },
    "/GetCertificateInfo": {
      "post": {
        "tags": [
          "Utility Methods"
        ],
        "description": "Returns basic information about provided X.509 certificate.",
        "operationId": "GetCertificateInfo",
        "parameters": [
          {
            "name": "password",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateInfo"
                }
              }
            }
          }
        }
      }
    },
    "/GetCertificateAuthorities": {
      "get": {
        "tags": [
          "Utility Methods"
        ],
        "description": "Returns X.509 certificates belonging to Certificate Authorities that have to be trusted by service providers and consumers.",
        "operationId": "GetCertificateAuthorities",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CertificateInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/CreateCertificate": {
      "get": {
        "tags": [
          "Utility Methods"
        ],
        "description": "Create new X.509 certificate issued by Repository Certificate Authority.",
        "operationId": "CreateCertificate",
        "parameters": [
          {
            "name": "subjectName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateInfo"
                }
              }
            }
          }
        }
      }
    },
    "/CreatePfxCertificate": {
      "get": {
        "tags": [
          "Utility Methods"
        ],
        "description": "Create new X.509 certificate issued by Repository Certificate Authority.",
        "operationId": "CreatePfxCertificate",
        "parameters": [
          {
            "name": "subjectName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "validDays",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateInfo"
                }
              }
            }
          }
        }
      }
    },
    "/SignCertificateRequest": {
      "post": {
        "tags": [
          "Utility Methods"
        ],
        "description": "Signs provided X.509 certificate signing request (CSR) using Repository Certificate Authority certificate.",
        "operationId": "SignCertificateRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/GetSystemTimeZones": {
      "get": {
        "tags": [
          "Utility Methods"
        ],
        "description": "Returns collection of all time zones known by the server.",
        "operationId": "GetSystemTimeZones",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeZoneInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetDefaultNodeConfiguration": {
      "get": {
        "tags": [
          "Utility Methods"
        ],
        "description": "Returns default web.config file for a node's application folder.",
        "operationId": "GetDefaultNodeConfiguration",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/GenerateSecret": {
      "get": {
        "tags": [
          "Utility Methods"
        ],
        "description": "Randomly generates a secret of the specified length.",
        "operationId": "GenerateSecret",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": true,
            "schema": {
              "enum": [
                "Password",
                "Binary",
                "Token",
                "Captcha"
              ],
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "length",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/MatchRelativeUri": {
      "get": {
        "tags": [
          "Utility Methods"
        ],
        "description": "Tests provided URI matching template with the specified relative URI. If match succeeds, the result can be optionally used to construct another URI with the specified URI binding template.",
        "operationId": "MatchRelativeUri",
        "parameters": [
          {
            "name": "uri",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "match",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "bind",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchRelativeUriResult"
                }
              }
            }
          }
        }
      }
    },
    "/RenderLiquidTemplate": {
      "post": {
        "tags": [
          "Utility Methods"
        ],
        "description": "Tests the provided Liquid template by rendering it with the specified content.",
        "operationId": "RenderLiquidTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LiquidTemplateParameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CompileCode": {
      "post": {
        "tags": [
          "Utility Methods"
        ],
        "description": "Tests the provided C# code by compiling it into a message processing component.",
        "operationId": "CompileCode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeCompilationParameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/LogOn": {
      "post": {
        "tags": [
          "Utility Methods"
        ],
        "description": "Provides ability to authenticate user and issue authentication cookie to be used with ASP.NET Forms Authentication.",
        "operationId": "LogOn",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogOnCredentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/GetLogOnToken": {
      "post": {
        "tags": [
          "Utility Methods"
        ],
        "description": "Provides ability to authenticate the user and issue the authentication token to be used with ASP.NET Forms Authentication.",
        "operationId": "GetLogOnToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogOnCredentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateProduct": {
      "post": {
        "tags": [
          "Product Management Methods"
        ],
        "description": "Creates new or updates existing product in the database and returns its database identifier.",
        "operationId": "CreateOrUpdateProduct",
        "parameters": [
          {
            "name": "changeAccessKeyRequirements",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateProductWithResult": {
      "post": {
        "tags": [
          "Product Management Methods"
        ],
        "description": "Creates new or updates existing product in the database and returns its fully populated instance.",
        "operationId": "CreateOrUpdateProductWithResult",
        "parameters": [
          {
            "name": "changeAccessKeyRequirements",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/GetProduct": {
      "get": {
        "tags": [
          "Product Management Methods"
        ],
        "description": "Returns the product corresponding to provided identifier.",
        "operationId": "GetProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteProduct": {
      "delete": {
        "tags": [
          "Product Management Methods"
        ],
        "description": "Deletes product corresponding to provided identifier from the database.",
        "operationId": "DeleteProduct",
        "parameters": [
          {
            "name": "productId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/FindProducts": {
      "post": {
        "tags": [
          "Product Management Methods"
        ],
        "description": "Returns products matching the provided search criteria. Product description field is NOT populated.",
        "operationId": "FindProducts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductSearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateConsumer": {
      "post": {
        "tags": [
          "Consumer Management Methods"
        ],
        "description": "Creates new or updates existing consumer in the database and returns its database identifier.",
        "operationId": "CreateOrUpdateConsumer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Consumer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateConsumerWithResult": {
      "post": {
        "tags": [
          "Consumer Management Methods"
        ],
        "description": "Creates new or updates existing consumer in the database and returns its fully populated instance.",
        "operationId": "CreateOrUpdateConsumerWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Consumer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Consumer"
                }
              }
            }
          }
        }
      }
    },
    "/GetConsumer": {
      "get": {
        "tags": [
          "Consumer Management Methods"
        ],
        "description": "Returns the consumer corresponding to provided identifier.",
        "operationId": "GetConsumer",
        "parameters": [
          {
            "name": "consumerId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Consumer"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteConsumer": {
      "delete": {
        "tags": [
          "Consumer Management Methods"
        ],
        "description": "Deletes consumer corresponding to provided identifier from the database.",
        "operationId": "DeleteConsumer",
        "parameters": [
          {
            "name": "consumerId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/FindConsumers": {
      "post": {
        "tags": [
          "Consumer Management Methods"
        ],
        "description": "Returns consumers matching the provided search criteria. Consumer description field is NOT populated.",
        "operationId": "FindConsumers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsumerSearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Consumer"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateSubscription": {
      "post": {
        "tags": [
          "Subscription Management Methods"
        ],
        "description": "Creates new or updates existing subscription in the database and returns its database identifier.",
        "operationId": "CreateOrUpdateSubscription",
        "parameters": [
          {
            "name": "allowToGenerateUniqueName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateSubscriptionWithResult": {
      "post": {
        "tags": [
          "Subscription Management Methods"
        ],
        "description": "Creates new or updates existing subscription in the database and returns its fully populated instance.",
        "operationId": "CreateOrUpdateSubscriptionWithResult",
        "parameters": [
          {
            "name": "allowToGenerateUniqueName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/GetSubscription": {
      "get": {
        "tags": [
          "Subscription Management Methods"
        ],
        "description": "Returns the subscription corresponding to provided identifier.",
        "operationId": "GetSubscription",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteSubscription": {
      "delete": {
        "tags": [
          "Subscription Management Methods"
        ],
        "description": "Deletes subscription corresponding to provided identifier from the database.",
        "operationId": "DeleteSubscription",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/FindSubscriptions": {
      "post": {
        "tags": [
          "Subscription Management Methods"
        ],
        "description": "Returns collection of subscriptions matching the provided search criteria.",
        "operationId": "FindSubscriptions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionSearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subscription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetSubscriptionsCount": {
      "get": {
        "tags": [
          "Subscription Management Methods"
        ],
        "description": "Returns the number of subscriptions with the requested <see cref=\"SubscriptionStatus\"/>. This is a lightweight operation that can be used for polling.",
        "operationId": "GetSubscriptionsCount",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/FindApplications": {
      "post": {
        "tags": [
          "Application Management Methods"
        ],
        "description": "Returns applications matching the provided search criteria.",
        "operationId": "FindApplications",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationSearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Application"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetPortalSummary": {
      "get": {
        "tags": [
          "Developer Portal Management Methods"
        ],
        "description": "Returns Developer Portal summary.",
        "operationId": "GetPortalSummary",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalSummary"
                }
              }
            }
          }
        }
      }
    },
    "/DeserializePolicy": {
      "post": {
        "tags": [
          "Policy Management Methods"
        ],
        "description": "When implemented by a class, deserializes policy description from the provided XML configuration.",
        "operationId": "DeserializePolicy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyDescription"
                }
              }
            }
          }
        }
      }
    },
    "/SerializePolicy": {
      "post": {
        "tags": [
          "Policy Management Methods"
        ],
        "description": "Serializes the specified policy description as XML configuration string.",
        "operationId": "SerializePolicy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyDescription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateSecurityRole": {
      "post": {
        "tags": [
          "Security Role Management Methods"
        ],
        "description": "Creates new or updates existing security role in the database and returns its database identifier.",
        "operationId": "CreateOrUpdateSecurityRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecurityRole"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateSecurityRoleWithResult": {
      "post": {
        "tags": [
          "Security Role Management Methods"
        ],
        "description": "Creates new or updates existing security role in the database and returns its fully populated instance.",
        "operationId": "CreateOrUpdateSecurityRoleWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecurityRole"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityRole"
                }
              }
            }
          }
        }
      }
    },
    "/GetSecurityRole": {
      "get": {
        "tags": [
          "Security Role Management Methods"
        ],
        "description": "Returns security role corresponding to provided identifier.",
        "operationId": "GetSecurityRole",
        "parameters": [
          {
            "name": "securityRoleId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityRole"
                }
              }
            }
          }
        }
      }
    },
    "/GetSecurityRoles": {
      "get": {
        "tags": [
          "Security Role Management Methods"
        ],
        "description": "Returns collection of all security roles in the system.",
        "operationId": "GetSecurityRoles",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SecurityRole"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetSecurityRoleNames": {
      "get": {
        "tags": [
          "Security Role Management Methods"
        ],
        "description": "Returns collection of all security role names.",
        "operationId": "GetSecurityRoleNames",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subtree"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/DeleteSecurityRole": {
      "delete": {
        "tags": [
          "Security Role Management Methods"
        ],
        "description": "Deletes security role corresponding to provided identifier from the database.",
        "operationId": "DeleteSecurityRole",
        "parameters": [
          {
            "name": "securityRoleId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/CreateOrUpdateOrDeleteSecurityRolesWithResult": {
      "post": {
        "tags": [
          "Security Role Management Methods"
        ],
        "description": "Creates, updates, or deletes the security roles in the provided collection. System security roles cannot be updated and shall not be submitted. The most current security roles are returned.",
        "operationId": "CreateOrUpdateOrDeleteSecurityRolesWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SecurityRole"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SecurityRole"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateOrDeleteSecurityRoles": {
      "post": {
        "tags": [
          "Security Role Management Methods"
        ],
        "description": "Creates, updates, or deletes the security roles in the provided collection. System security roles cannot be updated and shall not be submitted.",
        "operationId": "CreateOrUpdateOrDeleteSecurityRoles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SecurityRole"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/GetCustomAttributeTypes": {
      "get": {
        "tags": [
          "Custom Attributes Management Methods"
        ],
        "description": "Returns custom attribute types defined for the specified entity type.",
        "operationId": "GetCustomAttributeTypes",
        "parameters": [
          {
            "name": "entityType",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomAttributeType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateOrDeleteCustomAttributeTypes": {
      "post": {
        "tags": [
          "Custom Attributes Management Methods"
        ],
        "description": "Creates, updates, or deletes the custom attribute types for the specified entity type.",
        "operationId": "CreateOrUpdateOrDeleteCustomAttributeTypes",
        "parameters": [
          {
            "name": "entityType",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityType"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomAttributeType"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/CreateOrUpdateOrDeleteCustomAttributeTypesWithResult": {
      "post": {
        "tags": [
          "Custom Attributes Management Methods"
        ],
        "description": "Creates, updates, or deletes the custom attribute types for the specified entity type. The most current types are returned.",
        "operationId": "CreateOrUpdateOrDeleteCustomAttributeTypesWithResult",
        "parameters": [
          {
            "name": "entityType",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityType"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomAttributeType"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomAttributeType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetVirtualizationProfiles": {
      "get": {
        "tags": [
          "Virtualization Profiles Management Methods"
        ],
        "description": "When implemented by a class, gets the collection of configured virtualization profiles.",
        "operationId": "GetVirtualizationProfiles",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VirtualizationProfile"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetVirtualizationProfile": {
      "get": {
        "tags": [
          "Virtualization Profiles Management Methods"
        ],
        "description": "When implemented by a class, gets the virtualization profile details.",
        "operationId": "GetVirtualizationProfile",
        "parameters": [
          {
            "name": "profileId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualizationProfile"
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateVirtualizationProfile": {
      "post": {
        "tags": [
          "Virtualization Profiles Management Methods"
        ],
        "description": "When implemented by a class, creates a new or updates an existing virtualization profile and returns its database identifier.",
        "operationId": "CreateOrUpdateVirtualizationProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VirtualizationProfile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateVirtualizationProfileWithResult": {
      "post": {
        "tags": [
          "Virtualization Profiles Management Methods"
        ],
        "description": "When implemented by a class, creates a new or updates an existing virtualization profile and returns its fully populated instance.",
        "operationId": "CreateOrUpdateVirtualizationProfileWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VirtualizationProfile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VirtualizationProfile"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteVirtualizationProfile": {
      "delete": {
        "tags": [
          "Virtualization Profiles Management Methods"
        ],
        "description": "When implemented by a class, deletes the specified virtualization profile from the database.",
        "operationId": "DeleteVirtualizationProfile",
        "parameters": [
          {
            "name": "profileId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/CreateOrUpdateCertificate": {
      "post": {
        "tags": [
          "Certificate Management Methods"
        ],
        "description": "Creates new or updates an existing X.509 certificate record in the database and returns its database identifier.",
        "operationId": "CreateOrUpdateCertificate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Certificate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateCertificateWithResult": {
      "post": {
        "tags": [
          "Certificate Management Methods"
        ],
        "description": "Creates new or updates an existing X.509 certificate record in the database and returns its fully populated instance.",
        "operationId": "CreateOrUpdateCertificateWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Certificate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            }
          }
        }
      }
    },
    "/GetCertificate": {
      "get": {
        "tags": [
          "Certificate Management Methods"
        ],
        "description": "Returns basic information about provided X.509 certificate.",
        "operationId": "GetCertificate",
        "parameters": [
          {
            "name": "certificateId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteCertificate": {
      "delete": {
        "tags": [
          "Certificate Management Methods"
        ],
        "description": "Deletes X.509 certificate record corresponding to provided identifier from the database.",
        "operationId": "DeleteCertificate",
        "parameters": [
          {
            "name": "certificateId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/GetCertificates": {
      "get": {
        "tags": [
          "Certificate Management Methods"
        ],
        "description": "Returns collection of all X.509 certificate records in the system.",
        "operationId": "GetCertificates",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Certificate"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateOrDeleteCertificates": {
      "post": {
        "tags": [
          "Certificate Management Methods"
        ],
        "description": "Creates, updates, or deletes the X.509 certificate records in the provided collection.",
        "operationId": "CreateOrUpdateOrDeleteCertificates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Certificate"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/FindBehaviors": {
      "post": {
        "tags": [
          "Behavior Management Methods"
        ],
        "description": "Returns collection of public service and endpoint behaviors matching provided search query.",
        "operationId": "FindBehaviors",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BehaviorSearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BehaviorSearchResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateNode": {
      "post": {
        "tags": [
          "Node Management Methods"
        ],
        "description": "Creates or update a node and all underlying entities from provided hierarchy of definition objects and returns its database identifier.",
        "operationId": "CreateOrUpdateNode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateNodeWithResult": {
      "post": {
        "tags": [
          "Node Management Methods"
        ],
        "description": "Creates or update a node and all underlying entities from provided hierarchy of definition objects and returns its fully populated instance.",
        "operationId": "CreateOrUpdateNodeWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/GetNode": {
      "get": {
        "tags": [
          "Node Management Methods"
        ],
        "description": "Returns the node corresponding to provided identifier with its underlying objects.",
        "operationId": "GetNode",
        "parameters": [
          {
            "name": "nodeId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/GetNodeByKey": {
      "get": {
        "tags": [
          "Node Management Methods"
        ],
        "description": "Returns the node corresponding to provided key with its underlying objects.",
        "operationId": "GetNodeByKey",
        "parameters": [
          {
            "name": "nodeKey",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteNode": {
      "delete": {
        "tags": [
          "Node Management Methods"
        ],
        "description": "Deletes node corresponding to provided identifier from the database.",
        "operationId": "DeleteNode",
        "parameters": [
          {
            "name": "nodeId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "forceDelete",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/GetNodesSummary": {
      "get": {
        "tags": [
          "Node Management Methods"
        ],
        "description": "Returns summary for the nodes belonging to the specified folder.",
        "operationId": "GetNodesSummary",
        "parameters": [
          {
            "name": "folderId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesSummary"
                }
              }
            }
          }
        }
      }
    },
    "/FindNodes": {
      "post": {
        "tags": [
          "Node Management Methods"
        ],
        "description": "Returns collection of nodes matching provided search query.",
        "operationId": "FindNodes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeSearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateRouterType": {
      "post": {
        "tags": [
          "Router Type Management Methods"
        ],
        "description": "Creates new or updates existing outbound message router type in the database and returns its unique identifier.",
        "operationId": "CreateOrUpdateRouterType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouterType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateRouterTypeWithResult": {
      "post": {
        "tags": [
          "Router Type Management Methods"
        ],
        "description": "Creates new or updates existing outbound message router type in the database and returns its fully populated instance.",
        "operationId": "CreateOrUpdateRouterTypeWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouterType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouterType"
                }
              }
            }
          }
        }
      }
    },
    "/GetRouterType": {
      "get": {
        "tags": [
          "Router Type Management Methods"
        ],
        "description": "Returns outbound message router type corresponding to provided identifier.",
        "operationId": "GetRouterType",
        "parameters": [
          {
            "name": "routerTypeId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouterType"
                }
              }
            }
          }
        }
      }
    },
    "/GetRouterTypes": {
      "get": {
        "tags": [
          "Router Type Management Methods"
        ],
        "description": "Returns collection of all outbound message router types in the system.",
        "operationId": "GetRouterTypes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RouterType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/DeleteRouterType": {
      "delete": {
        "tags": [
          "Router Type Management Methods"
        ],
        "description": "Deletes outbound message router type corresponding to provided identifier from the database.",
        "operationId": "DeleteRouterType",
        "parameters": [
          {
            "name": "routerTypeId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/CreateOrUpdateExpressionType": {
      "post": {
        "tags": [
          "Expression Type Management Methods"
        ],
        "description": "Creates new or updates existing custom message evaluating expression type in the database and returns its database identifier.",
        "operationId": "CreateOrUpdateExpressionType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressionType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateExpressionTypeWithResult": {
      "post": {
        "tags": [
          "Expression Type Management Methods"
        ],
        "description": "Creates new or updates existing custom message evaluating expression type in the database and returns its fully populated instance.",
        "operationId": "CreateOrUpdateExpressionTypeWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressionType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressionType"
                }
              }
            }
          }
        }
      }
    },
    "/GetExpressionType": {
      "get": {
        "tags": [
          "Expression Type Management Methods"
        ],
        "description": "Returns custom message evaluating expression type corresponding to the provided identifier.",
        "operationId": "GetExpressionType",
        "parameters": [
          {
            "name": "expressionTypeId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressionType"
                }
              }
            }
          }
        }
      }
    },
    "/GetExpressionTypes": {
      "get": {
        "tags": [
          "Expression Type Management Methods"
        ],
        "description": "Returns collection of all custom message evaluating expression types in the system.",
        "operationId": "GetExpressionTypes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExpressionType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/DeleteExpressionType": {
      "delete": {
        "tags": [
          "Expression Type Management Methods"
        ],
        "description": "Deletes custom message evaluating expression type corresponding to provided identifier from the database.",
        "operationId": "DeleteExpressionType",
        "parameters": [
          {
            "name": "expressionTypeId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/CreateOrUpdateComponentType": {
      "post": {
        "tags": [
          "Component Type Management Methods"
        ],
        "description": "Creates new or updates existing custom message processing component type in the database and returns its database identifier.",
        "operationId": "CreateOrUpdateComponentType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComponentType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateComponentTypeWithResult": {
      "post": {
        "tags": [
          "Component Type Management Methods"
        ],
        "description": "Creates new or updates existing custom message processing component type in the database and returns its fully populated instance.",
        "operationId": "CreateOrUpdateComponentTypeWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComponentType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentType"
                }
              }
            }
          }
        }
      }
    },
    "/GetComponentType": {
      "get": {
        "tags": [
          "Component Type Management Methods"
        ],
        "description": "Returns custom message processing component type corresponding to the provided identifier.",
        "operationId": "GetComponentType",
        "parameters": [
          {
            "name": "componentTypeId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentType"
                }
              }
            }
          }
        }
      }
    },
    "/GetComponentTypes": {
      "get": {
        "tags": [
          "Component Type Management Methods"
        ],
        "description": "Returns collection of all custom message processing component types in the system.",
        "operationId": "GetComponentTypes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComponentType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/DeleteComponentType": {
      "delete": {
        "tags": [
          "Component Type Management Methods"
        ],
        "description": "Deletes custom message processing component type corresponding to provided identifier from the database.",
        "operationId": "DeleteComponentType",
        "parameters": [
          {
            "name": "componentTypeId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ImportMetadata": {
      "get": {
        "tags": [
          "Metadata Management Methods"
        ],
        "description": "Retrieves service metadata using HTTP GET method on provided metadata URL, persists downloaded service metadata in the session store, parses it, and returns details about the containing services, contracts, and endpoints.",
        "operationId": "ImportMetadata",
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "userName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "domain",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "serializer",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Serializer"
            }
          },
          {
            "name": "transformToDocumentStyle",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataInfo"
                }
              }
            }
          }
        }
      }
    },
    "/ImportMetadataFromMexEndpoint": {
      "post": {
        "tags": [
          "Metadata Management Methods"
        ],
        "description": "Retrieves service metadata from provided Metadata Exchange endpoint, persists downloaded service metadata in the session store, parses it, and returns details about the containing services, contracts, and endpoints.",
        "operationId": "ImportMetadataFromMexEndpoint",
        "parameters": [
          {
            "name": "serializer",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Serializer"
            }
          },
          {
            "name": "transformToDocumentStyle",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientEndpointConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataInfo"
                }
              }
            }
          }
        }
      }
    },
    "/ImportMetadataFromString": {
      "post": {
        "tags": [
          "Metadata Management Methods"
        ],
        "description": "Reads service metadata from a string representing metadata set, persists it in the session store, parses it, and returns details about the containing services, contracts, and endpoints.",
        "operationId": "ImportMetadataFromString",
        "parameters": [
          {
            "name": "serializer",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Serializer"
            }
          },
          {
            "name": "transformToDocumentStyle",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataInfo"
                }
              }
            }
          }
        }
      }
    },
    "/ImportMetadataFromFiles": {
      "post": {
        "tags": [
          "Metadata Management Methods"
        ],
        "description": "Creates service metadata from provided collection of WSDL documents and XML schemas, persists metadata in the session store, parses it, and returns details about the containing services, contracts, and endpoints.",
        "operationId": "ImportMetadataFromFiles",
        "parameters": [
          {
            "name": "serializer",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Serializer"
            }
          },
          {
            "name": "transformToDocumentStyle",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataInfo"
                }
              }
            }
          }
        }
      }
    },
    "/ImportSwagger": {
      "get": {
        "tags": [
          "Metadata Management Methods"
        ],
        "description": "Retrieves Swagger document from provided URL, persists it in the session store, parses it, and returns details about the containing operations and endpoints.",
        "operationId": "ImportSwagger",
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "userName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "domain",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestMetadataInfo"
                }
              }
            }
          }
        }
      }
    },
    "/ImportSwaggerFromString": {
      "post": {
        "tags": [
          "Metadata Management Methods"
        ],
        "description": "Persists provided Swagger document in the session store, parses it, and returns details about the containing operations and endpoints.",
        "operationId": "ImportSwaggerFromString",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestMetadataInfo"
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateAuthorizationRule": {
      "post": {
        "tags": [
          "Authorization Rule Management Methods"
        ],
        "description": "Creates new or updates existing authorization rule in the database and returns its database identifier.",
        "operationId": "CreateOrUpdateAuthorizationRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizationRuleDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateAuthorizationRuleWithResult": {
      "post": {
        "tags": [
          "Authorization Rule Management Methods"
        ],
        "description": "Creates new or updates existing authorization rule in the database and returns its fully populated instance.",
        "operationId": "CreateOrUpdateAuthorizationRuleWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizationRuleDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationRuleDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/GetAuthorizationRule": {
      "get": {
        "tags": [
          "Authorization Rule Management Methods"
        ],
        "description": "Returns authorization rule corresponding to provided identifier.",
        "operationId": "GetAuthorizationRule",
        "parameters": [
          {
            "name": "ruleId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationRuleDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteAuthorizationRule": {
      "delete": {
        "tags": [
          "Authorization Rule Management Methods"
        ],
        "description": "Deletes authorization rule corresponding to provided identifier from the database.",
        "operationId": "DeleteAuthorizationRule",
        "parameters": [
          {
            "name": "ruleId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/CreateOrUpdateAuthorizationRuleAssignments": {
      "post": {
        "tags": [
          "Authorization Rule Management Methods"
        ],
        "description": "Creates, updates, or deletes authorization rule assignments for the specified service version.",
        "operationId": "CreateOrUpdateAuthorizationRuleAssignments",
        "parameters": [
          {
            "name": "serviceVersionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthorizationRuleAssignment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/CreateOrUpdateAuthorizationRuleAssignmentsWithResult": {
      "post": {
        "tags": [
          "Authorization Rule Management Methods"
        ],
        "description": "Creates, updates, or deletes authorization rule assignments for the specified service version.",
        "operationId": "CreateOrUpdateAuthorizationRuleAssignmentsWithResult",
        "parameters": [
          {
            "name": "serviceVersionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AuthorizationRuleAssignment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthorizationRuleAssignment"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetAuthorizationRuleAssignments": {
      "get": {
        "tags": [
          "Authorization Rule Management Methods"
        ],
        "description": "Returns collection of authorization rule assignments attached to the specified service version.",
        "operationId": "GetAuthorizationRuleAssignments",
        "parameters": [
          {
            "name": "serviceVersionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthorizationRuleAssignment"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/DownloadAuthorizationRuleAssignmentsReport": {
      "get": {
        "tags": [
          "Authorization Rule Management Methods"
        ],
        "description": "Returns the Microsoft Excel Open XML report file containing collection of access rules assigned to the specified service version.",
        "operationId": "DownloadAuthorizationRuleAssignmentsReport",
        "parameters": [
          {
            "name": "serviceVersionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/GetAuthorizationClaimTypes": {
      "get": {
        "tags": [
          "Authorization Rule Management Methods"
        ],
        "description": "Returns collection of well-known claim types sorted by claim type definition string.",
        "operationId": "GetAuthorizationClaimTypes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthorizationClaimType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetAuthorizationRulesSummary": {
      "get": {
        "tags": [
          "Authorization Rule Management Methods"
        ],
        "description": "Returns summary for the authorization rules belonging to the specified folder.",
        "operationId": "GetAuthorizationRulesSummary",
        "parameters": [
          {
            "name": "folderId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationRulesSummary"
                }
              }
            }
          }
        }
      }
    },
    "/DeserializeAuthorizationExpression": {
      "post": {
        "tags": [
          "Authorization Rule Management Methods"
        ],
        "description": "Deserializes and returns an authorization expression tree from provided XML string.",
        "operationId": "DeserializeAuthorizationExpression",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationExpressionBase"
                }
              }
            }
          }
        }
      }
    },
    "/SerializeAuthorizationExpression": {
      "post": {
        "tags": [
          "Authorization Rule Management Methods"
        ],
        "description": "Serializes provided authorization expression tree to XML string.",
        "operationId": "SerializeAuthorizationExpression",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizationExpressionBase"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/FindAuthorizationRules": {
      "post": {
        "tags": [
          "Authorization Rule Management Methods"
        ],
        "description": "Returns collection of authorization rules matching provided search query.",
        "operationId": "FindAuthorizationRules",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizationRuleSearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthorizationRuleSearchResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateAuthorizationGroup": {
      "post": {
        "tags": [
          "Authorization Group Management Methods"
        ],
        "description": "Creates new or updates existing authorization group in the database and returns its database identifier.",
        "operationId": "CreateOrUpdateAuthorizationGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizationGroupDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateAuthorizationGroupWithResult": {
      "post": {
        "tags": [
          "Authorization Group Management Methods"
        ],
        "description": "Creates new or updates existing authorization group in the database and returns its fully populated instance.",
        "operationId": "CreateOrUpdateAuthorizationGroupWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizationGroupDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationGroupDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/GetAuthorizationGroup": {
      "get": {
        "tags": [
          "Authorization Group Management Methods"
        ],
        "description": "Returns authorization group corresponding to provided identifier.",
        "operationId": "GetAuthorizationGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationGroupDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteAuthorizationGroup": {
      "delete": {
        "tags": [
          "Authorization Group Management Methods"
        ],
        "description": "Deletes authorization group corresponding to provided identifier from the database.",
        "operationId": "DeleteAuthorizationGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/GetAuthorizationGroupsSummary": {
      "get": {
        "tags": [
          "Authorization Group Management Methods"
        ],
        "description": "Returns summary for the authorization groups belonging to the specified folder.",
        "operationId": "GetAuthorizationGroupsSummary",
        "parameters": [
          {
            "name": "folderId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationGroupsSummary"
                }
              }
            }
          }
        }
      }
    },
    "/FindAuthorizationGroups": {
      "post": {
        "tags": [
          "Authorization Group Management Methods"
        ],
        "description": "Returns collection of authorization groups matching provided search query.",
        "operationId": "FindAuthorizationGroups",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizationGroupSearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthorizationGroupSearchResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetCustomEntity": {
      "get": {
        "tags": [
          "Custom Entity Management Methods"
        ],
        "description": "Returns custom entity corresponding to provided identifier.",
        "operationId": "GetCustomEntity",
        "parameters": [
          {
            "name": "entityId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateCustomEntity": {
      "post": {
        "tags": [
          "Custom Entity Management Methods"
        ],
        "description": "Creates new or updates existing custom entity in the database and returns its database identifier.",
        "operationId": "CreateOrUpdateCustomEntity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEntityDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateCustomEntityWithResult": {
      "post": {
        "tags": [
          "Custom Entity Management Methods"
        ],
        "description": "Creates new or updates existing custom entity in the database and returns its fully populated instance.",
        "operationId": "CreateOrUpdateCustomEntityWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEntityDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntityDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteCustomEntity": {
      "delete": {
        "tags": [
          "Custom Entity Management Methods"
        ],
        "description": "Deletes custom entity corresponding to provided identifier from the database.",
        "operationId": "DeleteCustomEntity",
        "parameters": [
          {
            "name": "entityId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/GetCustomEntitiesSummary": {
      "get": {
        "tags": [
          "Custom Entity Management Methods"
        ],
        "description": "Returns summary for the custom entities belonging to the specified folder.",
        "operationId": "GetCustomEntitiesSummary",
        "parameters": [
          {
            "name": "folderId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntitiesSummary"
                }
              }
            }
          }
        }
      }
    },
    "/FindCustomEntities": {
      "post": {
        "tags": [
          "Custom Entity Management Methods"
        ],
        "description": "Returns collection of custom entity descriptions matching provided search query.",
        "operationId": "FindCustomEntities",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEntitySearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetExtensibilityTypes": {
      "get": {
        "tags": [
          "Extensibility Types Management Methods"
        ],
        "description": "Returns all custom types that can be used in Sentinet extensibility points.",
        "operationId": "GetExtensibilityTypes",
        "parameters": [
          {
            "name": "includeSystemTypes",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensibilityTypes"
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateOrDeleteExtensibilityTypes": {
      "post": {
        "tags": [
          "Extensibility Types Management Methods"
        ],
        "description": "Creates, updates, or deletes the Sentinet custom extensibility types according to the provided data. System types cannot be updated and shall not be submitted.",
        "operationId": "CreateOrUpdateOrDeleteExtensibilityTypes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtensibilityTypes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/CreateOrUpdateOrDeleteExtensibilityTypesWithResult": {
      "post": {
        "tags": [
          "Extensibility Types Management Methods"
        ],
        "description": "Creates, updates, or deletes the Sentinet custom extensibility types according to the provided data. System types cannot be updated and shall not be submitted. The most current extensibility types are returned.",
        "operationId": "CreateOrUpdateOrDeleteExtensibilityTypesWithResult",
        "parameters": [
          {
            "name": "includeSystemTypes",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtensibilityTypes"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensibilityTypes"
                }
              }
            }
          }
        }
      }
    },
    "/GetTransactionSummary": {
      "post": {
        "tags": [
          "Monitoring Data Reading Methods"
        ],
        "description": "Returns requested transaction statistics according to the specified time resolution.",
        "operationId": "GetTransactionSummary",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionSummaryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MonitoringTransactionSummary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetTransactionHeaders": {
      "post": {
        "tags": [
          "Monitoring Data Reading Methods"
        ],
        "description": "Returns collection of transactions recorded in the specified time interval with basic information about transaction.",
        "operationId": "GetTransactionHeaders",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionHeadersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MonitoringTransactionHeader"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetTransactionHeadersById": {
      "get": {
        "tags": [
          "Monitoring Data Reading Methods"
        ],
        "description": "Returns collection of endpoint transactions (inbound and outbound) which have the same transaction Id as the transaction identified by provided database identifier.",
        "operationId": "GetTransactionHeadersById",
        "parameters": [
          {
            "name": "transactionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MonitoringTransactionHeader"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetTransactionDetails": {
      "get": {
        "tags": [
          "Monitoring Data Reading Methods"
        ],
        "description": "Returns full information about endpoint transaction specified by provided database identifier.",
        "operationId": "GetTransactionDetails",
        "parameters": [
          {
            "name": "transactionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonitoringTransactionDetails"
                }
              }
            }
          }
        }
      }
    },
    "/GetActivities": {
      "post": {
        "tags": [
          "Monitoring Data Reading Methods"
        ],
        "description": "Returns collection of monitoring activities satisfying provided query parameters.",
        "operationId": "GetActivities",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MonitoringActivitiesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MonitoringActivity"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetTransactionTrace": {
      "get": {
        "tags": [
          "Monitoring Data Reading Methods"
        ],
        "description": "Returns trace logs associated with the specified business transactions recorded inside the specified virtual service.",
        "operationId": "GetTransactionTrace",
        "parameters": [
          {
            "name": "transactionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            }
          },
          {
            "name": "serviceVersionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonitoringTransactionTrace"
                }
              }
            }
          }
        }
      }
    },
    "/GetServiceVersionsUsageReport": {
      "post": {
        "tags": [
          "Monitoring Data Reading Methods"
        ],
        "description": "Returns collection of services evaluated during the requested time period and ordered by specific performance metric.",
        "operationId": "GetServiceVersionsUsageReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceVersionUsageSummaryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceVersionUsageSummary"
                }
              }
            }
          }
        }
      }
    },
    "/GetOperationsUsageReport": {
      "post": {
        "tags": [
          "Monitoring Data Reading Methods"
        ],
        "description": "Returns collection of service operations along with the basic usage information.",
        "operationId": "GetOperationsUsageReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OperationUsageSummaryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationUsageSummary"
                }
              }
            }
          }
        }
      }
    },
    "/GetProductsUsageReport": {
      "post": {
        "tags": [
          "Monitoring Data Reading Methods"
        ],
        "description": "Returns collection of products evaluated during the requested time period and ordered by specific performance metric.",
        "operationId": "GetProductsUsageReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsageSummaryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductUsageSummary"
                }
              }
            }
          }
        }
      }
    },
    "/GetConsumersUsageReport": {
      "post": {
        "tags": [
          "Monitoring Data Reading Methods"
        ],
        "description": "Returns collection of consumers evaluated during the requested time period and ordered by specific performance metric.",
        "operationId": "GetConsumersUsageReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsageSummaryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsumerUsageSummary"
                }
              }
            }
          }
        }
      }
    },
    "/GetSubscriptionsUsageReport": {
      "post": {
        "tags": [
          "Monitoring Data Reading Methods"
        ],
        "description": "Returns collection of consumers evaluated during the requested time period and ordered by specific performance metric.",
        "operationId": "GetSubscriptionsUsageReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsageSummaryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionUsageSummary"
                }
              }
            }
          }
        }
      }
    },
    "/DownloadServiceVersionsUsageReport": {
      "post": {
        "tags": [
          "Monitoring Data Reading Methods"
        ],
        "description": "Returns the Microsoft Excel Open XML report file containing collection of services evaluated during the requested time period and ordered by specific performance metric.",
        "operationId": "DownloadServiceVersionsUsageReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceVersionUsageSummaryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/DownloadOperationsUsageReport": {
      "post": {
        "tags": [
          "Monitoring Data Reading Methods"
        ],
        "description": "Returns the Microsoft Excel Open XML report file containing collection of service operations along with the basic usage information.",
        "operationId": "DownloadOperationsUsageReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OperationUsageSummaryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/GetChangeSets": {
      "get": {
        "tags": [
          "Auditing Data Reading Methods"
        ],
        "description": "Returns collection of change sets occurred between requested dates and initiated by the specified user.",
        "operationId": "GetChangeSets",
        "parameters": [
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeSet"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetChangeSet": {
      "get": {
        "tags": [
          "Auditing Data Reading Methods"
        ],
        "description": "Returns collection of change records belonging to the specified change set.",
        "operationId": "GetChangeSet",
        "parameters": [
          {
            "name": "changeSetId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeSetDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/GetChangeRecord": {
      "get": {
        "tags": [
          "Auditing Data Reading Methods"
        ],
        "description": "Returns collection of fields (properties) updated on the specified record (entity).",
        "operationId": "GetChangeRecord",
        "parameters": [
          {
            "name": "changeRecordId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeRecordDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/GetChangeRecordsByFolderId": {
      "get": {
        "tags": [
          "Auditing Data Reading Methods"
        ],
        "description": "Returns collection of change records occurred in the specified folder and its sub-folders.",
        "operationId": "GetChangeRecordsByFolderId",
        "parameters": [
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "folderId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entityTypes",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityType"
              }
            }
          },
          {
            "name": "changeTypes",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChangeTypes"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeRecord"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetChangeRecordsByEntityId": {
      "get": {
        "tags": [
          "Auditing Data Reading Methods"
        ],
        "description": "Returns collection of change records belonging to the specified major entity.",
        "operationId": "GetChangeRecordsByEntityId",
        "parameters": [
          {
            "name": "entityId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entityType",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EntityType"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "changeTypes",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChangeTypes"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeRecord"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetUserSessions": {
      "post": {
        "tags": [
          "Auditing Data Reading Methods"
        ],
        "description": "Returns collection of user sessions satisfying provided search parameters.",
        "operationId": "GetUserSessions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSessionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSession"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateUser": {
      "post": {
        "tags": [
          "User Management Methods"
        ],
        "description": "Creates new user in the database and returns its database identifier.",
        "operationId": "CreateOrUpdateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateUserWithResult": {
      "post": {
        "tags": [
          "User Management Methods"
        ],
        "description": "Creates new user in the database and returns its fully populated instance.",
        "operationId": "CreateOrUpdateUserWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/GetUser": {
      "get": {
        "tags": [
          "User Management Methods"
        ],
        "description": "Returns user corresponding to provided identifier.",
        "operationId": "GetUser",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteUser": {
      "delete": {
        "tags": [
          "User Management Methods"
        ],
        "description": "Deletes user corresponding to provided identifier from the database.",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/GetUsersSummary": {
      "get": {
        "tags": [
          "User Management Methods"
        ],
        "description": "Returns summary for the users in security roles that belong to the specified folder.",
        "operationId": "GetUsersSummary",
        "parameters": [
          {
            "name": "folderId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SecurityRoleSummary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/FindUsers": {
      "post": {
        "tags": [
          "User Management Methods"
        ],
        "description": "Returns collection of Sentinet users matching provided search query.",
        "operationId": "FindUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSearchResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/FindConsumerUsers": {
      "post": {
        "tags": [
          "User Management Methods"
        ],
        "description": "Returns Developer Portal users matching the provided search criteria.",
        "operationId": "FindConsumerUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsumerUserSearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetServiceAgreement": {
      "get": {
        "tags": [
          "Service Agreement Management Methods"
        ],
        "description": "Returns service level agreement corresponding to the specified database identifier.",
        "operationId": "GetServiceAgreement",
        "parameters": [
          {
            "name": "serviceAgreementId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAgreementDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateServiceAgreement": {
      "post": {
        "tags": [
          "Service Agreement Management Methods"
        ],
        "description": "Creates new or updates service level agreement and returns its database identifier.",
        "operationId": "CreateOrUpdateServiceAgreement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceAgreementDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/GetAlertSourceTypes": {
      "get": {
        "tags": [
          "Alert Management Methods"
        ],
        "description": "Returns collection of all alert sources registered in the system.",
        "operationId": "GetAlertSourceTypes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertSourceType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetAlertHandlerTypes": {
      "get": {
        "tags": [
          "Alert Management Methods"
        ],
        "description": "Returns collection of all alert handler types registered in the system.",
        "operationId": "GetAlertHandlerTypes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertHandlerType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetAlertHandlerType": {
      "get": {
        "tags": [
          "Alert Management Methods"
        ],
        "description": "Returns alert handler type corresponding to the provided identifier.",
        "operationId": "GetAlertHandlerType",
        "parameters": [
          {
            "name": "alertHandlerTypeId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertHandlerType"
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateAlertHandlerType": {
      "post": {
        "tags": [
          "Alert Management Methods"
        ],
        "description": "Creates new or updates existing alert handler type in the database and returns its database identifier.",
        "operationId": "CreateOrUpdateAlertHandlerType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertHandlerType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateAlertHandlerTypeWithResult": {
      "post": {
        "tags": [
          "Alert Management Methods"
        ],
        "description": "Creates new or updates existing alert handler type in the database and returns its fully populated instance.",
        "operationId": "CreateOrUpdateAlertHandlerTypeWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertHandlerType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertHandlerType"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteAlertHandlerType": {
      "delete": {
        "tags": [
          "Alert Management Methods"
        ],
        "description": "Deletes alert handler type corresponding to provided identifier from the database.",
        "operationId": "DeleteAlertHandlerType",
        "parameters": [
          {
            "name": "alertHandlerTypeId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/GetAlertGroups": {
      "get": {
        "tags": [
          "Alert Management Methods"
        ],
        "description": "Returns collection of all existing alert groups.",
        "operationId": "GetAlertGroups",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertGroup"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetAlertTypes": {
      "post": {
        "tags": [
          "Alert Management Methods"
        ],
        "description": "Returns collection of alert types satisfying provided request.",
        "operationId": "GetAlertTypes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertTypesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateAlertType": {
      "post": {
        "tags": [
          "Alert Management Methods"
        ],
        "description": "Creates new or updates existing alert type with related entities and returns its database identifier.",
        "operationId": "CreateOrUpdateAlertType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertTypeDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateAlertTypeWithResult": {
      "post": {
        "tags": [
          "Alert Management Methods"
        ],
        "description": "Creates new or updates existing alert type with related entities and returns its fully populated instance.",
        "operationId": "CreateOrUpdateAlertTypeWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertTypeDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertTypeDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/GetAlertType": {
      "get": {
        "tags": [
          "Alert Management Methods"
        ],
        "description": "Returns alert type and related entities corresponding to provided database identifier.",
        "operationId": "GetAlertType",
        "parameters": [
          {
            "name": "alertTypeId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertTypeDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/GetAlertTypeByKey": {
      "get": {
        "tags": [
          "Alert Management Methods"
        ],
        "description": "Returns alert type and related entities corresponding to provided unique identifier.",
        "operationId": "GetAlertTypeByKey",
        "parameters": [
          {
            "name": "alertTypeKey",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertTypeDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteAlertType": {
      "delete": {
        "tags": [
          "Alert Management Methods"
        ],
        "description": "Deletes alert type and related entities from the system.",
        "operationId": "DeleteAlertType",
        "parameters": [
          {
            "name": "alertTypeId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/CreateOrUpdateAlertGroup": {
      "post": {
        "tags": [
          "Alert Management Methods"
        ],
        "description": "Creates new or updates existing alert type group with related entities and returns its database identifier.",
        "operationId": "CreateOrUpdateAlertGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertGroupDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateAlertGroupWithResult": {
      "post": {
        "tags": [
          "Alert Management Methods"
        ],
        "description": "Creates new or updates existing alert type group with related entities and returns its fully populated instance.",
        "operationId": "CreateOrUpdateAlertGroupWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertGroupDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertGroupDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/GetAlertGroup": {
      "get": {
        "tags": [
          "Alert Management Methods"
        ],
        "description": "Returns alert type group and related entities corresponding to provided identifier.",
        "operationId": "GetAlertGroup",
        "parameters": [
          {
            "name": "alertGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertGroupDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteAlertGroup": {
      "delete": {
        "tags": [
          "Alert Management Methods"
        ],
        "description": "Deletes alert type group and related entities from the system.",
        "operationId": "DeleteAlertGroup",
        "parameters": [
          {
            "name": "alertGroupId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/GetAlertSummary": {
      "post": {
        "tags": [
          "Alert Management Methods"
        ],
        "description": "Returns alerts statistics according to the specified time resolution.",
        "operationId": "GetAlertSummary",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertSummaryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertSummary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetAlerts": {
      "post": {
        "tags": [
          "Alert Management Methods"
        ],
        "description": "Returns alerts satisfying the provided search criteria.",
        "operationId": "GetAlerts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Alert"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetPortalNotificationConfiguration": {
      "get": {
        "tags": [
          "Alert Management Methods"
        ],
        "description": "Returns simplified Developer Portal notification configuration.",
        "operationId": "GetPortalNotificationConfiguration",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalNotificationConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/UpdatePortalNotificationConfiguration": {
      "post": {
        "tags": [
          "Alert Management Methods"
        ],
        "description": "Updates the Developer Portal notification settings according to the provided simplified configuration.",
        "operationId": "UpdatePortalNotificationConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortalNotificationConfiguration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/GetFolderSubtree": {
      "get": {
        "tags": [
          "Folder Management Methods"
        ],
        "description": "Returns child entities (services, nodes, bindings, and sub-folders) located under specified folder.",
        "operationId": "GetFolderSubtree",
        "parameters": [
          {
            "name": "folderId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "expandSubfolders",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "entities",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Entities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderSubtree"
                }
              }
            }
          }
        }
      }
    },
    "/GetFolder": {
      "get": {
        "tags": [
          "Folder Management Methods"
        ],
        "description": "Returns child entities (services, nodes, bindings, and sub-folders) located under specified folder.",
        "operationId": "GetFolder",
        "parameters": [
          {
            "name": "folderId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateFolder": {
      "post": {
        "tags": [
          "Folder Management Methods"
        ],
        "description": "Creates new or updates existing folder in the database and returns its database identifier.",
        "operationId": "CreateOrUpdateFolder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Folder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateFolderWithResult": {
      "post": {
        "tags": [
          "Folder Management Methods"
        ],
        "description": "Creates new or updates existing folder in the database and returns its fully populated instance.",
        "operationId": "CreateOrUpdateFolderWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Folder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteFolder": {
      "delete": {
        "tags": [
          "Folder Management Methods"
        ],
        "description": "Deletes folder corresponding to provided identifier from the database.",
        "operationId": "DeleteFolder",
        "parameters": [
          {
            "name": "folderId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/GetFolderSummary": {
      "get": {
        "tags": [
          "Folder Management Methods"
        ],
        "description": "Returns folder corresponding to provided identifier with summary objects describing its own entities and entities in all its sub-folders.",
        "operationId": "GetFolderSummary",
        "parameters": [
          {
            "name": "folderId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderSummary"
                }
              }
            }
          }
        }
      }
    },
    "/MoveFolderEntity": {
      "post": {
        "tags": [
          "Folder Management Methods"
        ],
        "description": "Moves a repository entity (service, binding, rule, user, etc) to the specified folder.",
        "operationId": "MoveFolderEntity",
        "parameters": [
          {
            "name": "entityId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entityType",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Entities"
            }
          },
          {
            "name": "targetFolderId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/MoveFolderEntities": {
      "post": {
        "tags": [
          "Folder Management Methods"
        ],
        "description": "Moves all repository entities of the specified type(s) (services, bindings, rules, users, etc) from one folder to another.",
        "operationId": "MoveFolderEntities",
        "parameters": [
          {
            "name": "sourceFolderId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "targetFolderId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entities",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Entities"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/FindFolders": {
      "post": {
        "tags": [
          "Folder Management Methods"
        ],
        "description": "Returns collection of folders matching provided search query.",
        "operationId": "FindFolders",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateFile": {
      "post": {
        "tags": [
          "File Management Methods"
        ],
        "description": "Creates new or updates existing file in the database.",
        "operationId": "CreateOrUpdateFile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/File"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateFileWithResult": {
      "post": {
        "tags": [
          "File Management Methods"
        ],
        "description": "Creates new or updates existing file in the database and returns its fully populated metadata with no content.",
        "operationId": "CreateOrUpdateFileWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/File"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        }
      }
    },
    "/GetFile": {
      "get": {
        "tags": [
          "File Management Methods"
        ],
        "description": "Returns file corresponding to provided identifier.",
        "operationId": "GetFile",
        "parameters": [
          {
            "name": "fileId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteFile": {
      "delete": {
        "tags": [
          "File Management Methods"
        ],
        "description": "Deletes file corresponding to provided identifier from the database.",
        "operationId": "DeleteFile",
        "parameters": [
          {
            "name": "fileId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/GetDownstreamServiceSubtrees": {
      "get": {
        "tags": [
          "Service Management Methods"
        ],
        "description": "Returns collection of services and their service versions virtualized by specified virtual service.",
        "operationId": "GetDownstreamServiceSubtrees",
        "parameters": [
          {
            "name": "serviceVersionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceSubtree"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetServiceSubtree": {
      "get": {
        "tags": [
          "Service Management Methods"
        ],
        "description": "Returns child entities (service versions, contracts, endpoints, operations, etc) related to provided service.",
        "operationId": "GetServiceSubtree",
        "parameters": [
          {
            "name": "serviceId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "expandServiceVersions",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceSubtree"
                }
              }
            }
          }
        }
      }
    },
    "/GetService": {
      "get": {
        "tags": [
          "Service Management Methods"
        ],
        "description": "Returns physical or virtual service corresponding to provided identifier.",
        "operationId": "GetService",
        "parameters": [
          {
            "name": "serviceId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateService": {
      "post": {
        "tags": [
          "Service Management Methods"
        ],
        "description": "Creates new or updates existing physical or virtual service in the database and returns its unique identifier.",
        "operationId": "CreateOrUpdateService",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateServiceWithResult": {
      "post": {
        "tags": [
          "Service Management Methods"
        ],
        "description": "Creates new or updates existing physical or virtual service in the database and returns its fully populated instance.",
        "operationId": "CreateOrUpdateServiceWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteService": {
      "delete": {
        "tags": [
          "Service Management Methods"
        ],
        "description": "Deletes physical or virtual service corresponding to provided identifier from the database.",
        "operationId": "DeleteService",
        "parameters": [
          {
            "name": "serviceId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/GetServicesSummary": {
      "get": {
        "tags": [
          "Service Management Methods"
        ],
        "description": "Returns summary for the services belonging to the specified folder.",
        "operationId": "GetServicesSummary",
        "parameters": [
          {
            "name": "folderId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isVirtual",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicesSummary"
                }
              }
            }
          }
        }
      }
    },
    "/FindServices": {
      "post": {
        "tags": [
          "Service Management Methods"
        ],
        "description": "Returns collection of service descriptions matching provided search query.",
        "operationId": "FindServices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceSearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceSearchResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetServiceVersionSubtree": {
      "get": {
        "tags": [
          "Service Version Management Methods"
        ],
        "description": "Returns child entities (contracts, endpoints, operations, etc) related to provided service version.",
        "operationId": "GetServiceVersionSubtree",
        "parameters": [
          {
            "name": "serviceVersionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceVersionSubtree"
                }
              }
            }
          }
        }
      }
    },
    "/GetServiceVersion": {
      "get": {
        "tags": [
          "Service Version Management Methods"
        ],
        "description": "Returns hierarchy of objects composing the service version corresponding to provided identifier.",
        "operationId": "GetServiceVersion",
        "parameters": [
          {
            "name": "serviceVersionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceVersionDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateServiceVersion": {
      "post": {
        "tags": [
          "Service Version Management Methods"
        ],
        "description": "Creates or updates a service version and all underlying entities from provided hierarchy of definition objects.",
        "operationId": "CreateOrUpdateServiceVersion",
        "parameters": [
          {
            "name": "replaceDuplicateActions",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "baseAddressCollisionAction",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/BaseAddressCollisionAction"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceVersionDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateServiceVersionWithResult": {
      "post": {
        "tags": [
          "Service Version Management Methods"
        ],
        "description": "Creates or updates a service version and all underlying entities from provided hierarchy of definition objects and returns its fully populated instance.",
        "operationId": "CreateOrUpdateServiceVersionWithResult",
        "parameters": [
          {
            "name": "replaceDuplicateActions",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "baseAddressCollisionAction",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/BaseAddressCollisionAction"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceVersionDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceVersionDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/CreateServiceVersionFromMetadata": {
      "post": {
        "tags": [
          "Service Version Management Methods"
        ],
        "description": "Creates new service version and all underlying entities by importing service details from provided metadata.",
        "operationId": "CreateServiceVersionFromMetadata",
        "parameters": [
          {
            "name": "fileId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "errorTolerance",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ErrorTolerance"
            }
          },
          {
            "name": "serializer",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Serializer"
            }
          },
          {
            "name": "wrappedParameters",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceVersionImportDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateServiceVersionFromMetadataWithResult": {
      "post": {
        "tags": [
          "Service Version Management Methods"
        ],
        "description": "Creates new service version and all underlying entities by importing service details from provided metadata. Newly created service version is returned.",
        "operationId": "CreateServiceVersionFromMetadataWithResult",
        "parameters": [
          {
            "name": "fileId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "errorTolerance",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ErrorTolerance"
            }
          },
          {
            "name": "serializer",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Serializer"
            }
          },
          {
            "name": "wrappedParameters",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceVersionImportDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceVersionDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/UpdateServiceVersionFromMetadataWithResult": {
      "post": {
        "tags": [
          "Service Version Management Methods"
        ],
        "description": "Updates an existing physical SOAP service version and all underlying entities from provided metadata. Updated service version is returned.",
        "operationId": "UpdateServiceVersionFromMetadataWithResult",
        "parameters": [
          {
            "name": "fileId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "errorTolerance",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ErrorTolerance"
            }
          },
          {
            "name": "serializer",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Serializer"
            }
          },
          {
            "name": "wrappedParameters",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceVersionUpdateDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceVersionDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/CreateServiceVersionFromSwagger": {
      "post": {
        "tags": [
          "Service Version Management Methods"
        ],
        "description": "Creates new service version and all underlying entities by importing service details from the provided Swagger document.",
        "operationId": "CreateServiceVersionFromSwagger",
        "parameters": [
          {
            "name": "fileId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "serviceId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Status2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateServiceVersionFromSwaggerWithResult": {
      "post": {
        "tags": [
          "Service Version Management Methods"
        ],
        "description": "Creates new service version and all underlying entities by importing service details from the provided Swagger document. Newly created service version is returned.",
        "operationId": "CreateServiceVersionFromSwaggerWithResult",
        "parameters": [
          {
            "name": "fileId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "serviceId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Status2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceVersionDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/UpdateServiceVersionFromSwaggerWithResult": {
      "post": {
        "tags": [
          "Service Version Management Methods"
        ],
        "description": "Updates an existing physical RESTful service version and all underlying entities from provided Swagger document. Updated service version is returned.",
        "operationId": "UpdateServiceVersionFromSwaggerWithResult",
        "parameters": [
          {
            "name": "fileId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "serviceVersionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "options",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Options"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceVersionDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/CopyServiceVersion": {
      "post": {
        "tags": [
          "Service Version Management Methods"
        ],
        "description": "Creates new service version as a copy of existing one under the same service.",
        "operationId": "CopyServiceVersion",
        "parameters": [
          {
            "name": "serviceVersionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CopyServiceVersionWithResult": {
      "post": {
        "tags": [
          "Service Version Management Methods"
        ],
        "description": "Creates new service version as a copy of existing one under the same service and returns its fully populated instance.",
        "operationId": "CopyServiceVersionWithResult",
        "parameters": [
          {
            "name": "serviceVersionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceVersionDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteServiceVersion": {
      "delete": {
        "tags": [
          "Service Version Management Methods"
        ],
        "description": "Deletes service version corresponding to provided identifier from the database.",
        "operationId": "DeleteServiceVersion",
        "parameters": [
          {
            "name": "serviceVersionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/FindServiceVersions": {
      "post": {
        "tags": [
          "Service Version Management Methods"
        ],
        "description": "Returns collection of service version descriptions matching provided search query.",
        "operationId": "FindServiceVersions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceVersionSearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceVersionSearchResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/DeserializeMonitoringFilters": {
      "post": {
        "tags": [
          "Service Version Management Methods"
        ],
        "description": "Deserializes and returns a collection of monitoring filters from provided XML string.",
        "operationId": "DeserializeMonitoringFilters",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MonitoringFilterBase"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/SerializeMonitoringFilters": {
      "post": {
        "tags": [
          "Service Version Management Methods"
        ],
        "description": "Serializes the provided collection of monitoring filters to XML string.",
        "operationId": "SerializeMonitoringFilters",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MonitoringFilterBase"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateServiceVersionFromProfile": {
      "post": {
        "tags": [
          "Service Version Management Methods"
        ],
        "description": "When implemented by a class, virtualizes a service version using the specified <paramref name=\"request\"/>",
        "operationId": "CreateServiceVersionFromProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VirtualizationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceVersionDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/GetDataSchemas": {
      "get": {
        "tags": [
          "XML Schemas Management Methods"
        ],
        "description": "Returns XML schemas with XSD content related to the specified service version.",
        "operationId": "GetDataSchemas",
        "parameters": [
          {
            "name": "serviceVersionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSchema"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetDataSchemaElements": {
      "get": {
        "tags": [
          "XML Schemas Management Methods"
        ],
        "description": "Returns collection of global XML elements defined in XML schemas attached to the specified service version.",
        "operationId": "GetDataSchemaElements",
        "parameters": [
          {
            "name": "serviceVersionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/QualifiedName"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateDataSchemas": {
      "post": {
        "tags": [
          "XML Schemas Management Methods"
        ],
        "description": "Creates new, updates existing, or deletes missing XML schemas assigned to a service version.",
        "operationId": "CreateOrUpdateDataSchemas",
        "parameters": [
          {
            "name": "serviceVersionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataSchema"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/CreateOrUpdateDataSchemasWithResult": {
      "post": {
        "tags": [
          "XML Schemas Management Methods"
        ],
        "description": "Creates new, updates existing, or deletes missing XML schemas assigned to a service version.",
        "operationId": "CreateOrUpdateDataSchemasWithResult",
        "parameters": [
          {
            "name": "serviceVersionId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataSchema"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSchema"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/GetOperation": {
      "get": {
        "tags": [
          "Operation Management Methods"
        ],
        "description": "Returns hierarchy of child objects corresponding to requested operation.",
        "operationId": "GetOperation",
        "parameters": [
          {
            "name": "operationId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/GetEndpoint": {
      "get": {
        "tags": [
          "Endpoint Management Methods"
        ],
        "description": "Returns the endpoint and hierarchy of all related object corresponding to provided identifier.",
        "operationId": "GetEndpoint",
        "parameters": [
          {
            "name": "endpointId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/GetEndpointByKey": {
      "get": {
        "tags": [
          "Endpoint Management Methods"
        ],
        "description": "Returns the endpoint and hierarchy of all related object corresponding to provided unique identifier.",
        "operationId": "GetEndpointByKey",
        "parameters": [
          {
            "name": "endpointKey",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointDefinition"
                }
              }
            }
          }
        }
      }
    },
    "/GetNodeEndpoints": {
      "get": {
        "tags": [
          "Endpoint Management Methods"
        ],
        "description": "Returns collection of endpoints hosted by the specified node.",
        "operationId": "GetNodeEndpoints",
        "parameters": [
          {
            "name": "nodeId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EndpointSummary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/FindEndpoints": {
      "post": {
        "tags": [
          "Endpoint Management Methods"
        ],
        "description": "Returns collection of endpoint descriptions matching provided search query.",
        "operationId": "FindEndpoints",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointSearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EndpointSearchResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateBinding": {
      "post": {
        "tags": [
          "Binding Management Methods"
        ],
        "description": "Creates new or updates existing endpoint binding in the database and returns its database identifier.",
        "operationId": "CreateOrUpdateBinding",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Binding"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateBindingWithResult": {
      "post": {
        "tags": [
          "Binding Management Methods"
        ],
        "description": "Creates new or updates existing endpoint binding in the database and returns its fully populated instance.",
        "operationId": "CreateOrUpdateBindingWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Binding"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Binding"
                }
              }
            }
          }
        }
      }
    },
    "/GetBinding": {
      "get": {
        "tags": [
          "Binding Management Methods"
        ],
        "description": "Returns endpoint binding corresponding to provided identifier.",
        "operationId": "GetBinding",
        "parameters": [
          {
            "name": "bindingId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Binding"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteBinding": {
      "delete": {
        "tags": [
          "Binding Management Methods"
        ],
        "description": "Deletes endpoint binding corresponding to provided identifier from the database.",
        "operationId": "DeleteBinding",
        "parameters": [
          {
            "name": "bindingId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/GetBindingsSummary": {
      "get": {
        "tags": [
          "Binding Management Methods"
        ],
        "description": "Returns summary for the public bindings belonging to the specified folder.",
        "operationId": "GetBindingsSummary",
        "parameters": [
          {
            "name": "folderId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BindingsSummary"
                }
              }
            }
          }
        }
      }
    },
    "/FindBindings": {
      "post": {
        "tags": [
          "Binding Management Methods"
        ],
        "description": "Returns collection of public bindings matching provided search query.",
        "operationId": "FindBindings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BindingSearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BindingSearchResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateIdentity": {
      "post": {
        "tags": [
          "Identity Management Methods"
        ],
        "description": "Creates new or updates existing public identity in the database and returns its database identifier.",
        "operationId": "CreateOrUpdateIdentity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityDefinitionBase"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateIdentityWithResult": {
      "post": {
        "tags": [
          "Identity Management Methods"
        ],
        "description": "Creates new or updates existing public identity in the database and returns its fully populated instance.",
        "operationId": "CreateOrUpdateIdentityWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityDefinitionBase"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityDefinitionBase"
                }
              }
            }
          }
        }
      }
    },
    "/GetIdentity": {
      "get": {
        "tags": [
          "Identity Management Methods"
        ],
        "description": "Returns public identity corresponding to provided identifier.",
        "operationId": "GetIdentity",
        "parameters": [
          {
            "name": "identityId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityDefinitionBase"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteIdentity": {
      "delete": {
        "tags": [
          "Identity Management Methods"
        ],
        "description": "Deletes public identity corresponding to provided identifier from the database.",
        "operationId": "DeleteIdentity",
        "parameters": [
          {
            "name": "identityId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/GetIdentitiesSummary": {
      "get": {
        "tags": [
          "Identity Management Methods"
        ],
        "description": "Returns summary for the public identities belonging to the specified folder.",
        "operationId": "GetIdentitiesSummary",
        "parameters": [
          {
            "name": "folderId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentitiesSummary"
                }
              }
            }
          }
        }
      }
    },
    "/FindIdentities": {
      "post": {
        "tags": [
          "Identity Management Methods"
        ],
        "description": "Returns collection of public identities matching the provided search query.",
        "operationId": "FindIdentities",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentitySearchQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentitySearchResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateBehavior": {
      "post": {
        "tags": [
          "Behavior Management Methods"
        ],
        "description": "Creates new or updates existing behavior in the database and returns its database identifier.",
        "operationId": "CreateOrUpdateBehavior",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Behavior"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/CreateOrUpdateBehaviorWithResult": {
      "post": {
        "tags": [
          "Behavior Management Methods"
        ],
        "description": "Creates new or updates existing behavior in the database and returns its fully populated instance.",
        "operationId": "CreateOrUpdateBehaviorWithResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Behavior"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Behavior"
                }
              }
            }
          }
        }
      }
    },
    "/GetBehavior": {
      "get": {
        "tags": [
          "Behavior Management Methods"
        ],
        "description": "Returns endpoint or service behavior corresponding to provided identifier.",
        "operationId": "GetBehavior",
        "parameters": [
          {
            "name": "behaviorId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Behavior"
                }
              }
            }
          }
        }
      }
    },
    "/DeleteBehavior": {
      "delete": {
        "tags": [
          "Behavior Management Methods"
        ],
        "description": "Deletes endpoint or service behavior corresponding to provided identifier from the database.",
        "operationId": "DeleteBehavior",
        "parameters": [
          {
            "name": "behaviorId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/GetBehaviorsSummary": {
      "get": {
        "tags": [
          "Behavior Management Methods"
        ],
        "description": "Returns summary for the public behaviors belonging to the specified folder.",
        "operationId": "GetBehaviorsSummary",
        "parameters": [
          {
            "name": "folderId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BehaviorsSummary"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Certificate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "FriendlyName": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Expiration": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Data": {
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DomainObjectBase": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ServiceAgreementDefinition": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceAgreement"
          }
        ],
        "properties": {
          "TimeZoneOffset": {
            "type": "string",
            "nullable": true
          },
          "Metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceAgreementMetric"
            },
            "nullable": true
          },
          "Rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorizationRuleAssignment"
            },
            "nullable": true
          },
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ServiceAgreementMetric": {
        "type": "object",
        "properties": {
          "ServiceAgreementId": {
            "type": "integer",
            "format": "int32"
          },
          "Metric": {
            "$ref": "#/components/schemas/Metric"
          },
          "Min": {
            "type": "number",
            "format": "double"
          },
          "Max": {
            "type": "number",
            "format": "double"
          },
          "TimeUnit": {
            "$ref": "#/components/schemas/TimeUnit"
          },
          "TimeValue": {
            "type": "integer",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthorizationRuleAssignment": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "RuleId": {
            "type": "integer",
            "format": "int32"
          },
          "RuleName": {
            "type": "string",
            "nullable": true
          },
          "GroupId": {
            "type": "integer",
            "format": "int32"
          },
          "GroupName": {
            "type": "string",
            "nullable": true
          },
          "RuleExpression": {
            "$ref": "#/components/schemas/AuthorizationExpressionBase"
          },
          "ServiceId": {
            "type": "integer",
            "format": "int32"
          },
          "ServiceName": {
            "type": "string",
            "nullable": true
          },
          "Kind": {
            "$ref": "#/components/schemas/Kind"
          },
          "ServiceVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "ServiceVersionName": {
            "type": "string",
            "nullable": true
          },
          "VersionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "Version": {
            "type": "string",
            "nullable": true
          },
          "EndpointId": {
            "type": "integer",
            "format": "int32"
          },
          "EndpointName": {
            "type": "string",
            "nullable": true
          },
          "ContractId": {
            "type": "integer",
            "format": "int32"
          },
          "ContractName": {
            "type": "string",
            "nullable": true
          },
          "OperationId": {
            "type": "integer",
            "format": "int32"
          },
          "OperationName": {
            "type": "string",
            "nullable": true
          },
          "Priority": {
            "type": "integer",
            "format": "int32"
          },
          "Action": {
            "$ref": "#/components/schemas/Action"
          },
          "ServiceAgreementId": {
            "type": "integer",
            "format": "int32"
          },
          "ServiceAgreementName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Property": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "PropertyType": {
            "enum": [
              "Text",
              "Uri",
              "File",
              "Keyword"
            ],
            "type": "string",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "nullable": true
          },
          "FileId": {
            "type": "integer",
            "format": "int32"
          },
          "FileKey": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthorizationExpressionBase": {
        "type": "object",
        "properties": {
          "Title": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ServiceAgreement": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "FolderId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/Status3"
          },
          "StartDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "EndDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "TimeZoneId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ServiceAgreementsSummary": {
        "type": "object",
        "properties": {
          "DraftServiceAgreements": {
            "type": "integer",
            "format": "int32"
          },
          "ActiveServiceAgreements": {
            "type": "integer",
            "format": "int32"
          },
          "RetiredServiceAgreements": {
            "type": "integer",
            "format": "int32"
          },
          "EffectiveServiceAgreements": {
            "type": "integer",
            "format": "int32"
          },
          "TotalServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "EffectiveServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "TimeZones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeZoneInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimeZoneInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "UtcOffset": {
            "type": "string",
            "nullable": true
          },
          "References": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ServiceAgreementViolationSummary": {
        "type": "object",
        "properties": {
          "T": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "C": {
            "type": "integer",
            "format": "int32"
          },
          "Unit": {
            "$ref": "#/components/schemas/TimeUnit"
          },
          "Time": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ServiceAgreementViolationSummaryRequest": {
        "type": "object",
        "properties": {
          "StartDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "EndDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Metrics": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "FolderId": {
            "type": "integer",
            "format": "int32"
          },
          "TimeZoneId": {
            "type": "string",
            "nullable": true
          },
          "TimeUnit": {
            "$ref": "#/components/schemas/TimeUnit"
          },
          "TimeResolution": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ServiceAgreementViolation": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "MetricId": {
            "type": "integer",
            "format": "int32"
          },
          "MetricType": {
            "$ref": "#/components/schemas/Metric"
          },
          "SlaId": {
            "type": "integer",
            "format": "int32"
          },
          "SlaName": {
            "type": "string",
            "nullable": true
          },
          "Time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "InitVal": {
            "type": "number",
            "format": "double"
          },
          "CurVal": {
            "type": "number",
            "format": "double"
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ServiceAgreementViolationsRequest": {
        "type": "object",
        "properties": {
          "StartDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "EndDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Metrics": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "FolderId": {
            "type": "integer",
            "format": "int32"
          },
          "TimeZoneId": {
            "type": "string",
            "nullable": true
          },
          "SortField": {
            "enum": [
              "StartDateTime",
              "MetricType",
              "ServiceAgreementName",
              "InitialValue",
              "CurrentValue",
              "Created"
            ],
            "type": "string",
            "nullable": true
          },
          "SortOrder": {
            "$ref": "#/components/schemas/SortOrder"
          }
        },
        "additionalProperties": false
      },
      "MetricReadingSummary": {
        "type": "object",
        "properties": {
          "MetricId": {
            "type": "integer",
            "format": "int32"
          },
          "T": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Min": {
            "type": "number",
            "format": "double"
          },
          "Max": {
            "type": "number",
            "format": "double"
          },
          "Avg": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "MetricReading": {
        "type": "object",
        "properties": {
          "MetricId": {
            "type": "integer",
            "format": "int32"
          },
          "T": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "V": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "ServiceAgreementSearchResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchResult"
          }
        ],
        "properties": {
          "Status": {
            "$ref": "#/components/schemas/Status3"
          }
        },
        "additionalProperties": false
      },
      "SearchResult": {
        "type": "object",
        "properties": {
          "FolderName": {
            "type": "string",
            "nullable": true
          },
          "FolderRoute": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ServiceAgreementSearchQuery": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchQuery"
          }
        ],
        "properties": {
          "Status": {
            "$ref": "#/components/schemas/Status3"
          },
          "ServiceVersionName": {
            "type": "string",
            "nullable": true
          },
          "ServiceVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "Keywords": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchQuery": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "FolderId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StaticResponseConfiguration": {
        "type": "object",
        "properties": {
          "ServiceVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "Operations": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "Responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageSample"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageSample": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "OperationId": {
            "type": "integer",
            "format": "int32"
          },
          "MessageId": {
            "type": "integer",
            "format": "int32"
          },
          "RepeatCount": {
            "type": "integer",
            "format": "int32"
          },
          "Delay": {
            "type": "integer",
            "format": "int32"
          },
          "Priority": {
            "type": "integer",
            "format": "int32"
          },
          "Version": {
            "$ref": "#/components/schemas/MessageVersion"
          },
          "ContentType": {
            "type": "string",
            "nullable": true
          },
          "StatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "HttpHeaders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransportHeader"
            },
            "nullable": true
          },
          "FileId": {
            "type": "integer",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransportHeader": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "nullable": true
          },
          "VariableName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "File": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "Content": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "ContentType": {
            "enum": [
              "Unknown",
              "Message",
              "Metadata",
              "File",
              "ImportPackage",
              "Swagger",
              "OpenApiV3"
            ],
            "type": "string",
            "nullable": true
          },
          "FileName": {
            "type": "string",
            "nullable": true
          },
          "Expired": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageContent": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "string",
            "nullable": true
          },
          "FileId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MessageGenerationSettings": {
        "type": "object",
        "properties": {
          "EnvelopeVersion": {
            "$ref": "#/components/schemas/MessageVersion"
          },
          "ArraySize": {
            "type": "integer",
            "format": "int32"
          },
          "MaximumLevels": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MessageSchema": {
        "type": "object",
        "properties": {
          "RootElement": {
            "$ref": "#/components/schemas/XmlQualifiedName"
          },
          "Schemas": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "XmlQualifiedName": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "ns": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessagePipeline": {
        "type": "object",
        "properties": {
          "InboundRequest": {
            "$ref": "#/components/schemas/MessagePipelineComponentBase"
          },
          "InboundResponse": {
            "$ref": "#/components/schemas/MessagePipelineComponentBase"
          },
          "OutboundRequest": {
            "$ref": "#/components/schemas/MessagePipelineComponentBase"
          },
          "OutboundResponse": {
            "$ref": "#/components/schemas/MessagePipelineComponentBase"
          }
        },
        "additionalProperties": false
      },
      "MessagePipelineComponentBase": {
        "type": "object",
        "additionalProperties": false
      },
      "DependencyPackage": {
        "type": "object",
        "properties": {
          "Dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dependency"
            },
            "nullable": true
          },
          "Repository": {
            "$ref": "#/components/schemas/FolderSubtree"
          },
          "RouterTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subtree"
            },
            "nullable": true
          },
          "Products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subtree"
            },
            "nullable": true
          },
          "CustomAttributeTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subtree"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Dependency": {
        "type": "object",
        "properties": {
          "PrimaryEntity": {
            "$ref": "#/components/schemas/LocalIdentifier"
          },
          "ForeignEntity": {
            "$ref": "#/components/schemas/LocalIdentifier"
          },
          "DependencyType": {
            "enum": [
              "Natural",
              "Declarative"
            ],
            "type": "string",
            "nullable": true
          },
          "ReferenceType": {
            "$ref": "#/components/schemas/ReferenceType"
          },
          "Description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FolderSubtree": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Subtree"
          }
        ],
        "properties": {
          "Folders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FolderSubtree"
            },
            "nullable": true
          },
          "Services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceSubtree"
            },
            "nullable": true
          },
          "Nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeSubtree"
            },
            "nullable": true
          },
          "Bindings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BindingSubtree"
            },
            "nullable": true
          },
          "Rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subtree"
            },
            "nullable": true
          },
          "AuthorizationGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subtree"
            },
            "nullable": true
          },
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subtree"
            },
            "nullable": true
          },
          "ServiceAgreements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subtree"
            },
            "nullable": true
          },
          "Behaviors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BehaviorSubtree"
            },
            "nullable": true
          },
          "CustomEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subtree"
            },
            "nullable": true
          },
          "Identities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentitySubtree"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Subtree": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LocalIdentifier": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "EntityType": {
            "$ref": "#/components/schemas/EntityType"
          }
        },
        "additionalProperties": false
      },
      "ServiceSubtree": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Subtree"
          }
        ],
        "properties": {
          "IsVirtual": {
            "type": "boolean"
          },
          "Kind": {
            "$ref": "#/components/schemas/Kind"
          },
          "ServiceVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceVersionSubtree"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NodeSubtree": {
        "type": "object",
        "properties": {
          "NodeType": {
            "$ref": "#/components/schemas/NodeType"
          },
          "BaseAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subtree"
            },
            "nullable": true
          },
          "Identities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentitySubtree"
            },
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BindingSubtree": {
        "type": "object",
        "properties": {
          "Capabilities": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BehaviorSubtree": {
        "type": "object",
        "properties": {
          "Kind": {
            "$ref": "#/components/schemas/Kind2"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IdentitySubtree": {
        "type": "object",
        "properties": {
          "Kind": {
            "$ref": "#/components/schemas/Kind3"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ServiceVersionSubtree": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Subtree"
          }
        ],
        "properties": {
          "Version": {
            "type": "string",
            "nullable": true
          },
          "VersionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "Status": {
            "$ref": "#/components/schemas/Status2"
          },
          "Kind": {
            "$ref": "#/components/schemas/Kind"
          },
          "Contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractSubtree"
            },
            "nullable": true
          },
          "EndpointGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointGroupSubtree"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContractSubtree": {
        "type": "object",
        "properties": {
          "Operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperationSubtree"
            },
            "nullable": true
          },
          "Endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointSubtree"
            },
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EndpointGroupSubtree": {
        "type": "object",
        "properties": {
          "Endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointSubtree"
            },
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OperationSubtree": {
        "type": "object",
        "properties": {
          "Messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageSubtree"
            },
            "nullable": true
          },
          "ExchangePattern": {
            "$ref": "#/components/schemas/ExchangePattern"
          },
          "IsDeprecated": {
            "type": "boolean"
          },
          "IsPublished": {
            "type": "boolean"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EndpointSubtree": {
        "type": "object",
        "properties": {
          "Identities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentitySubtree"
            },
            "nullable": true
          },
          "PhysicalAddress": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageSubtree": {
        "type": "object",
        "properties": {
          "Headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subtree"
            },
            "nullable": true
          },
          "Direction": {
            "$ref": "#/components/schemas/Direction"
          },
          "HttpMethod": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Stream": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/MarshalByRefObject"
          }
        ],
        "additionalProperties": false
      },
      "MarshalByRefObject": {
        "type": "object",
        "properties": {
          "__identity": {
            "type": "object",
            "additionalProperties": false,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RepositoryPackageInfo": {
        "type": "object",
        "properties": {
          "FileId": {
            "type": "integer",
            "format": "int32"
          },
          "Version": {
            "type": "string",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityInfo"
            },
            "nullable": true
          },
          "UnresolvedKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GlobalIdentifier"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EntityInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "EntityType": {
            "$ref": "#/components/schemas/EntityType"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "FolderId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GlobalIdentifier": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Requirements": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "EntityType": {
            "$ref": "#/components/schemas/EntityType"
          }
        },
        "additionalProperties": false
      },
      "RepositoryPackageImportParameters": {
        "type": "object",
        "properties": {
          "FileId": {
            "type": "integer",
            "format": "int32"
          },
          "ImportedEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalIdentifier"
            },
            "nullable": true
          },
          "Mappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyMapping"
            },
            "nullable": true
          },
          "VerifyOnly": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "KeyMapping": {
        "type": "object",
        "properties": {
          "EntityType": {
            "$ref": "#/components/schemas/EntityType"
          },
          "FromKey": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "ToKey": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SystemInfo": {
        "type": "object",
        "properties": {
          "UserInfo": {
            "$ref": "#/components/schemas/UserAuthorizationInfo"
          },
          "Settings": {
            "$ref": "#/components/schemas/ConfigurationSettings"
          }
        },
        "additionalProperties": false
      },
      "UserAuthorizationInfo": {
        "type": "object",
        "properties": {
          "UserId": {
            "type": "integer",
            "format": "int32"
          },
          "FullName": {
            "type": "string",
            "nullable": true
          },
          "FolderId": {
            "type": "integer",
            "format": "int32"
          },
          "Permission": {
            "$ref": "#/components/schemas/Permission"
          },
          "RepositoryPermissions": {
            "type": "string",
            "nullable": true
          },
          "IdentityKind": {
            "$ref": "#/components/schemas/Kind3"
          },
          "ConsumerId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ConfigurationSettings": {
        "type": "object",
        "properties": {
          "ReportingTimeZoneId": {
            "type": "string",
            "nullable": true
          },
          "ReportingTimeZoneName": {
            "type": "string",
            "nullable": true
          },
          "ReportingTimeZoneOffset": {
            "type": "string",
            "nullable": true
          },
          "DatabaseVersion": {
            "type": "string",
            "nullable": true
          },
          "RepositoryVersion": {
            "type": "string",
            "nullable": true
          },
          "UserClaimType": {
            "type": "string",
            "nullable": true
          },
          "UserClaimIssuer": {
            "type": "string",
            "nullable": true
          },
          "IsFullTextEnabled": {
            "type": "boolean"
          },
          "License": {
            "$ref": "#/components/schemas/LicenseInfo"
          },
          "SwaggerViewerUrl": {
            "type": "string",
            "nullable": true
          },
          "DocumentationUrl": {
            "type": "string",
            "nullable": true
          },
          "DeveloperPortal": {
            "$ref": "#/components/schemas/PortalSettings"
          }
        },
        "additionalProperties": false
      },
      "LicenseInfo": {
        "type": "object",
        "properties": {
          "Expiration": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Type": {
            "enum": [
              "Evaluation",
              "Development",
              "NonProduction",
              "Production"
            ],
            "type": "string",
            "nullable": true
          },
          "Features": {
            "enum": [
              "None",
              "DeveloperPortal"
            ],
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PortalSettings": {
        "type": "object",
        "properties": {
          "AccessKeyLength": {
            "type": "integer",
            "format": "int32"
          },
          "AccessKeyLifetime": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CertificateInfo": {
        "type": "object",
        "properties": {
          "RawData": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "Subject": {
            "type": "string",
            "nullable": true
          },
          "Issuer": {
            "type": "string",
            "nullable": true
          },
          "Thumbprint": {
            "type": "string",
            "nullable": true
          },
          "SerialNumber": {
            "type": "string",
            "nullable": true
          },
          "PublicData": {
            "type": "string",
            "nullable": true
          },
          "HasPrivateKey": {
            "type": "boolean"
          },
          "ValidFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ValidTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ContentType": {
            "enum": [
              "Unknown",
              "Serialized",
              "Pfx"
            ],
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatchRelativeUriResult": {
        "type": "object",
        "properties": {
          "IsMatched": {
            "type": "boolean"
          },
          "BoundVariables": {
            "type": "object",
            "additionalProperties": false,
            "nullable": true
          },
          "BoundUri": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LiquidTemplateParameters": {
        "type": "object",
        "properties": {
          "Template": {
            "type": "string",
            "nullable": true
          },
          "Content": {
            "type": "string",
            "nullable": true
          },
          "ContentType": {
            "enum": [
              "Auto",
              "Xml",
              "Json",
              "Raw",
              "None"
            ],
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CodeCompilationParameters": {
        "type": "object",
        "properties": {
          "References": {
            "type": "string",
            "nullable": true
          },
          "Imports": {
            "type": "string",
            "nullable": true
          },
          "Function": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LogOnCredentials": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string",
            "nullable": true
          },
          "Password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductDefinition": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Product"
          }
        ],
        "properties": {
          "ServiceVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductServiceVersion"
            },
            "nullable": true
          },
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "nullable": true
          },
          "References": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityReference"
            },
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductServiceVersion": {
        "type": "object",
        "properties": {
          "ServiceVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "ProductId": {
            "type": "integer",
            "format": "int32"
          },
          "Version": {
            "type": "string",
            "nullable": true
          },
          "VersionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "FriendlyName": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/Status2"
          },
          "ServiceId": {
            "type": "integer",
            "format": "int32"
          },
          "ServiceName": {
            "type": "string",
            "nullable": true
          },
          "Kind": {
            "$ref": "#/components/schemas/Kind"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EntityReference": {
        "type": "object",
        "properties": {
          "PrimaryEntityId": {
            "type": "integer",
            "format": "int32"
          },
          "PrimaryEntityType": {
            "$ref": "#/components/schemas/EntityType"
          },
          "PrimaryEntityName": {
            "type": "string",
            "nullable": true
          },
          "ForeignEntityId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignEntityType": {
            "$ref": "#/components/schemas/EntityType"
          },
          "ForeignEntityName": {
            "type": "string",
            "nullable": true
          },
          "ReferenceType": {
            "$ref": "#/components/schemas/ReferenceType"
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Product": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/Status2"
          },
          "IsPrivate": {
            "type": "boolean"
          },
          "IsApprovalRequired": {
            "type": "boolean"
          },
          "IsSubscriptionRequired": {
            "type": "boolean"
          },
          "SubscriptionLifetime": {
            "type": "integer",
            "format": "int32"
          },
          "LastUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ServiceVersionCount": {
            "type": "integer",
            "format": "int32"
          },
          "CustomAttributes": {
            "type": "object",
            "additionalProperties": false,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductSearchQuery": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/Status2"
          },
          "IsPrivate": {
            "type": "boolean"
          },
          "IsApprovalRequired": {
            "type": "boolean"
          },
          "IsSubscriptionRequired": {
            "type": "boolean"
          },
          "Keywords": {
            "type": "string",
            "nullable": true
          },
          "SortField": {
            "enum": [
              "Name",
              "Status",
              "IsPrivate",
              "IsApprovalRequired",
              "Created",
              "IsSubscriptionRequired",
              "ServiceVersionCount"
            ],
            "type": "string",
            "nullable": true
          },
          "SortOrder": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "IncludeDescription": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Consumer": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "CustomAttributes": {
            "type": "object",
            "additionalProperties": false,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConsumerSearchQuery": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "SortField": {
            "enum": [
              "Name",
              "IsEnabled",
              "Created"
            ],
            "type": "string",
            "nullable": true
          },
          "SortOrder": {
            "$ref": "#/components/schemas/SortOrder"
          }
        },
        "additionalProperties": false
      },
      "SubscriptionDefinition": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Subscription"
          }
        ],
        "properties": {
          "Applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Application"
            },
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Application": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "SubscriptionId": {
            "type": "integer",
            "format": "int32"
          },
          "AccessKey1": {
            "type": "string",
            "nullable": true
          },
          "AccessKey1Expiration": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "AccessKey2": {
            "type": "string",
            "nullable": true
          },
          "AccessKey2Expiration": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Subscription": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "ProductId": {
            "type": "integer",
            "format": "int32"
          },
          "ProductName": {
            "type": "string",
            "nullable": true
          },
          "ConsumerId": {
            "type": "integer",
            "format": "int32"
          },
          "ConsumerName": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/Status"
          },
          "Expiration": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ApplicationCount": {
            "type": "integer",
            "format": "int32"
          },
          "CustomAttributes": {
            "type": "object",
            "additionalProperties": false,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubscriptionSearchQuery": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "ProductId": {
            "type": "integer",
            "format": "int32"
          },
          "ProductName": {
            "type": "string",
            "nullable": true
          },
          "ConsumerId": {
            "type": "integer",
            "format": "int32"
          },
          "ConsumerName": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/Status"
          },
          "ExpirationFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ExpirationTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "CreatedFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "CreatedTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "SortField": {
            "enum": [
              "Name",
              "ProductName",
              "ConsumerName",
              "Status",
              "Expiration",
              "Created"
            ],
            "type": "string",
            "nullable": true
          },
          "SortOrder": {
            "$ref": "#/components/schemas/SortOrder"
          }
        },
        "additionalProperties": false
      },
      "ApplicationSearchQuery": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "AccessKey": {
            "type": "string",
            "nullable": true
          },
          "SubscriptionId": {
            "type": "integer",
            "format": "int32"
          },
          "SubscriptionName": {
            "type": "string",
            "nullable": true
          },
          "ProductId": {
            "type": "integer",
            "format": "int32"
          },
          "ProductName": {
            "type": "string",
            "nullable": true
          },
          "ConsumerId": {
            "type": "integer",
            "format": "int32"
          },
          "ConsumerName": {
            "type": "string",
            "nullable": true
          },
          "AccessKeyExpirationFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "AccessKeyExpirationTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "SortField": {
            "enum": [
              "Name",
              "AccessKey1Expiration",
              "AccessKey2Expiration",
              "Created"
            ],
            "type": "string",
            "nullable": true
          },
          "SortOrder": {
            "$ref": "#/components/schemas/SortOrder"
          }
        },
        "additionalProperties": false
      },
      "PortalSummary": {
        "type": "object",
        "properties": {
          "Products": {
            "$ref": "#/components/schemas/ProductsSummary"
          },
          "Consumers": {
            "$ref": "#/components/schemas/ConsumersSummary"
          },
          "Users": {
            "$ref": "#/components/schemas/PortalUsersSummary"
          },
          "Subscriptions": {
            "$ref": "#/components/schemas/SubscriptionsSummary"
          },
          "ServiceVersions": {
            "$ref": "#/components/schemas/ServiceVersionsSummary"
          }
        },
        "additionalProperties": false
      },
      "ProductsSummary": {
        "type": "object",
        "properties": {
          "DraftProducts": {
            "type": "integer",
            "format": "int32"
          },
          "ActiveProducts": {
            "type": "integer",
            "format": "int32"
          },
          "ObsoleteProducts": {
            "type": "integer",
            "format": "int32"
          },
          "RetiredProducts": {
            "type": "integer",
            "format": "int32"
          },
          "TotalProducts": {
            "type": "integer",
            "format": "int32"
          },
          "PrivateProducts": {
            "type": "integer",
            "format": "int32"
          },
          "ProductsThatRequireSubscription": {
            "type": "integer",
            "format": "int32"
          },
          "ProductsThatRequireApproval": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ConsumersSummary": {
        "type": "object",
        "properties": {
          "TotalConsumers": {
            "type": "integer",
            "format": "int32"
          },
          "EnabledConsumers": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PortalUsersSummary": {
        "type": "object",
        "properties": {
          "TotalUsers": {
            "type": "integer",
            "format": "int32"
          },
          "EnabledUsers": {
            "type": "integer",
            "format": "int32"
          },
          "AdministratorUsers": {
            "type": "integer",
            "format": "int32"
          },
          "ReadWriteUsers": {
            "type": "integer",
            "format": "int32"
          },
          "ReadOnlyUsers": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SubscriptionsSummary": {
        "type": "object",
        "properties": {
          "RequestedSubscriptions": {
            "type": "integer",
            "format": "int32"
          },
          "ActivatedSubscriptions": {
            "type": "integer",
            "format": "int32"
          },
          "DeactivatedSubscriptions": {
            "type": "integer",
            "format": "int32"
          },
          "ExpiredSubscriptions": {
            "type": "integer",
            "format": "int32"
          },
          "TotalSubscriptions": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ServiceVersionsSummary": {
        "type": "object",
        "properties": {
          "SoapServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "HostedServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "DraftServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "ActiveServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "ObsoleteServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "RetiredServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "TotalServiceVersions": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PolicyDescription": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Namespace": {
            "type": "string",
            "nullable": true
          },
          "Kind": {
            "enum": [
              "Web",
              "Soap",
              "WebRelay",
              "SoapRelay"
            ],
            "type": "string",
            "nullable": true
          },
          "Transport": {
            "$ref": "#/components/schemas/TransportDescriptionBase"
          },
          "Soap": {
            "$ref": "#/components/schemas/SoapDescription"
          },
          "PreviousConfiguration": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TransportDescriptionBase": {
        "type": "object",
        "additionalProperties": false
      },
      "SoapDescription": {
        "type": "object",
        "properties": {
          "Version": {
            "enum": [
              "Soap11",
              "Soap12"
            ],
            "type": "string",
            "nullable": true
          },
          "SecurityMode": {
            "enum": [
              "None",
              "Transport",
              "Message"
            ],
            "type": "string",
            "nullable": true
          },
          "MessageSecurity": {
            "enum": [
              "None",
              "Windows",
              "UserName",
              "Certificate",
              "IssuedToken"
            ],
            "type": "string",
            "nullable": true
          },
          "UseContext": {
            "type": "boolean"
          },
          "EstablishSecurityContext": {
            "type": "boolean"
          },
          "ReliableSession": {
            "enum": [
              "None",
              "NotOrdered",
              "InOrder"
            ],
            "type": "string",
            "nullable": true
          },
          "UseTransactions": {
            "type": "boolean"
          },
          "UseOasisProtocols": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SecurityRole": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Permissions": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "DisplayName": {
            "type": "string",
            "nullable": true
          },
          "EntityType": {
            "$ref": "#/components/schemas/EntityType"
          },
          "DataType": {
            "enum": [
              "Unknown",
              "String",
              "Integer",
              "Decimal",
              "DateTime",
              "Boolean"
            ],
            "type": "string",
            "nullable": true
          },
          "MaxLength": {
            "type": "integer",
            "format": "int32"
          },
          "IsRequired": {
            "type": "boolean"
          },
          "PortalVisibility": {
            "enum": [
              "None",
              "View",
              "Edit"
            ],
            "type": "string",
            "nullable": true
          },
          "Position": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "VirtualizationProfile": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "ServiceKind": {
            "$ref": "#/components/schemas/Kind"
          },
          "IsDefault": {
            "type": "boolean"
          },
          "Settings": {
            "$ref": "#/components/schemas/VirtualizationSettings"
          }
        },
        "additionalProperties": false
      },
      "VirtualizationSettings": {
        "type": "object",
        "properties": {
          "Activate": {
            "type": "boolean"
          },
          "ServiceNamePrefix": {
            "type": "string",
            "nullable": true
          },
          "ServiceNameSuffix": {
            "type": "string",
            "nullable": true
          },
          "MonitoringProfile": {
            "enum": [
              "None",
              "Default",
              "Extended",
              "Full"
            ],
            "type": "string",
            "nullable": true
          },
          "MessageProcessing": {
            "$ref": "#/components/schemas/MessagePipeline"
          },
          "Addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultNodeAddress"
            },
            "nullable": true
          },
          "Rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultAuthorizationRule"
            },
            "nullable": true
          },
          "ServiceVersionSettings": {
            "$ref": "#/components/schemas/ServiceVersionSettings"
          },
          "BehaviorId": {
            "type": "integer",
            "format": "int32"
          },
          "BehaviorName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DefaultNodeAddress": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "NodeKey": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "PolicyKey": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "NodeId": {
            "type": "integer",
            "format": "int32"
          },
          "PolicyId": {
            "type": "integer",
            "format": "int32"
          },
          "Address": {
            "type": "string",
            "nullable": true
          },
          "NodeName": {
            "type": "string",
            "nullable": true
          },
          "NodeFolderId": {
            "type": "integer",
            "format": "int32"
          },
          "PolicyName": {
            "type": "string",
            "nullable": true
          },
          "PolicyFolderId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DefaultAuthorizationRule": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Priority": {
            "type": "integer",
            "format": "int32"
          },
          "Action": {
            "$ref": "#/components/schemas/Action"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "FolderId": {
            "type": "integer",
            "format": "int32"
          },
          "IsGroup": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ServiceVersionSettings": {
        "type": "object",
        "properties": {
          "TransitWindows": {
            "type": "boolean"
          },
          "TransitUserName": {
            "type": "boolean"
          },
          "UserNameAuth": {
            "enum": [
              "Windows",
              "None",
              "Custom"
            ],
            "type": "string",
            "nullable": true
          },
          "MapX509": {
            "type": "boolean"
          },
          "MapSaml": {
            "type": "boolean"
          },
          "AzureDiscovery": {
            "type": "boolean"
          },
          "SyncProcessing": {
            "type": "boolean"
          },
          "UseInternalSTS": {
            "type": "boolean"
          },
          "InternalStsSettings": {
            "$ref": "#/components/schemas/SecurityTokenServiceSettings"
          },
          "TransitRequestHeaders": {
            "type": "string",
            "nullable": true
          },
          "TransitResponseHeaders": {
            "type": "string",
            "nullable": true
          },
          "ErrorsHandling": {
            "$ref": "#/components/schemas/WebErrorsHandling"
          },
          "Cors": {
            "$ref": "#/components/schemas/CorsSettings"
          },
          "Diagnostics": {
            "$ref": "#/components/schemas/DiagnosticSettings"
          },
          "RequestMimeTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "ResponseMimeTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "MonitoringFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonitoringFilterBase"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SecurityTokenServiceSettings": {
        "type": "object",
        "properties": {
          "JwtSigningAlgorithm": {
            "enum": [
              "RS256",
              "HS256"
            ],
            "type": "string",
            "nullable": true
          },
          "TokenLifetime": {
            "type": "string",
            "nullable": true
          },
          "SigningSecret": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebErrorsHandling": {
        "type": "object",
        "properties": {
          "AccessDeniedStatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "AccessDeniedMessage": {
            "type": "string",
            "nullable": true
          },
          "InvalidRequestStatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "InvalidRequestMessage": {
            "type": "string",
            "nullable": true
          },
          "InternalErrorStatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "MessageContentFormat": {
            "enum": [
              "None",
              "Xml",
              "Json",
              "Text"
            ],
            "type": "string",
            "nullable": true
          },
          "FaultStatusCodes": {
            "type": "string",
            "nullable": true
          },
          "FaultExpression": {
            "$ref": "#/components/schemas/AuthorizationExpressionBase"
          },
          "ErrorHandlerFullyQualifiedTypeName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CorsSettings": {
        "type": "object",
        "properties": {
          "AllowedOrigins": {
            "type": "string",
            "nullable": true
          },
          "AllowedMethods": {
            "type": "string",
            "nullable": true
          },
          "AllowedHeaders": {
            "type": "string",
            "nullable": true
          },
          "ExposedHeaders": {
            "type": "string",
            "nullable": true
          },
          "AllowCredentials": {
            "type": "boolean"
          },
          "PreflightMaxAge": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DiagnosticSettings": {
        "type": "object",
        "properties": {
          "AuthorizationTraceEnabled": {
            "type": "boolean"
          },
          "MessagePipelineTraceEnabled": {
            "type": "boolean"
          },
          "OAuthTraceEnabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "MonitoringFilterBase": {
        "type": "object",
        "additionalProperties": false
      },
      "BehaviorSearchResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchResult"
          }
        ],
        "properties": {
          "Kind": {
            "$ref": "#/components/schemas/Kind2"
          }
        },
        "additionalProperties": false
      },
      "BehaviorSearchQuery": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchQuery"
          }
        ],
        "properties": {
          "Configuration": {
            "type": "string",
            "nullable": true
          },
          "Kind": {
            "$ref": "#/components/schemas/Kind2"
          }
        },
        "additionalProperties": false
      },
      "NodeDefinition": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Node"
          }
        ],
        "properties": {
          "IsPopulated": {
            "type": "boolean"
          },
          "BaseAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeAddress"
            },
            "nullable": true
          },
          "Identities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityDefinitionBase"
            },
            "nullable": true
          },
          "TrustedIssuers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Issuer"
            },
            "nullable": true
          },
          "Instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeInstance"
            },
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NodeAddress": {
        "type": "object",
        "properties": {
          "NodeId": {
            "type": "integer",
            "format": "int32"
          },
          "Address": {
            "type": "string",
            "nullable": true
          },
          "Kind": {
            "$ref": "#/components/schemas/Kind4"
          },
          "Configuration": {
            "$ref": "#/components/schemas/AzureSecurityConfiguration"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IdentityDefinitionBase": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Kind": {
            "$ref": "#/components/schemas/Kind3"
          },
          "FriendlyName": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "IsPublic": {
            "type": "boolean"
          },
          "FolderId": {
            "type": "integer",
            "format": "int32"
          },
          "Expired": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Issuer": {
        "type": "object",
        "properties": {
          "FriendlyName": {
            "type": "string",
            "nullable": true
          },
          "IssuerName": {
            "type": "string",
            "nullable": true
          },
          "Thumbprint": {
            "type": "string",
            "nullable": true
          },
          "Certificate": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "NodeId": {
            "type": "integer",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NodeInstance": {
        "type": "object",
        "properties": {
          "NodeId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "LastHeartbeat": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "LastReportedStatus": {
            "$ref": "#/components/schemas/LastReportedStatus"
          },
          "Status": {
            "$ref": "#/components/schemas/LastReportedStatus"
          },
          "MachineName": {
            "type": "string",
            "nullable": true
          },
          "ClientAddress": {
            "type": "string",
            "nullable": true
          },
          "RuntimeVersion": {
            "type": "string",
            "nullable": true
          },
          "Information": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NodeSettings": {
        "type": "object",
        "properties": {
          "ClientAddressHeaderName": {
            "type": "string",
            "nullable": true
          },
          "ClientAddressOptions": {
            "enum": [
              "None",
              "TakeLast"
            ],
            "type": "string",
            "nullable": true
          },
          "ChangeMode": {
            "enum": [
              "ServiceRestart",
              "NodeRecycle"
            ],
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AzureSecurityConfiguration": {
        "type": "object",
        "properties": {
          "CredentialType": {
            "enum": [
              "None",
              "SharedSecret",
              "SimpleWebToken",
              "Saml",
              "SharedAccessSignature",
              "OAuth",
              "Windows"
            ],
            "type": "string",
            "nullable": true
          },
          "SharedSecret": {
            "$ref": "#/components/schemas/AzureSharedSecret"
          },
          "SharedAccessSignature": {
            "$ref": "#/components/schemas/AzureSharedAccessSignature"
          },
          "Credential": {
            "$ref": "#/components/schemas/AzureNetworkCredential"
          },
          "StsUri": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AzureSharedSecret": {
        "type": "object",
        "properties": {
          "IssuerName": {
            "type": "string",
            "nullable": true
          },
          "IssuerSecret": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AzureSharedAccessSignature": {
        "type": "object",
        "properties": {
          "KeyName": {
            "type": "string",
            "nullable": true
          },
          "SharedAccessKey": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AzureNetworkCredential": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string",
            "nullable": true
          },
          "Password": {
            "type": "string",
            "nullable": true
          },
          "Domain": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Node": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "FolderId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "NodeType": {
            "$ref": "#/components/schemas/NodeType"
          },
          "HeartbeatInterval": {
            "type": "string",
            "nullable": true
          },
          "LastUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Settings": {
            "$ref": "#/components/schemas/NodeSettings"
          }
        },
        "additionalProperties": false
      },
      "NodesSummary": {
        "type": "object",
        "properties": {
          "IdleInstances": {
            "type": "integer",
            "format": "int32"
          },
          "NormalInstances": {
            "type": "integer",
            "format": "int32"
          },
          "WarningInstances": {
            "type": "integer",
            "format": "int32"
          },
          "ErrorInstances": {
            "type": "integer",
            "format": "int32"
          },
          "TotalNodes": {
            "type": "integer",
            "format": "int32"
          },
          "EnabledNodes": {
            "type": "integer",
            "format": "int32"
          },
          "TotalServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "HostedServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "Schemes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchemeSummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SchemeSummary": {
        "type": "object",
        "properties": {
          "Scheme": {
            "type": "string",
            "nullable": true
          },
          "Kind": {
            "$ref": "#/components/schemas/Kind4"
          },
          "TotalEndpoints": {
            "type": "integer",
            "format": "int32"
          },
          "HostedEndpoints": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "NodeSearchQuery": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchQuery"
          }
        ],
        "properties": {
          "Status": {
            "$ref": "#/components/schemas/LastReportedStatus"
          },
          "BaseAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RouterType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "FullyQualifiedTypeName": {
            "type": "string",
            "nullable": true
          },
          "Configuration": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExpressionType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "FullyQualifiedTypeName": {
            "type": "string",
            "nullable": true
          },
          "IsSingleCall": {
            "type": "boolean"
          },
          "Configuration": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ComponentType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "FullyQualifiedTypeName": {
            "type": "string",
            "nullable": true
          },
          "IsSingleCall": {
            "type": "boolean"
          },
          "Configuration": {
            "type": "string",
            "nullable": true
          },
          "AllowedPositions": {
            "enum": [
              "None",
              "InboundRequest",
              "InboundResponse",
              "OutboundRequest",
              "OutboundResponse",
              "All"
            ],
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MetadataInfo": {
        "type": "object",
        "properties": {
          "FileId": {
            "type": "integer",
            "format": "int32"
          },
          "Contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractInfo"
            },
            "nullable": true
          },
          "Services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceInfo"
            },
            "nullable": true
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContractInfo": {
        "type": "object",
        "properties": {
          "QName": {
            "$ref": "#/components/schemas/XmlQualifiedName"
          },
          "Operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperationInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ServiceInfo": {
        "type": "object",
        "properties": {
          "QName": {
            "$ref": "#/components/schemas/XmlQualifiedName"
          },
          "Endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ErrorInfo": {
        "type": "object",
        "properties": {
          "IsWarning": {
            "type": "boolean"
          },
          "Message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OperationInfo": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "ExchangePattern": {
            "$ref": "#/components/schemas/ExchangePattern"
          }
        },
        "additionalProperties": false
      },
      "EndpointInfo": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Address": {
            "type": "string",
            "nullable": true
          },
          "ContractQName": {
            "$ref": "#/components/schemas/XmlQualifiedName"
          }
        },
        "additionalProperties": false
      },
      "ClientEndpointConfiguration": {
        "type": "object",
        "properties": {
          "Address": {
            "type": "string",
            "nullable": true
          },
          "BindingConfiguration": {
            "type": "string",
            "nullable": true
          },
          "ClientIdentities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityDefinitionBase"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RestMetadataInfo": {
        "type": "object",
        "properties": {
          "FileId": {
            "type": "integer",
            "format": "int32"
          },
          "ServiceName": {
            "type": "string",
            "nullable": true
          },
          "Operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestOperationInfo"
            },
            "nullable": true
          },
          "Endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestEndpointInfo"
            },
            "nullable": true
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RestOperationInfo": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "HttpMethod": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RestEndpointInfo": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Address": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthorizationRuleDefinition": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthorizationRule"
          }
        ],
        "properties": {
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthorizationRule": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "FolderId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Expression": {
            "$ref": "#/components/schemas/AuthorizationExpressionBase"
          }
        },
        "additionalProperties": false
      },
      "AuthorizationClaimType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "ClaimType": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthorizationRulesSummary": {
        "type": "object",
        "properties": {
          "TotalRules": {
            "type": "integer",
            "format": "int32"
          },
          "ReferencedRules": {
            "type": "integer",
            "format": "int32"
          },
          "TotalReferences": {
            "type": "integer",
            "format": "int32"
          },
          "TotalServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "HostedServiceVersions": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AuthorizationRuleSearchResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchResult"
          }
        ],
        "additionalProperties": false
      },
      "AuthorizationRuleSearchQuery": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchQuery"
          }
        ],
        "properties": {
          "Expression": {
            "type": "string",
            "nullable": true
          },
          "Keywords": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthorizationGroupDefinition": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthorizationGroup"
          }
        ],
        "properties": {
          "Members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorizationGroupMember"
            },
            "nullable": true
          },
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthorizationGroupMember": {
        "type": "object",
        "properties": {
          "GroupId": {
            "type": "integer",
            "format": "int32"
          },
          "MemberRuleId": {
            "type": "integer",
            "format": "int32"
          },
          "MemberRuleName": {
            "type": "string",
            "nullable": true
          },
          "MemberRuleExpression": {
            "$ref": "#/components/schemas/AuthorizationExpressionBase"
          },
          "MemberGroupId": {
            "type": "integer",
            "format": "int32"
          },
          "MemberGroupName": {
            "type": "string",
            "nullable": true
          },
          "Priority": {
            "type": "integer",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthorizationGroup": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "FolderId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthorizationGroupsSummary": {
        "type": "object",
        "properties": {
          "TotalGroups": {
            "type": "integer",
            "format": "int32"
          },
          "ReferencedGroups": {
            "type": "integer",
            "format": "int32"
          },
          "TotalReferences": {
            "type": "integer",
            "format": "int32"
          },
          "TotalServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "HostedServiceVersions": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AuthorizationGroupSearchResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchResult"
          }
        ],
        "additionalProperties": false
      },
      "AuthorizationGroupSearchQuery": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchQuery"
          }
        ],
        "properties": {
          "Keywords": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomEntityDefinition": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomEntity"
          }
        ],
        "properties": {
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "nullable": true
          },
          "References": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityReference"
            },
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomEntity": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "FolderId": {
            "type": "integer",
            "format": "int32"
          },
          "FriendlyName": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomEntitiesSummary": {
        "type": "object",
        "properties": {
          "TotalEntities": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CustomEntitySearchQuery": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchQuery"
          }
        ],
        "properties": {
          "Keywords": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExtensibilityTypes": {
        "type": "object",
        "properties": {
          "ExpressionTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpressionType"
            },
            "nullable": true
          },
          "RouterTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouterType"
            },
            "nullable": true
          },
          "ComponentTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentType"
            },
            "nullable": true
          },
          "AlertHandlerTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertHandlerType"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlertHandlerType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "FullyQualifiedTypeName": {
            "type": "string",
            "nullable": true
          },
          "Configuration": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MonitoringTransactionSummary": {
        "type": "object",
        "properties": {
          "Time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "CntS": {
            "type": "integer",
            "format": "int64"
          },
          "CntF": {
            "type": "integer",
            "format": "int64"
          },
          "CntE": {
            "type": "integer",
            "format": "int64"
          },
          "MaxD": {
            "type": "integer",
            "format": "int32"
          },
          "MinD": {
            "type": "integer",
            "format": "int32"
          },
          "SumD": {
            "type": "integer",
            "format": "int64"
          },
          "MaxS": {
            "type": "integer",
            "format": "int64"
          },
          "ReqB": {
            "type": "integer",
            "format": "int64"
          },
          "ResB": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TransactionSummaryRequest": {
        "type": "object",
        "properties": {
          "Type": {
            "$ref": "#/components/schemas/Type"
          },
          "Start": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "End": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Res": {
            "type": "integer",
            "format": "int32"
          },
          "Unit": {
            "$ref": "#/components/schemas/TimeUnit"
          },
          "NodeId": {
            "type": "integer",
            "format": "int32"
          },
          "NodeInstanceId": {
            "type": "integer",
            "format": "int32"
          },
          "SvcId": {
            "type": "integer",
            "format": "int32"
          },
          "OpId": {
            "type": "integer",
            "format": "int32"
          },
          "FolderId": {
            "type": "integer",
            "format": "int32"
          },
          "IsVirtual": {
            "type": "boolean"
          },
          "AppId": {
            "type": "integer",
            "format": "int32"
          },
          "SubId": {
            "type": "integer",
            "format": "int32"
          },
          "ProductId": {
            "type": "integer",
            "format": "int32"
          },
          "ConsumerId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MonitoringTransactionHeader": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "Type": {
            "$ref": "#/components/schemas/Type"
          },
          "Time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "OpName": {
            "type": "string",
            "nullable": true
          },
          "InEpId": {
            "type": "integer",
            "format": "int32"
          },
          "InEpName": {
            "type": "string",
            "nullable": true
          },
          "InEpAdd": {
            "type": "string",
            "nullable": true
          },
          "InSvcId": {
            "type": "integer",
            "format": "int32"
          },
          "InSvcNum": {
            "type": "integer",
            "format": "int32"
          },
          "InSvcVerName": {
            "type": "string",
            "nullable": true
          },
          "InSvcName": {
            "type": "string",
            "nullable": true
          },
          "InIp": {
            "type": "string",
            "nullable": true
          },
          "OutEpId": {
            "type": "integer",
            "format": "int32"
          },
          "OutEpName": {
            "type": "string",
            "nullable": true
          },
          "OutEpAdd": {
            "type": "string",
            "nullable": true
          },
          "OutSvcId": {
            "type": "integer",
            "format": "int32"
          },
          "OutSvcNum": {
            "type": "integer",
            "format": "int32"
          },
          "OutSvcVerName": {
            "type": "string",
            "nullable": true
          },
          "OutSvcName": {
            "type": "string",
            "nullable": true
          },
          "Duration": {
            "type": "integer",
            "format": "int32"
          },
          "Status": {
            "$ref": "#/components/schemas/Status4"
          },
          "Error": {
            "type": "string",
            "nullable": true
          },
          "HttpStatusCode": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TransactionHeadersRequest": {
        "type": "object",
        "properties": {
          "TransactionType": {
            "$ref": "#/components/schemas/Type"
          },
          "TransactionId": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "StartTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "EndTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "NodeId": {
            "type": "integer",
            "format": "int32"
          },
          "NodeInstanceId": {
            "type": "integer",
            "format": "int32"
          },
          "InboundServiceVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "InboundEndpointId": {
            "type": "integer",
            "format": "int32"
          },
          "OperationId": {
            "type": "integer",
            "format": "int32"
          },
          "FolderId": {
            "type": "integer",
            "format": "int32"
          },
          "IsVirtual": {
            "type": "boolean"
          },
          "AuthId": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorizationGroupId": {
            "type": "integer",
            "format": "int32"
          },
          "Action": {
            "type": "string",
            "nullable": true
          },
          "ClientAddress": {
            "type": "string",
            "nullable": true
          },
          "RequestContent": {
            "type": "string",
            "nullable": true
          },
          "ResponseContent": {
            "type": "string",
            "nullable": true
          },
          "PropertyName": {
            "type": "string",
            "nullable": true
          },
          "PropertyValue": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/Status4"
          },
          "AppId": {
            "type": "integer",
            "format": "int32"
          },
          "SubId": {
            "type": "integer",
            "format": "int32"
          },
          "ProductId": {
            "type": "integer",
            "format": "int32"
          },
          "ConsumerId": {
            "type": "integer",
            "format": "int32"
          },
          "SortField": {
            "enum": [
              "StartDateTime",
              "OperationName",
              "InboundEndpointName",
              "InboundPhysicalAddress",
              "InboundServiceName",
              "InboundServiceVersionName",
              "InboundClientAddress",
              "OutboundEndpointName",
              "OutboundPhysicalAddress",
              "OutboundServiceVersionName",
              "OutboundServiceName",
              "Duration",
              "Status",
              "TransactionError",
              "HttpStatusCode"
            ],
            "type": "string",
            "nullable": true
          },
          "SortOrder": {
            "$ref": "#/components/schemas/SortOrder"
          }
        },
        "additionalProperties": false
      },
      "MonitoringTransactionDetails": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "TransactionId": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "ExchangeId": {
            "type": "string",
            "nullable": true
          },
          "TransactionType": {
            "$ref": "#/components/schemas/Type"
          },
          "StartDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "NodeId": {
            "type": "integer",
            "format": "int32"
          },
          "NodeName": {
            "type": "string",
            "nullable": true
          },
          "NodeInstanceId": {
            "type": "integer",
            "format": "int32"
          },
          "NodeInstanceName": {
            "type": "string",
            "nullable": true
          },
          "NodeInstanceMachineName": {
            "type": "string",
            "nullable": true
          },
          "NodeInstanceClientAddress": {
            "type": "string",
            "nullable": true
          },
          "RequestAction": {
            "type": "string",
            "nullable": true
          },
          "OperationId": {
            "type": "integer",
            "format": "int32"
          },
          "OperationName": {
            "type": "string",
            "nullable": true
          },
          "ContractId": {
            "type": "integer",
            "format": "int32"
          },
          "ContractQName": {
            "$ref": "#/components/schemas/XmlQualifiedName"
          },
          "InboundEndpointId": {
            "type": "integer",
            "format": "int32"
          },
          "InboundEndpointName": {
            "type": "string",
            "nullable": true
          },
          "InboundPhysicalAddress": {
            "type": "string",
            "nullable": true
          },
          "InboundLogicalAddress": {
            "type": "string",
            "nullable": true
          },
          "InboundServiceVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "InboundServiceVersionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "InboundServiceVersionVersion": {
            "type": "string",
            "nullable": true
          },
          "InboundServiceVersionName": {
            "type": "string",
            "nullable": true
          },
          "InboundServiceId": {
            "type": "integer",
            "format": "int32"
          },
          "InboundServiceName": {
            "type": "string",
            "nullable": true
          },
          "OutboundEndpointId": {
            "type": "integer",
            "format": "int32"
          },
          "OutboundEndpointName": {
            "type": "string",
            "nullable": true
          },
          "OutboundPhysicalAddress": {
            "type": "string",
            "nullable": true
          },
          "OutboundServiceVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "OutboundServiceVersionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "OutboundServiceVersionVersion": {
            "type": "string",
            "nullable": true
          },
          "OutboundServiceVersionName": {
            "type": "string",
            "nullable": true
          },
          "OutboundServiceId": {
            "type": "integer",
            "format": "int32"
          },
          "OutboundServiceName": {
            "type": "string",
            "nullable": true
          },
          "Duration": {
            "type": "integer",
            "format": "int32"
          },
          "RequestSize": {
            "type": "integer",
            "format": "int64"
          },
          "ResponseSize": {
            "type": "integer",
            "format": "int64"
          },
          "IdentityClaims": {
            "type": "string",
            "nullable": true
          },
          "ClientAddress": {
            "type": "string",
            "nullable": true
          },
          "HttpStatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "Status": {
            "$ref": "#/components/schemas/Status4"
          },
          "FaultReason": {
            "type": "string",
            "nullable": true
          },
          "FaultDetail": {
            "type": "string",
            "nullable": true
          },
          "AuthId": {
            "type": "integer",
            "format": "int32"
          },
          "AuthName": {
            "type": "string",
            "nullable": true
          },
          "IsDenied": {
            "type": "boolean"
          },
          "Kind": {
            "$ref": "#/components/schemas/Kind"
          },
          "ApplicationId": {
            "type": "integer",
            "format": "int32"
          },
          "ApplicationName": {
            "type": "string",
            "nullable": true
          },
          "SubscriptionId": {
            "type": "integer",
            "format": "int32"
          },
          "SubscriptionName": {
            "type": "string",
            "nullable": true
          },
          "ProductId": {
            "type": "integer",
            "format": "int32"
          },
          "ProductName": {
            "type": "string",
            "nullable": true
          },
          "ConsumerId": {
            "type": "integer",
            "format": "int32"
          },
          "ConsumerName": {
            "type": "string",
            "nullable": true
          },
          "Records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonitoringRecord"
            },
            "nullable": true
          },
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonitoringTransactionProperty"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MonitoringRecord": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ExchId": {
            "type": "string",
            "nullable": true
          },
          "Time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Point": {
            "$ref": "#/components/schemas/Point"
          },
          "NodeId": {
            "type": "integer",
            "format": "int32"
          },
          "EpId": {
            "type": "integer",
            "format": "int32"
          },
          "Fault": {
            "type": "boolean"
          },
          "Size": {
            "type": "integer",
            "format": "int64"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "TransportData": {
            "type": "string",
            "nullable": true
          },
          "IsOutbound": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "MonitoringTransactionProperty": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "TranId": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "ExchId": {
            "type": "string",
            "nullable": true
          },
          "EpId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "nullable": true
          },
          "Time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MonitoringActivity": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "NodeId": {
            "type": "integer",
            "format": "int32"
          },
          "NodeName": {
            "type": "string",
            "nullable": true
          },
          "InId": {
            "type": "integer",
            "format": "int32"
          },
          "NodeInstanceName": {
            "type": "string",
            "nullable": true
          },
          "TranId": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "ExchId": {
            "type": "string",
            "nullable": true
          },
          "SvcId": {
            "type": "integer",
            "format": "int32"
          },
          "ServiceVersionName": {
            "type": "string",
            "nullable": true
          },
          "EpId": {
            "type": "integer",
            "format": "int32"
          },
          "EndpointName": {
            "type": "string",
            "nullable": true
          },
          "Time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "Details": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MonitoringActivitiesRequest": {
        "type": "object",
        "properties": {
          "StartDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "EndDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "TransactionId": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "MinimumSeverity": {
            "$ref": "#/components/schemas/Severity"
          },
          "NodeId": {
            "type": "integer",
            "format": "int32"
          },
          "NodeInstanceId": {
            "type": "integer",
            "format": "int32"
          },
          "ServiceVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "SortField": {
            "enum": [
              "ActivityDateTime",
              "NodeName",
              "NodeInstanceName",
              "TransactionId",
              "ServiceVersionName",
              "EndpointName",
              "Severity",
              "ActivityMessage"
            ],
            "type": "string",
            "nullable": true
          },
          "SortOrder": {
            "$ref": "#/components/schemas/SortOrder"
          },
          "ActivityMessage": {
            "type": "string",
            "nullable": true
          },
          "IgnoreTransactionActivities": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "MonitoringTransactionTrace": {
        "type": "object",
        "properties": {
          "AuthorizationTrace": {
            "type": "string",
            "nullable": true
          },
          "MessageProcessingTrace": {
            "type": "string",
            "nullable": true
          },
          "OAuthTrace": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ServiceVersionUsageSummary": {
        "type": "object",
        "properties": {
          "ServiceVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "FriendlyName": {
            "type": "string",
            "nullable": true
          },
          "Version": {
            "type": "string",
            "nullable": true
          },
          "VersionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "ServiceName": {
            "type": "string",
            "nullable": true
          },
          "Kind": {
            "$ref": "#/components/schemas/Kind"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int64"
          },
          "FailureCount": {
            "type": "integer",
            "format": "int64"
          },
          "ExceptionCount": {
            "type": "integer",
            "format": "int64"
          },
          "AverageDuration": {
            "type": "integer",
            "format": "int64"
          },
          "AverageBytes": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "ServiceVersionUsageSummaryRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/UsageSummaryRequest"
          }
        ],
        "properties": {
          "FolderId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UsageSummaryRequest": {
        "type": "object",
        "properties": {
          "ReportType": {
            "enum": [
              "MostCalled",
              "MostFailed",
              "MostPercentageFailed",
              "LeastResponsive",
              "MostErrored",
              "MostPercentageErrored"
            ],
            "type": "string",
            "nullable": true
          },
          "StartDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "EndDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ServiceVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "AuthorizationRuleId": {
            "type": "integer",
            "format": "int32"
          },
          "ApplicationId": {
            "type": "integer",
            "format": "int32"
          },
          "SubscriptionId": {
            "type": "integer",
            "format": "int32"
          },
          "ProductId": {
            "type": "integer",
            "format": "int32"
          },
          "ConsumerId": {
            "type": "integer",
            "format": "int32"
          },
          "TopCount": {
            "type": "integer",
            "format": "int32"
          },
          "Options": {
            "enum": [
              "None",
              "IncludeVirtualServices",
              "IncludePhysicalServices",
              "IncludeDeletedServices",
              "IncludeSystemOperations",
              "IncludeDeletedOperations",
              "IncludeSubfolders",
              "IncludeDeletedSubscriptions",
              "IncludeDeletedProducts",
              "IncludeDeletedConsumers",
              "All"
            ],
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OperationUsageSummary": {
        "type": "object",
        "properties": {
          "OperationId": {
            "type": "integer",
            "format": "int32"
          },
          "OperationName": {
            "type": "string",
            "nullable": true
          },
          "ContractName": {
            "type": "string",
            "nullable": true
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int64"
          },
          "FailureCount": {
            "type": "integer",
            "format": "int64"
          },
          "ExceptionCount": {
            "type": "integer",
            "format": "int64"
          },
          "AverageDuration": {
            "type": "integer",
            "format": "int64"
          },
          "AverageBytes": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "OperationUsageSummaryRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/UsageSummaryRequest"
          }
        ],
        "additionalProperties": false
      },
      "ProductUsageSummary": {
        "type": "object",
        "properties": {
          "ProductId": {
            "type": "integer",
            "format": "int32"
          },
          "ProductName": {
            "type": "string",
            "nullable": true
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int64"
          },
          "FailureCount": {
            "type": "integer",
            "format": "int64"
          },
          "ExceptionCount": {
            "type": "integer",
            "format": "int64"
          },
          "AverageDuration": {
            "type": "integer",
            "format": "int64"
          },
          "AverageBytes": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "ConsumerUsageSummary": {
        "type": "object",
        "properties": {
          "ConsumerId": {
            "type": "integer",
            "format": "int32"
          },
          "ConsumerName": {
            "type": "string",
            "nullable": true
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int64"
          },
          "FailureCount": {
            "type": "integer",
            "format": "int64"
          },
          "ExceptionCount": {
            "type": "integer",
            "format": "int64"
          },
          "AverageDuration": {
            "type": "integer",
            "format": "int64"
          },
          "AverageBytes": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "SubscriptionUsageSummary": {
        "type": "object",
        "properties": {
          "SubscriptionId": {
            "type": "integer",
            "format": "int32"
          },
          "SubscriptionName": {
            "type": "string",
            "nullable": true
          },
          "ProductId": {
            "type": "integer",
            "format": "int32"
          },
          "ProductName": {
            "type": "string",
            "nullable": true
          },
          "ConsumerId": {
            "type": "integer",
            "format": "int32"
          },
          "ConsumerName": {
            "type": "string",
            "nullable": true
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int64"
          },
          "FailureCount": {
            "type": "integer",
            "format": "int64"
          },
          "ExceptionCount": {
            "type": "integer",
            "format": "int64"
          },
          "AverageDuration": {
            "type": "integer",
            "format": "int64"
          },
          "AverageBytes": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "ChangeSet": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "UserId": {
            "type": "integer",
            "format": "int32"
          },
          "UserName": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "IdentityName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangeSetDefinition": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ChangeSet"
          }
        ],
        "properties": {
          "Records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChangeRecord"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangeRecord": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "ChangeSetId": {
            "type": "integer",
            "format": "int32"
          },
          "EntityName": {
            "type": "string",
            "nullable": true
          },
          "EntityId": {
            "type": "integer",
            "format": "int32"
          },
          "EntityType": {
            "$ref": "#/components/schemas/EntityType"
          },
          "MajorEntityId": {
            "type": "integer",
            "format": "int32"
          },
          "MajorEntityType": {
            "$ref": "#/components/schemas/EntityType"
          },
          "MajorEntityName": {
            "type": "string",
            "nullable": true
          },
          "ChangeType": {
            "$ref": "#/components/schemas/ChangeTypes"
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32"
          },
          "UserName": {
            "type": "string",
            "nullable": true
          },
          "IdentityName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangeRecordDefinition": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ChangeRecord"
          }
        ],
        "properties": {
          "Fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChangeField"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangeField": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "ChangeRecordId": {
            "type": "integer",
            "format": "int32"
          },
          "FieldName": {
            "type": "string",
            "nullable": true
          },
          "PreviousValue": {
            "type": "string",
            "nullable": true
          },
          "NewValue": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserSession": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "UserId": {
            "type": "integer",
            "format": "int32"
          },
          "UserFullName": {
            "type": "string",
            "nullable": true
          },
          "StartDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "EndDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Duration": {
            "type": "string",
            "nullable": true
          },
          "IdentityName": {
            "type": "string",
            "nullable": true
          },
          "ClientAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserSessionsRequest": {
        "type": "object",
        "properties": {
          "StartDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "EndDateTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "format": "int32"
          },
          "FolderId": {
            "type": "integer",
            "format": "int32"
          },
          "IdentityName": {
            "type": "string",
            "nullable": true
          },
          "ClientAddress": {
            "type": "string",
            "nullable": true
          },
          "SortField": {
            "enum": [
              "StartDateTime",
              "EndDateTime",
              "Duration",
              "UserFullName",
              "IdentityName",
              "ClientAddress"
            ],
            "type": "string",
            "nullable": true
          },
          "SortOrder": {
            "$ref": "#/components/schemas/SortOrder"
          }
        },
        "additionalProperties": false
      },
      "UserDefinition": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/User"
          }
        ],
        "properties": {
          "Identities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityDefinitionBase"
            },
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "FolderId": {
            "type": "integer",
            "format": "int32"
          },
          "ConsumerId": {
            "type": "integer",
            "format": "int32"
          },
          "ConsumerName": {
            "type": "string",
            "nullable": true
          },
          "FullName": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "nullable": true
          },
          "SecurityRoleId": {
            "type": "integer",
            "format": "int32"
          },
          "SecurityRoleName": {
            "type": "string",
            "nullable": true
          },
          "Permission": {
            "$ref": "#/components/schemas/Permission"
          },
          "IsEnabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SecurityRoleSummary": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "TotalUsers": {
            "type": "integer",
            "format": "int32"
          },
          "EnabledUsers": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserSearchResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchResult"
          }
        ],
        "properties": {
          "SecurityRoleId": {
            "type": "integer",
            "format": "int32"
          },
          "SecurityRoleName": {
            "type": "string",
            "nullable": true
          },
          "IsEnabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UserSearchQuery": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchQuery"
          }
        ],
        "properties": {
          "SecurityRoleId": {
            "type": "integer",
            "format": "int32"
          },
          "Identity": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConsumerUserSearchQuery": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "FullName": {
            "type": "string",
            "nullable": true
          },
          "ConsumerId": {
            "type": "integer",
            "format": "int32"
          },
          "ConsumerName": {
            "type": "string",
            "nullable": true
          },
          "Permission": {
            "$ref": "#/components/schemas/Permission"
          },
          "Identity": {
            "type": "string",
            "nullable": true
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "SortField": {
            "enum": [
              "FullName",
              "ConsumerName",
              "Email",
              "Permission",
              "SecurityRoleName",
              "IsEnabled",
              "Created"
            ],
            "type": "string",
            "nullable": true
          },
          "SortOrder": {
            "$ref": "#/components/schemas/SortOrder"
          }
        },
        "additionalProperties": false
      },
      "AlertSourceType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlertGroup": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlertType": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "SourceId": {
            "type": "integer",
            "format": "int32"
          },
          "IntervalUnit": {
            "$ref": "#/components/schemas/TimeUnit"
          },
          "Interval": {
            "type": "integer",
            "format": "int32"
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "Configuration": {
            "type": "string",
            "nullable": true
          },
          "HandlersCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AlertTypesRequest": {
        "type": "object",
        "properties": {
          "ServiceAgreementId": {
            "type": "integer",
            "format": "int32"
          },
          "AlertSourceTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "AlertGroupId": {
            "type": "integer",
            "format": "int32"
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "FolderId": {
            "type": "integer",
            "format": "int32"
          },
          "EntityId": {
            "type": "integer",
            "format": "int32"
          },
          "EntityType": {
            "$ref": "#/components/schemas/EntityType"
          }
        },
        "additionalProperties": false
      },
      "AlertTypeDefinition": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AlertType"
          }
        ],
        "properties": {
          "ServiceAgreements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceAgreementAlertType"
            },
            "nullable": true
          },
          "AlertHandlers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertHandler"
            },
            "nullable": true
          },
          "ChangeEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChangeEntityAlertType"
            },
            "nullable": true
          },
          "ChangeFolders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChangeFolderAlertType"
            },
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ServiceAgreementAlertType": {
        "type": "object",
        "properties": {
          "AlertTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "AlertSubtype": {
            "type": "string",
            "nullable": true
          },
          "ServiceAgreementId": {
            "type": "integer",
            "format": "int32"
          },
          "ServiceAgreementMetricId": {
            "type": "integer",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlertHandler": {
        "type": "object",
        "properties": {
          "AlertGroupId": {
            "type": "integer",
            "format": "int32"
          },
          "AlertTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "AlertSubtype": {
            "type": "string",
            "nullable": true
          },
          "AlertHandlerTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "Configuration": {
            "type": "string",
            "nullable": true
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "IntervalUnit": {
            "$ref": "#/components/schemas/TimeUnit"
          },
          "Interval": {
            "type": "integer",
            "format": "int32"
          },
          "LastExecutionTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangeEntityAlertType": {
        "type": "object",
        "properties": {
          "AlertTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "EntityId": {
            "type": "integer",
            "format": "int32"
          },
          "EntityType": {
            "$ref": "#/components/schemas/EntityType"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangeFolderAlertType": {
        "type": "object",
        "properties": {
          "AlertTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "FolderId": {
            "type": "integer",
            "format": "int32"
          },
          "EntityTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityType"
            },
            "nullable": true
          },
          "ChangeTypes": {
            "$ref": "#/components/schemas/ChangeTypes"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlertGroupDefinition": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AlertGroup"
          }
        ],
        "properties": {
          "AlertTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertType"
            },
            "nullable": true
          },
          "AlertHandlers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertHandler"
            },
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlertSummary": {
        "type": "object",
        "properties": {
          "Time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Total": {
            "type": "integer",
            "format": "int64"
          },
          "Observed": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "AlertSummaryRequest": {
        "type": "object",
        "properties": {
          "Start": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "End": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Res": {
            "type": "integer",
            "format": "int32"
          },
          "Unit": {
            "$ref": "#/components/schemas/TimeUnit"
          },
          "AlertTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "AlertSourceTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "AlertGroupId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Alert": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "Time": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "TypeId": {
            "type": "integer",
            "format": "int32"
          },
          "Subtype": {
            "type": "string",
            "nullable": true
          },
          "Text": {
            "type": "string",
            "nullable": true
          },
          "Data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProperty"
            },
            "nullable": true
          },
          "Observed": {
            "type": "boolean"
          },
          "AlertTypeName": {
            "type": "string",
            "nullable": true
          },
          "AlertSourceTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "AlertSourceTypeName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataProperty": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlertRequest": {
        "type": "object",
        "properties": {
          "StartTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "EndTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "AlertTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "AlertSourceTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "AlertGroupId": {
            "type": "integer",
            "format": "int32"
          },
          "IsObserved": {
            "type": "boolean"
          },
          "SortField": {
            "enum": [
              "AlertDateTime",
              "AlertTypeName",
              "AlertSourceTypeName",
              "IsObserved",
              "Description"
            ],
            "type": "string",
            "nullable": true
          },
          "SortOrder": {
            "$ref": "#/components/schemas/SortOrder"
          }
        },
        "additionalProperties": false
      },
      "PortalNotificationConfiguration": {
        "type": "object",
        "properties": {
          "EnabledAlertHandlers": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "00000000-0000-0000-0000-000000000000",
              "nullable": true
            },
            "nullable": true
          },
          "ToAddresses": {
            "type": "string",
            "nullable": true
          },
          "SecurityRoles": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Folder": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "FolderId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FolderSummary": {
        "type": "object",
        "properties": {
          "Folder": {
            "$ref": "#/components/schemas/Folder"
          },
          "Rules": {
            "$ref": "#/components/schemas/AuthorizationRulesSummary"
          },
          "AuthorizationGroups": {
            "$ref": "#/components/schemas/AuthorizationGroupsSummary"
          },
          "Bindings": {
            "$ref": "#/components/schemas/BindingsSummary"
          },
          "Behaviors": {
            "$ref": "#/components/schemas/BehaviorsSummary"
          },
          "Nodes": {
            "$ref": "#/components/schemas/NodesSummary"
          },
          "Services": {
            "$ref": "#/components/schemas/ServicesSummary"
          },
          "ServiceAgreements": {
            "$ref": "#/components/schemas/ServiceAgreementsSummary"
          },
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityRoleSummary"
            },
            "nullable": true
          },
          "CustomEntities": {
            "$ref": "#/components/schemas/CustomEntitiesSummary"
          },
          "Identities": {
            "$ref": "#/components/schemas/IdentitiesSummary"
          }
        },
        "additionalProperties": false
      },
      "BindingsSummary": {
        "type": "object",
        "properties": {
          "TotalBindings": {
            "type": "integer",
            "format": "int32"
          },
          "ReferencedBindings": {
            "type": "integer",
            "format": "int32"
          },
          "TotalReferences": {
            "type": "integer",
            "format": "int32"
          },
          "HostedReferences": {
            "type": "integer",
            "format": "int32"
          },
          "TotalServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "HostedServiceVersions": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "BehaviorsSummary": {
        "type": "object",
        "properties": {
          "TotalBehaviors": {
            "type": "integer",
            "format": "int32"
          },
          "ServiceBehaviors": {
            "type": "integer",
            "format": "int32"
          },
          "ReferencedBehaviors": {
            "type": "integer",
            "format": "int32"
          },
          "TotalReferences": {
            "type": "integer",
            "format": "int32"
          },
          "HostedReferences": {
            "type": "integer",
            "format": "int32"
          },
          "TotalServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "HostedServiceVersions": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ServicesSummary": {
        "type": "object",
        "properties": {
          "TotalServices": {
            "type": "integer",
            "format": "int32"
          },
          "VirtualServices": {
            "type": "integer",
            "format": "int32"
          },
          "SoapServices": {
            "type": "integer",
            "format": "int32"
          },
          "DraftServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "ActiveServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "ObsoleteServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "RetiredServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "TotalServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "VirtualServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "ServiceVersionsThatRequireAccessKey": {
            "type": "integer",
            "format": "int32"
          },
          "SoapServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "VirtualizedServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "HostedServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "TotalNodes": {
            "type": "integer",
            "format": "int32"
          },
          "HostingNodes": {
            "type": "integer",
            "format": "int32"
          },
          "Schemes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchemeSummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IdentitiesSummary": {
        "type": "object",
        "properties": {
          "TotalIdentities": {
            "type": "integer",
            "format": "int32"
          },
          "ReferencedIdentities": {
            "type": "integer",
            "format": "int32"
          },
          "TotalReferences": {
            "type": "integer",
            "format": "int32"
          },
          "HostedReferences": {
            "type": "integer",
            "format": "int32"
          },
          "TotalServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "HostedServiceVersions": {
            "type": "integer",
            "format": "int32"
          },
          "IdentityKinds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityKindSummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IdentityKindSummary": {
        "type": "object",
        "properties": {
          "Kind": {
            "$ref": "#/components/schemas/Kind3"
          },
          "TotalIdentities": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ServiceDefinition": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Service"
          }
        ],
        "properties": {
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "nullable": true
          },
          "ServiceVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceVersionSummary"
            },
            "nullable": true
          },
          "References": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityReference"
            },
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ServiceVersionSummary": {
        "type": "object",
        "properties": {
          "ServiceVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "FriendlyName": {
            "type": "string",
            "nullable": true
          },
          "Version": {
            "type": "string",
            "nullable": true
          },
          "VersionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "Status": {
            "$ref": "#/components/schemas/Status2"
          },
          "LastUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "TotalOperations": {
            "type": "integer",
            "format": "int32"
          },
          "TotalContracts": {
            "type": "integer",
            "format": "int32"
          },
          "TotalEndpoints": {
            "type": "integer",
            "format": "int32"
          },
          "HostedEndpoints": {
            "type": "integer",
            "format": "int32"
          },
          "TotalNodes": {
            "type": "integer",
            "format": "int32"
          },
          "HostingNodes": {
            "type": "integer",
            "format": "int32"
          },
          "TotalVirtualizations": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Service": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "IsVirtual": {
            "type": "boolean"
          },
          "Kind": {
            "$ref": "#/components/schemas/Kind"
          },
          "FolderId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ServiceSearchResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchResult"
          }
        ],
        "properties": {
          "IsVirtual": {
            "type": "boolean"
          },
          "Kind": {
            "$ref": "#/components/schemas/Kind"
          }
        },
        "additionalProperties": false
      },
      "ServiceSearchQuery": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchQuery"
          }
        ],
        "properties": {
          "IsVirtual": {
            "type": "boolean"
          },
          "Kind": {
            "$ref": "#/components/schemas/Kind"
          },
          "Keywords": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ServiceVersionDefinition": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ServiceVersion"
          }
        ],
        "properties": {
          "IsPopulated": {
            "type": "boolean"
          },
          "Behavior": {
            "$ref": "#/components/schemas/Behavior"
          },
          "Contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractDefinition"
            },
            "nullable": true
          },
          "EndpointGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointGroupDefinition"
            },
            "nullable": true
          },
          "Nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeDefinition"
            },
            "nullable": true
          },
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "nullable": true
          },
          "References": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityReference"
            },
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Behavior": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "FolderId": {
            "type": "integer",
            "format": "int32"
          },
          "FriendlyName": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "IsPrivate": {
            "type": "boolean"
          },
          "Kind": {
            "$ref": "#/components/schemas/Kind2"
          },
          "Configuration": {
            "type": "string",
            "nullable": true
          },
          "Xml": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContractDefinition": {
        "type": "object",
        "properties": {
          "IsPopulated": {
            "type": "boolean"
          },
          "Operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperationDefinition"
            },
            "nullable": true
          },
          "Endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointDefinition"
            },
            "nullable": true
          },
          "ServiceVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Namespace": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "IsPublished": {
            "type": "boolean"
          },
          "ProtectionLevel": {
            "$ref": "#/components/schemas/ProtectionLevel"
          },
          "SessionMode": {
            "enum": [
              "Allowed",
              "Required",
              "NotAllowed"
            ],
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EndpointGroupDefinition": {
        "type": "object",
        "properties": {
          "IsPopulated": {
            "type": "boolean"
          },
          "Endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointDefinition"
            },
            "nullable": true
          },
          "Router": {
            "$ref": "#/components/schemas/RouterType"
          },
          "ServiceVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "ContractId": {
            "type": "integer",
            "format": "int32"
          },
          "RouterId": {
            "type": "integer",
            "format": "int32"
          },
          "RouterConfiguration": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OperationDefinition": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Operation"
          }
        ],
        "properties": {
          "IsPopulated": {
            "type": "boolean"
          },
          "Messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageDefinition"
            },
            "nullable": true
          },
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "nullable": true
          },
          "Kind": {
            "$ref": "#/components/schemas/Kind"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EndpointDefinition": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Endpoint"
          }
        ],
        "properties": {
          "IsPopulated": {
            "type": "boolean"
          },
          "NodeName": {
            "type": "string",
            "nullable": true
          },
          "Binding": {
            "$ref": "#/components/schemas/Binding"
          },
          "Behavior": {
            "$ref": "#/components/schemas/Behavior"
          },
          "Identities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityDefinitionBase"
            },
            "nullable": true
          },
          "DownstreamEndpointIdentities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityDefinitionBase"
            },
            "nullable": true
          },
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageDefinition": {
        "type": "object",
        "properties": {
          "IsPopulated": {
            "type": "boolean"
          },
          "Headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageHeaderDefinition"
            },
            "nullable": true
          },
          "OperationId": {
            "type": "integer",
            "format": "int32"
          },
          "Direction": {
            "$ref": "#/components/schemas/Direction"
          },
          "Action": {
            "type": "string",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Namespace": {
            "type": "string",
            "nullable": true
          },
          "Settings": {
            "$ref": "#/components/schemas/MessageSettings"
          },
          "BodyProtectionLevel": {
            "$ref": "#/components/schemas/ProtectionLevel"
          },
          "DownstreamMessageId": {
            "type": "integer",
            "format": "int32"
          },
          "TemplateFileId": {
            "type": "integer",
            "format": "int32"
          },
          "TemplateMessageVersion": {
            "$ref": "#/components/schemas/MessageVersion"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Binding": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "FolderId": {
            "type": "integer",
            "format": "int32"
          },
          "FriendlyName": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Namespace": {
            "type": "string",
            "nullable": true
          },
          "IsPrivate": {
            "type": "boolean"
          },
          "Configuration": {
            "type": "string",
            "nullable": true
          },
          "Capabilities": {
            "type": "string",
            "nullable": true
          },
          "Xml": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageHeaderDefinition": {
        "type": "object",
        "properties": {
          "IsPopulated": {
            "type": "boolean"
          },
          "MessageId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Namespace": {
            "type": "string",
            "nullable": true
          },
          "ProtectionLevel": {
            "$ref": "#/components/schemas/ProtectionLevel"
          },
          "DownstreamHeaderId": {
            "type": "integer",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Updated": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageSettings": {
        "type": "object",
        "properties": {
          "HttpMethod": {
            "type": "string",
            "nullable": true
          },
          "UriTemplate": {
            "type": "string",
            "nullable": true
          },
          "PreserveTrailingSlash": {
            "type": "boolean"
          },
          "UnknownQueryParameterAction": {
            "enum": [
              "PassThrough",
              "Ignore",
              "Reject"
            ],
            "type": "string",
            "nullable": true
          },
          "Parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageParameter"
            },
            "nullable": true
          },
          "RequestMimeTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "ResponseMimeTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "Responses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessage"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageParameter": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "VariableName": {
            "type": "string",
            "nullable": true
          },
          "Location": {
            "enum": [
              "Path",
              "Query",
              "Body",
              "Form",
              "Header",
              "Cookie"
            ],
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "DataType": {
            "$ref": "#/components/schemas/DataType"
          },
          "ArrayFormat": {
            "$ref": "#/components/schemas/ArrayFormat"
          },
          "ArrayItem": {
            "$ref": "#/components/schemas/Parameter"
          },
          "DataFormat": {
            "type": "string",
            "nullable": true
          },
          "Schema": {
            "type": "string",
            "nullable": true
          },
          "IsRequired": {
            "type": "boolean"
          },
          "IsEmptyValueAllowed": {
            "type": "boolean"
          },
          "DefaultValue": {
            "type": "string",
            "nullable": true
          },
          "Values": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "MaximumValue": {
            "type": "number",
            "format": "double"
          },
          "IsExclusiveMaximum": {
            "type": "boolean"
          },
          "MinimumValue": {
            "type": "number",
            "format": "double"
          },
          "IsExclusiveMinimum": {
            "type": "boolean"
          },
          "MaximumLength": {
            "type": "integer",
            "format": "int32"
          },
          "MinimumLength": {
            "type": "integer",
            "format": "int32"
          },
          "Pattern": {
            "type": "string",
            "nullable": true
          },
          "ArrayMaximumItems": {
            "type": "integer",
            "format": "int32"
          },
          "ArrayMinimumItems": {
            "type": "integer",
            "format": "int32"
          },
          "IsArrayUnique": {
            "type": "boolean"
          },
          "MultipleOf": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "ResponseMessage": {
        "type": "object",
        "properties": {
          "StatusCode": {
            "type": "string",
            "nullable": true
          },
          "Schema": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseMessageHeader"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Parameter": {
        "type": "object",
        "properties": {
          "DataType": {
            "$ref": "#/components/schemas/DataType"
          },
          "ArrayFormat": {
            "$ref": "#/components/schemas/ArrayFormat"
          },
          "ArrayItem": {
            "$ref": "#/components/schemas/Parameter"
          },
          "DataFormat": {
            "type": "string",
            "nullable": true
          },
          "Schema": {
            "type": "string",
            "nullable": true
          },
          "IsRequired": {
            "type": "boolean"
          },
          "IsEmptyValueAllowed": {
            "type": "boolean"
          },
          "DefaultValue": {
            "type": "string",
            "nullable": true
          },
          "Values": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "MaximumValue": {
            "type": "number",
            "format": "double"
          },
          "IsExclusiveMaximum": {
            "type": "boolean"
          },
          "MinimumValue": {
            "type": "number",
            "format": "double"
          },
          "IsExclusiveMinimum": {
            "type": "boolean"
          },
          "MaximumLength": {
            "type": "integer",
            "format": "int32"
          },
          "MinimumLength": {
            "type": "integer",
            "format": "int32"
          },
          "Pattern": {
            "type": "string",
            "nullable": true
          },
          "ArrayMaximumItems": {
            "type": "integer",
            "format": "int32"
          },
          "ArrayMinimumItems": {
            "type": "integer",
            "format": "int32"
          },
          "IsArrayUnique": {
            "type": "boolean"
          },
          "MultipleOf": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "ResponseMessageHeader": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "DataType": {
            "$ref": "#/components/schemas/DataType"
          },
          "ArrayFormat": {
            "$ref": "#/components/schemas/ArrayFormat"
          },
          "ArrayItem": {
            "$ref": "#/components/schemas/Parameter"
          },
          "DataFormat": {
            "type": "string",
            "nullable": true
          },
          "Schema": {
            "type": "string",
            "nullable": true
          },
          "IsRequired": {
            "type": "boolean"
          },
          "IsEmptyValueAllowed": {
            "type": "boolean"
          },
          "DefaultValue": {
            "type": "string",
            "nullable": true
          },
          "Values": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "MaximumValue": {
            "type": "number",
            "format": "double"
          },
          "IsExclusiveMaximum": {
            "type": "boolean"
          },
          "MinimumValue": {
            "type": "number",
            "format": "double"
          },
          "IsExclusiveMinimum": {
            "type": "boolean"
          },
          "MaximumLength": {
            "type": "integer",
            "format": "int32"
          },
          "MinimumLength": {
            "type": "integer",
            "format": "int32"
          },
          "Pattern": {
            "type": "string",
            "nullable": true
          },
          "ArrayMaximumItems": {
            "type": "integer",
            "format": "int32"
          },
          "ArrayMinimumItems": {
            "type": "integer",
            "format": "int32"
          },
          "IsArrayUnique": {
            "type": "boolean"
          },
          "MultipleOf": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "ServiceVersion": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "ServiceId": {
            "type": "integer",
            "format": "int32"
          },
          "Version": {
            "type": "string",
            "nullable": true
          },
          "VersionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "FriendlyName": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Namespace": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/Status2"
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "LastUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "BaseAddress": {
            "type": "string",
            "nullable": true
          },
          "BehaviorId": {
            "type": "integer",
            "format": "int32"
          },
          "Settings": {
            "$ref": "#/components/schemas/ServiceVersionSettings"
          },
          "MessageProcessing": {
            "$ref": "#/components/schemas/MessagePipeline"
          },
          "IsSchemaFirst": {
            "type": "boolean"
          },
          "IsAccessKeyRequired": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ServiceVersionImportDetails": {
        "type": "object",
        "properties": {
          "ServiceId": {
            "type": "integer",
            "format": "int32"
          },
          "QName": {
            "$ref": "#/components/schemas/XmlQualifiedName"
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/Status2"
          },
          "Endpoints": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "Contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/XmlQualifiedName"
            },
            "nullable": true
          },
          "IsSchemaFirst": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ServiceVersionUpdateDetails": {
        "type": "object",
        "properties": {
          "ServiceVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "QName": {
            "$ref": "#/components/schemas/XmlQualifiedName"
          },
          "Endpoints": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "Contracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/XmlQualifiedName"
            },
            "nullable": true
          },
          "Options": {
            "$ref": "#/components/schemas/Options"
          }
        },
        "additionalProperties": false
      },
      "ServiceVersionSearchResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchResult"
          }
        ],
        "properties": {
          "ServiceId": {
            "type": "integer",
            "format": "int32"
          },
          "ServiceName": {
            "type": "string",
            "nullable": true
          },
          "IsVirtual": {
            "type": "boolean"
          },
          "Kind": {
            "$ref": "#/components/schemas/Kind"
          },
          "VersionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "Status": {
            "$ref": "#/components/schemas/Status2"
          }
        },
        "additionalProperties": false
      },
      "ServiceVersionSearchQuery": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchQuery"
          }
        ],
        "properties": {
          "Kind": {
            "$ref": "#/components/schemas/Kind"
          },
          "Keywords": {
            "type": "string",
            "nullable": true
          },
          "ServiceName": {
            "type": "string",
            "nullable": true
          },
          "IsVirtual": {
            "type": "boolean"
          },
          "VersionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "Status": {
            "$ref": "#/components/schemas/Status2"
          }
        },
        "additionalProperties": false
      },
      "VirtualizationRequest": {
        "type": "object",
        "properties": {
          "ServiceVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "Profile": {
            "$ref": "#/components/schemas/VirtualizationProfile"
          }
        },
        "additionalProperties": false
      },
      "DataSchema": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "SchemaType": {
            "enum": [
              "XmlSchema",
              "JsonSchema"
            ],
            "type": "string",
            "nullable": true
          },
          "ServiceVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "Namespace": {
            "type": "string",
            "nullable": true
          },
          "Json": {
            "type": "string",
            "nullable": true
          },
          "Xsd": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "nullable": true
          },
          "IsPopulated": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "QualifiedName": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Namespace": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Operation": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "ContractId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "ExchangePattern": {
            "$ref": "#/components/schemas/ExchangePattern"
          },
          "ProtectionLevel": {
            "$ref": "#/components/schemas/ProtectionLevel"
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "IsPublished": {
            "type": "boolean"
          },
          "IsDeprecated": {
            "type": "boolean"
          },
          "IsStatic": {
            "type": "boolean"
          },
          "IsSessionTerminating": {
            "type": "boolean"
          },
          "IsSessionInitiating": {
            "type": "boolean"
          },
          "TransactionFlow": {
            "enum": [
              "NotAllowed",
              "Allowed",
              "Mandatory"
            ],
            "type": "string",
            "nullable": true
          },
          "DownstreamOperationId": {
            "type": "integer",
            "format": "int32"
          },
          "DownstreamContractId": {
            "type": "integer",
            "format": "int32"
          },
          "MessageProcessing": {
            "$ref": "#/components/schemas/MessagePipeline"
          }
        },
        "additionalProperties": false
      },
      "Endpoint": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainObjectBase"
          }
        ],
        "properties": {
          "ContractId": {
            "type": "integer",
            "format": "int32"
          },
          "BindingId": {
            "type": "integer",
            "format": "int32"
          },
          "BehaviorId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "LogicalAddress": {
            "type": "string",
            "nullable": true
          },
          "PhysicalAddress": {
            "type": "string",
            "nullable": true
          },
          "NodeId": {
            "type": "integer",
            "format": "int32"
          },
          "NodeAddressId": {
            "type": "integer",
            "format": "int32"
          },
          "DownstreamEndpointId": {
            "type": "integer",
            "format": "int32"
          },
          "EndpointGroupId": {
            "type": "integer",
            "format": "int32"
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "IsPublished": {
            "type": "boolean"
          },
          "IsOutbound": {
            "type": "boolean"
          },
          "IsSync": {
            "type": "boolean"
          },
          "MonType": {
            "enum": [
              "N",
              "B",
              "A"
            ],
            "type": "string",
            "nullable": true
          },
          "RecPoints": {
            "$ref": "#/components/schemas/Point"
          }
        },
        "additionalProperties": false
      },
      "EndpointSummary": {
        "type": "object",
        "properties": {
          "EndpointId": {
            "type": "integer",
            "format": "int32"
          },
          "EndpointName": {
            "type": "string",
            "nullable": true
          },
          "PhysicalAddress": {
            "type": "string",
            "nullable": true
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "ServiceId": {
            "type": "integer",
            "format": "int32"
          },
          "ServiceName": {
            "type": "string",
            "nullable": true
          },
          "ServiceVersionId": {
            "type": "integer",
            "format": "int32"
          },
          "ServiceVersionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "ServiceVersionVersion": {
            "type": "string",
            "nullable": true
          },
          "ServiceVersionName": {
            "type": "string",
            "nullable": true
          },
          "Kind": {
            "$ref": "#/components/schemas/Kind"
          },
          "BindingId": {
            "type": "integer",
            "format": "int32"
          },
          "BindingName": {
            "type": "string",
            "nullable": true
          },
          "AddressKind": {
            "$ref": "#/components/schemas/Kind4"
          }
        },
        "additionalProperties": false
      },
      "EndpointSearchResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EndpointSearchBase"
          }
        ],
        "properties": {
          "EndpointId": {
            "type": "integer",
            "format": "int32"
          },
          "ServiceVersionLastUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EndpointSearchBase": {
        "type": "object",
        "properties": {
          "ServiceKey": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "ServicePathAndName": {
            "type": "string",
            "nullable": true
          },
          "IsVirtual": {
            "type": "boolean"
          },
          "VersionNumber": {
            "type": "integer",
            "format": "int32"
          },
          "ServiceVersionStatus": {
            "$ref": "#/components/schemas/Status2"
          },
          "ServiceVersionQName": {
            "$ref": "#/components/schemas/XmlQualifiedName"
          },
          "ServiceVersionKey": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "ContractKey": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "ContractQName": {
            "$ref": "#/components/schemas/XmlQualifiedName"
          },
          "NodeKey": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "NodePathAndName": {
            "type": "string",
            "nullable": true
          },
          "EndpointKey": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "EndpointName": {
            "type": "string",
            "nullable": true
          },
          "LogicalAddress": {
            "type": "string",
            "nullable": true
          },
          "PhysicalAddress": {
            "type": "string",
            "nullable": true
          },
          "BindingKey": {
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000",
            "nullable": true
          },
          "BindingPathAndName": {
            "type": "string",
            "nullable": true
          },
          "IsHosted": {
            "type": "boolean"
          },
          "Kind": {
            "$ref": "#/components/schemas/Kind"
          }
        },
        "additionalProperties": false
      },
      "EndpointSearchQuery": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/EndpointSearchBase"
          }
        ],
        "properties": {
          "Keywords": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BindingSearchResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchResult"
          }
        ],
        "properties": {
          "Capabilities": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BindingSearchQuery": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchQuery"
          }
        ],
        "properties": {
          "Configuration": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IdentitySearchResult": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchResult"
          }
        ],
        "properties": {
          "Kind": {
            "$ref": "#/components/schemas/Kind3"
          }
        },
        "additionalProperties": false
      },
      "IdentitySearchQuery": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SearchQuery"
          }
        ],
        "properties": {
          "Kind": {
            "$ref": "#/components/schemas/Kind3"
          }
        },
        "additionalProperties": false
      },
      "TimeUnit": {
        "enum": [
          "Second",
          "Minute",
          "Hour",
          "Day",
          "Month",
          "Year"
        ],
        "type": "string",
        "nullable": true
      },
      "SortOrder": {
        "enum": [
          "None",
          "Ascending",
          "Descending"
        ],
        "type": "string",
        "nullable": true
      },
      "MessageVersion": {
        "enum": [
          "None",
          "Soap11",
          "Soap12"
        ],
        "type": "string",
        "nullable": true
      },
      "EntityType": {
        "enum": [
          "Unknown",
          "Node",
          "Binding",
          "Behavior",
          "Service",
          "ServiceVersion",
          "Contract",
          "Endpoint",
          "Operation",
          "ServiceAgreement",
          "AuthorizationRule",
          "User",
          "AlertSourceType",
          "AlertType",
          "AlertGroup",
          "AlertHandlerType",
          "AlertHandler",
          "RouterType",
          "ExpressionType",
          "Folder",
          "File",
          "Message",
          "MessageHeader",
          "NodeAddress",
          "AuthorizationClaimType",
          "ServiceAgreementAlertType",
          "Alert",
          "Property",
          "NodeInstance",
          "MonitoringRecord",
          "MonitoringActivity",
          "MonitoringTransaction",
          "Issuer",
          "EndpointGroup",
          "Identity",
          "MessageSample",
          "MetadataSection",
          "ServiceAgreementMetric",
          "AuthorizationRuleAssignment",
          "ChangeEntityAlertType",
          "ChangeFolderAlertType",
          "DataSchema",
          "Custom",
          "Reference",
          "ComponentType",
          "Product",
          "Consumer",
          "Subscription",
          "Application",
          "ProductServiceVersion",
          "SecurityRole",
          "CustomAttributeType",
          "VirtualizationProfile",
          "AuthorizationGroup",
          "AuthorizationGroupMember",
          "MonitoringFilterType",
          "Certificate"
        ],
        "type": "string",
        "nullable": true
      },
      "Status": {
        "enum": [
          "Requested",
          "Activated",
          "Deactivated"
        ],
        "type": "string",
        "nullable": true
      },
      "Serializer": {
        "enum": [
          "Auto",
          "DataContractSerializer",
          "XmlSerializer",
          "SoapSerializer"
        ],
        "type": "string",
        "nullable": true
      },
      "ChangeTypes": {
        "enum": [
          "None",
          "Created",
          "Updated",
          "Deleted",
          "All"
        ],
        "type": "string",
        "nullable": true
      },
      "Entities": {
        "enum": [
          "None",
          "Folder",
          "Binding",
          "PhysicalService",
          "VirtualService",
          "Service",
          "Node",
          "Rule",
          "User",
          "ServiceAgreement",
          "EndpointBehavior",
          "ServiceBehavior",
          "Behavior",
          "Custom",
          "Identity",
          "AuthorizationGroup",
          "All"
        ],
        "type": "string",
        "nullable": true
      },
      "BaseAddressCollisionAction": {
        "enum": [
          "Throw",
          "Disable",
          "Retire"
        ],
        "type": "string",
        "nullable": true
      },
      "ErrorTolerance": {
        "enum": [
          "IgnoreErrors",
          "IgnoreWarnings",
          "IgnoreNone"
        ],
        "type": "string",
        "nullable": true
      },
      "Status2": {
        "enum": [
          "Draft",
          "Active",
          "Obsolete",
          "Retired"
        ],
        "type": "string",
        "nullable": true
      },
      "Options": {
        "enum": [
          "None",
          "ProtectExistingEndpoints"
        ],
        "type": "string",
        "nullable": true
      },
      "Metric": {
        "enum": [
          "TotalCount",
          "SuccessCount",
          "FaultCount",
          "FaultPercent",
          "AverageDuration",
          "MaximumDuration",
          "AverageSize",
          "MaximumSize",
          "TotalBytes",
          "RequestedBytes",
          "RespondedBytes",
          "RespondedBytesPercent",
          "ExceptionCount",
          "ExceptionPercent"
        ],
        "type": "string",
        "nullable": true
      },
      "Kind": {
        "enum": [
          "Soap",
          "Rest",
          "OpenData"
        ],
        "type": "string",
        "nullable": true
      },
      "Action": {
        "enum": [
          "None",
          "Permit",
          "Deny"
        ],
        "type": "string",
        "nullable": true
      },
      "Status3": {
        "enum": [
          "Draft",
          "Active",
          "Retired"
        ],
        "type": "string",
        "nullable": true
      },
      "ReferenceType": {
        "enum": [
          "DependsOn",
          "Contains"
        ],
        "type": "string",
        "nullable": true
      },
      "NodeType": {
        "enum": [
          "IisMixedTransportsMode",
          "IisAspNetCompatibilityMode",
          "SelfHosted"
        ],
        "type": "string",
        "nullable": true
      },
      "Kind2": {
        "enum": [
          "Endpoint",
          "Service"
        ],
        "type": "string",
        "nullable": true
      },
      "Kind3": {
        "enum": [
          "X509Certificate",
          "Windows",
          "UserNamePassword",
          "UserPrincipalName",
          "ServicePrincipalName",
          "Digest",
          "UserNamePasswordHash",
          "WindowsNoPassword",
          "AzureCredentials",
          "DnsName",
          "X509CertificateFederation",
          "WindowsGroup",
          "Claim",
          "X509CertificateThumbprint",
          "OAuthClientCredentials",
          "OAuthServiceCredentials"
        ],
        "type": "string",
        "nullable": true
      },
      "ExchangePattern": {
        "enum": [
          "Send",
          "RequestResponse",
          "SolicitResponse",
          "Receive"
        ],
        "type": "string",
        "nullable": true
      },
      "Direction": {
        "enum": [
          "Input",
          "Output",
          "Fault",
          "GenericFault"
        ],
        "type": "string",
        "nullable": true
      },
      "Permission": {
        "enum": [
          "None",
          "ReadOnly",
          "ReadWrite",
          "Administrator"
        ],
        "type": "string",
        "nullable": true
      },
      "Kind4": {
        "enum": [
          "Physical",
          "AzureServiceBus"
        ],
        "type": "string",
        "nullable": true
      },
      "LastReportedStatus": {
        "enum": [
          "Idle",
          "Normal",
          "Warnings",
          "Errors"
        ],
        "type": "string",
        "nullable": true
      },
      "Type": {
        "enum": [
          "I",
          "O"
        ],
        "type": "string",
        "nullable": true
      },
      "Status4": {
        "enum": [
          "I",
          "S",
          "F",
          "E"
        ],
        "type": "string",
        "nullable": true
      },
      "Point": {
        "enum": [
          "None",
          "ReqT",
          "ReqS",
          "ResS",
          "ResT",
          "Claims",
          "All"
        ],
        "type": "string",
        "nullable": true
      },
      "Severity": {
        "enum": [
          "E",
          "W",
          "I",
          "T"
        ],
        "type": "string",
        "nullable": true
      },
      "ProtectionLevel": {
        "enum": [
          "None",
          "Sign",
          "EncryptAndSign"
        ],
        "type": "string",
        "nullable": true
      },
      "DataType": {
        "enum": [
          "String",
          "Number",
          "Integer",
          "Boolean",
          "Array",
          "File",
          "Complex"
        ],
        "type": "string",
        "nullable": true
      },
      "ArrayFormat": {
        "enum": [
          "CommaSeparated",
          "SpaceSeparated",
          "TabSeparated",
          "PipeSeparated",
          "Multiple"
        ],
        "type": "string",
        "nullable": true
      }
    }
  }
}